<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[fp-ddd chapter 7]]></title>
      <url>http://hczhang.com/2020/08/22/fp-ddd-chapter-7/</url>
      <content type="html"><![CDATA[<h1 id="Domain-Modeling-Made-Functional-Chapter-5"><a href="#Domain-Modeling-Made-Functional-Chapter-5" class="headerlink" title="Domain Modeling Made Functional - Chapter 5"></a>Domain Modeling Made Functional - Chapter 5</h1><h2 id="Modeling-Workflows-as-Pipelines"><a href="#Modeling-Workflows-as-Pipelines" class="headerlink" title="Modeling Workflows as Pipelines"></a>Modeling Workflows as Pipelines</h2><a id="more"></a>
<blockquote>
<p>Transformation-oriented programming</p>
</blockquote>
<p>We’ll create a “pipeline” to represent the business process, which in turn will be built from a series of smaller “pipes.” Each smaller pipe will do one transformation, and then we’ll glue the smaller pipes together to make a bigger pipeline. </p>
<ul>
<li><p>The Workflow Input</p>
</li>
<li><p>Commands as Input</p>
<ul>
<li><p>The command should contain everything that the workflow needs to process the request</p>
</li>
<li><p>Sharing common structures using Generics</p>
</li>
</ul>
</li>
</ul>
<h2 id="Modeling-an-Order-as-a-Set-of-States"><a href="#Modeling-an-Order-as-a-Set-of-States" class="headerlink" title="Modeling an Order as a Set of States"></a>Modeling an Order as a Set of States</h2><p>A much better way to model the domain is to create a new type for each state of the order. This allows us to eliminate implicit states and conditional fields.</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">​ <span class="class"><span class="keyword">type</span>​ <span class="type">Order</span> =</span></div><div class="line">​   | <span class="type">Unvalidated</span> ​<span class="keyword">of</span>​ <span class="type">UnvalidatedOrder</span></div><div class="line">​   | <span class="type">Validated</span> ​<span class="keyword">of</span>​ <span class="type">ValidatedOrder</span></div><div class="line">​   | <span class="type">Priced</span> ​<span class="keyword">of</span>​ <span class="type">PricedOrder</span></div></pre></td></tr></table></figure>
<h2 id="State-Machines"><a href="#State-Machines" class="headerlink" title="State Machines"></a>State Machines</h2><blockquote>
<p>we could encode that requirement directly in the function signature, using the compiler to ensure that that business rule was complied with.</p>
</blockquote>
<p>A much better approach is to make each state have its own type, which stores the data that is relevant to that state (if any).</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">​​<span class="class"><span class="keyword">type</span>​ <span class="type">Item</span> = ...</span></div><div class="line">​​<span class="class"><span class="keyword">type</span>​ <span class="type">ActiveCartData</span> = &#123; <span class="type">UnpaidItems</span>: <span class="type">Item</span> ​<span class="title">list</span>​ &#125;</span></div><div class="line">​​<span class="class"><span class="keyword">type</span>​ <span class="type">PaidCartData</span> = &#123; <span class="type">PaidItems</span>: <span class="type">Item</span> ​<span class="title">list</span>​; <span class="type">Payment</span>: ​<span class="title">float</span>​ &#125;</span></div><div class="line">​</div><div class="line">​​<span class="class"><span class="keyword">type</span>​ <span class="type">ShoppingCart</span> =</span></div><div class="line">​  | <span class="type">EmptyCart</span>  ​// no <span class="class"><span class="keyword">data</span>​</span></div><div class="line">​  | <span class="type">ActiveCart</span> ​<span class="keyword">of</span>​ <span class="type">ActiveCartData</span></div><div class="line">​  | <span class="type">PaidCart</span> ​<span class="keyword">of</span>​ <span class="type">PaidCartData</span></div></pre></td></tr></table></figure>
<p>A command handler is then represented by a function that accepts the entire state machine (the choice type) and returns a new version of it (the updated choice type).</p>
<h2 id="Modeling-Each-Step-in-the-Workflow-with-Types"><a href="#Modeling-Each-Step-in-the-Workflow-with-Types" class="headerlink" title="Modeling Each Step in the Workflow with Types"></a>Modeling Each Step in the Workflow with Types</h2><p>We’ve been talking about modeling processes as functions with inputs and outputs. But how do we model these dependencies using types? Simple, we just treat them as functions, too. The type signature of the function will become the “interface” that we need to implement later.</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">​<span class="class"><span class="keyword">type</span>​ <span class="type">CheckProductCodeExists</span> =</span></div><div class="line">  <span class="type">ProductCode</span> -&gt; ​bool​</div><div class="line">  ​// ^input      ^output</div></pre></td></tr></table></figure>
<blockquote>
<p>We have put the dependencies first in the parameter order and the input type second to last, just before the output type. The reason for this is to make partial application easier (the functional equivalent of dependency injection). </p>
<p>Booleans are generally a bad choice in a design, though, because they are very uninformative. It would be better to use a simple Sent/NotSent choice type instead of a bool.</p>
</blockquote>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">​<span class="class"><span class="keyword">type</span>​ <span class="type">SendResult</span> = <span class="type">Sent</span> | <span class="type">NotSent</span></span></div><div class="line">​</div><div class="line">​​<span class="class"><span class="keyword">type</span>​ <span class="type">SendOrderAcknowledgment</span> =</span></div><div class="line">​    <span class="type">OrderAcknowledgment</span> -&gt; <span class="type">SendResult</span></div></pre></td></tr></table></figure>
<p>In summary</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// <span class="type">Event</span></div><div class="line">​<span class="class"><span class="keyword">type</span>​ <span class="type">OrderAcknowledgmentSent</span> = &#123;</span></div><div class="line"><span class="class">  <span class="type">OrderId</span> : <span class="type">OrderId</span></span></div><div class="line"><span class="class">  <span class="type">EmailAddress</span> : <span class="type">EmailAddress</span></span></div><div class="line"><span class="class">  &#125;</span></div><div class="line"></div><div class="line">​<span class="class"><span class="keyword">type</span>​ <span class="type">AcknowledgeOrder</span> =</span></div><div class="line">  <span class="type">CreateOrderAcknowledgmentLetter</span>     ​// dependency​</div><div class="line">    -&gt; <span class="type">SendOrderAcknowledgment</span>        ​// dependency​</div><div class="line">    -&gt; <span class="type">PricedOrder</span>                    ​// input​</div><div class="line">    -&gt; <span class="type">OrderAcknowledgmentSent</span> option ​// output</div></pre></td></tr></table></figure>
<h2 id="Creating-the-events-to-return"><a href="#Creating-the-events-to-return" class="headerlink" title="Creating the events to return"></a>Creating the events to return</h2><p>the workflow returns a list of events, where an event can be one of OrderPlaced, BillableOrderPlaced, or OrderAcknowledgmentSent.</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">​<span class="class"><span class="keyword">type</span>​ <span class="type">PlaceOrderEvent</span> =</span></div><div class="line">​  | <span class="type">OrderPlaced</span> ​<span class="keyword">of</span>​ <span class="type">OrderPlaced</span></div><div class="line">​  | <span class="type">BillableOrderPlaced</span> ​<span class="keyword">of</span>​ <span class="type">BillableOrderPlaced</span></div><div class="line">​  | <span class="type">AcknowledgmentSent</span>  ​<span class="keyword">of</span>​ <span class="type">OrderAcknowledgmentSent</span></div><div class="line"></div><div class="line">​​<span class="class"><span class="keyword">type</span>​ <span class="type">CreateEvents</span> =</span></div><div class="line">​   <span class="type">PricedOrder</span> -&gt; <span class="type">PlaceOrderEvent</span> ​list</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> fp </tag>
            
            <tag> f# </tag>
            
            <tag> ddd </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[fp-ddd chapter 6]]></title>
      <url>http://hczhang.com/2020/08/21/fp-ddd-chapter-6/</url>
      <content type="html"><![CDATA[<h1 id="Domain-Modeling-Made-Functional-Chapter-5"><a href="#Domain-Modeling-Made-Functional-Chapter-5" class="headerlink" title="Domain Modeling Made Functional - Chapter 5"></a>Domain Modeling Made Functional - Chapter 5</h1><h2 id="Integrity-and-Consistency-in-the-Domain"><a href="#Integrity-and-Consistency-in-the-Domain" class="headerlink" title="Integrity and Consistency in the Domain"></a>Integrity and Consistency in the Domain</h2><a id="more"></a>
]]></content>
      
        
        <tags>
            
            <tag> fp </tag>
            
            <tag> f# </tag>
            
            <tag> ddd </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[fp-ddd chapter 5]]></title>
      <url>http://hczhang.com/2020/08/21/fp-ddd-chapter-5/</url>
      <content type="html"><![CDATA[<h1 id="Domain-Modeling-Made-Functional-Chapter-4"><a href="#Domain-Modeling-Made-Functional-Chapter-4" class="headerlink" title="Domain Modeling Made Functional - Chapter 4"></a>Domain Modeling Made Functional - Chapter 4</h1><h2 id="Domain-Modeling-with-Types"><a href="#Domain-Modeling-with-Types" class="headerlink" title="Domain Modeling with Types"></a>Domain Modeling with Types</h2><a id="more"></a>
<p>we’re using a namespace in F# to indicate a DDD bounded context</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="title">namespace</span>​ <span class="type">OrderTaking</span>.<span class="type">Domain</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">Undefined</span> = exn</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">WidgetCode</span> = <span class="type">WidgetCode</span> of string</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">GizmoCode</span> = <span class="type">GizmoCode</span> of string</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">ProductCode</span> =</span></div><div class="line">  | <span class="type">Widget</span> <span class="keyword">of</span> <span class="type">WidgetCode</span></div><div class="line">  | <span class="type">Gizmo</span> <span class="keyword">of</span> <span class="type">GizmoCode</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">UnitQuantikty</span> = <span class="type">UnitQuantity</span> of int</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">KilogramQuantity</span> = <span class="type">KilogramQuantity</span> of decimal</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">OrderQuantity</span> =</span></div><div class="line">  | <span class="type">Unit</span> <span class="keyword">of</span> <span class="type">UnitQuantity</span></div><div class="line">  | <span class="type">Kilos</span> <span class="keyword">of</span> <span class="type">KilogramQuantity</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">OrderId</span> = <span class="type">Undefined</span></span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">OrderLineId</span> = <span class="type">Undefined</span></span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">CustomerId</span> = <span class="type">Undefined</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">CustomerInfo</span> = <span class="type">Undefined</span></span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">ShippingAddress</span> = <span class="type">Undefined</span></span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">ShippingAddress</span> = <span class="type">Undefined</span></span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">BillingAddress</span> = <span class="type">Undefined</span></span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">Price</span> = <span class="type">Undefined</span></span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">BillingAmount</span> = <span class="type">Undefined</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">Order</span> = &#123;</span></div><div class="line"><span class="class">  <span class="type">Id</span>: <span class="type">OrderId</span>  // <span class="title">id</span> <span class="title">for</span> <span class="title">entity</span></span></div><div class="line"><span class="class">  <span class="type">CustomerId</span>: <span class="type">CustomerId</span>  ​// <span class="title">customer</span> <span class="title">reference</span></span></div><div class="line"><span class="class">  <span class="type">ShippingAddress</span>: <span class="type">ShippingAddress</span></span></div><div class="line"><span class="class">  <span class="type">BillingAddress</span>: <span class="type">BillingAddress</span></span></div><div class="line"><span class="class">  <span class="type">OrderLines</span>: <span class="type">OrderLInt</span> <span class="title">list</span></span></div><div class="line"><span class="class">  <span class="type">AmountToBill</span>: <span class="type">BillingAmount</span></span></div><div class="line"><span class="class">&#125;</span></div><div class="line"></div><div class="line"><span class="title">and</span> <span class="type">OrderLine</span> = &#123;</div><div class="line">  <span class="type">Id</span>: <span class="type">OrderLineID</span> // id for entity</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// input</div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">UnvalidatedOrder</span> = &#123;</span></div><div class="line"><span class="class">  <span class="type">OrderId</span>: <span class="title">string</span></span></div><div class="line"><span class="class">  <span class="type">CustomerInfo</span>: ...</span></div><div class="line"><span class="class">  <span class="type">ShippingAddress</span>: ...</span></div><div class="line"><span class="class">&#125;</span></div><div class="line"></div><div class="line">// output</div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">PlaceOrderEvents</span> = &#123;</span></div><div class="line"><span class="class">  <span class="type">AcknowledgmentSent</span>: ...</span></div><div class="line"><span class="class">  <span class="type">OrderPlaced</span>: ...</span></div><div class="line"><span class="class">  <span class="type">BillableOrderPlaced</span>: ...</span></div><div class="line"><span class="class">&#125;</span></div><div class="line"></div><div class="line">// <span class="type">Errors</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">PlaceOrderError</span> =</span></div><div class="line">  | <span class="type">ValidationError</span> <span class="keyword">of</span> <span class="type">ValidationError</span> list</div><div class="line">  | .. // other errors</div><div class="line"></div><div class="line"><span class="title">and</span> <span class="type">ValidationError</span> = &#123;</div><div class="line">  <span class="type">FieldName</span>: string</div><div class="line">  <span class="type">ErrorDescription</span>: string</div><div class="line">&#125;</div><div class="line"></div><div class="line">// <span class="type">The</span> <span class="string">"place order"</span> process</div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">PlaceOrder</span> =</span></div><div class="line">  <span class="type">UnvalidatedOrder</span> -&gt; <span class="type">Result</span>&lt;<span class="type">PlaceOrderEvents</span>, <span class="type">PlaceOrderError</span>&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> fp </tag>
            
            <tag> f# </tag>
            
            <tag> ddd </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[fp-ddd chapter 4]]></title>
      <url>http://hczhang.com/2020/08/16/fp-ddd-chapter-4/</url>
      <content type="html"><![CDATA[<h1 id="Domain-Modeling-Made-Functional-Chapter-4"><a href="#Domain-Modeling-Made-Functional-Chapter-4" class="headerlink" title="Domain Modeling Made Functional - Chapter 4"></a>Domain Modeling Made Functional - Chapter 4</h1><h2 id="Understand-F-types"><a href="#Understand-F-types" class="headerlink" title="Understand F# types"></a>Understand F# types</h2><a id="more"></a>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">CheckNumber</span> = <span class="type">CheckNumber</span> of int</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">CardNumber</span> = <span class="type">CardNumber</span> of string</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">CardType</span> =</span></div><div class="line">  <span class="type">Visa</span> | <span class="type">Mastercard</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">CreditCardInfo</span> = &#123;</span></div><div class="line"><span class="class">  <span class="type">CardType</span>: <span class="type">CardType</span></span></div><div class="line"><span class="class">  <span class="type">CardNumber</span>: <span class="type">CardNumber</span></span></div><div class="line"><span class="class">&#125;</span></div><div class="line"></div><div class="line">// <span class="comment">-------</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">PaymentMethod</span> =</span></div><div class="line">  | <span class="type">Cash</span></div><div class="line">  | <span class="type">Check</span> <span class="keyword">of</span> <span class="type">CheckNumber</span></div><div class="line">  | <span class="type">Card</span> <span class="keyword">of</span> <span class="type">CreditCardInfo</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">PaymentAmount</span> = <span class="type">PaymentAmount</span> of decimal</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">Currency</span> = <span class="type">EUR</span> | <span class="type">USD</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">Payment</span> = &#123;</span></div><div class="line"><span class="class">  <span class="type">Amount</span>: <span class="type">PaymentAmount</span></span></div><div class="line"><span class="class">  <span class="type">Currency</span>: <span class="type">Currency</span></span></div><div class="line"><span class="class">  <span class="type">Method</span>: <span class="type">PaymentMethod</span></span></div><div class="line"><span class="class">&#125;</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> fp </tag>
            
            <tag> f# </tag>
            
            <tag> ddd </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node Child Process]]></title>
      <url>http://hczhang.com/2020/01/10/Node-Child-Process/</url>
      <content type="html"><![CDATA[<p>Take note from <a href="https://jscomplete.com/learn/node-beyond-basics/child-processes" target="_blank" rel="noopener">node-child process</a> More information, read source.</p>
<p>4 ways to create a child process</p>
<ul>
<li>spawn()</li>
<li>fork()</li>
<li>exec()</li>
<li>execFile()</li>
</ul>
<a id="more"></a>
<h2 id="1-Spawned-Child-Processes"><a href="#1-Spawned-Child-Processes" class="headerlink" title="1 Spawned Child Processes"></a>1 Spawned Child Processes</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">"child_process"</span>)</div><div class="line"><span class="keyword">const</span> child = spawn(<span class="string">"pwd"</span>)</div><div class="line"></div><div class="line">child.on(<span class="string">'exit'</span>, (code, signal) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`child process exited with code <span class="subst">$&#123;code&#125;</span> and signal <span class="subst">$&#123;signal&#125;</span>`</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Child-events"><a href="#Child-events" class="headerlink" title="Child events"></a>Child events</h3><ul>
<li>The <em><code>disconnect</code></em> event is emitted when the parent process manually calls the child.disconnect method.</li>
<li>The <em><code>error</code></em> event is emitted if the process could not be spawned or killed.</li>
<li>The <em><code>close</code></em> event is emitted when the stdio streams of a child process get closed.</li>
<li>The <em><code>message</code></em> event is the most important one. It’s emitted when the child process uses the <code>process.send()</code> function to send messages. This is how parent/child processes can communicate with each other.</li>
</ul>
<h3 id="Child-stdio"><a href="#Child-stdio" class="headerlink" title="Child stdio"></a>Child stdio</h3><ul>
<li>child.stdin</li>
<li>child.stdout</li>
<li>child.stderr</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">"child_process"</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> child = spawn(<span class="string">"wc"</span>);</div><div class="line"></div><div class="line">process.stdin.pipe(child.stdin);</div><div class="line"></div><div class="line">child.stdout.on(<span class="string">"data"</span>, data =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`child stdout:\n<span class="subst">$&#123;data&#125;</span>`</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">"child_process"</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> find = spawn(<span class="string">"find"</span>, [<span class="string">"."</span>, <span class="string">"-type"</span>, <span class="string">"f"</span>]);</div><div class="line"><span class="keyword">const</span> wc = spawn(<span class="string">"wc"</span>, [<span class="string">"-l"</span>]);</div><div class="line"></div><div class="line">find.stdout.pipe(wc.stdin);</div><div class="line"></div><div class="line">wc.stdout.on(<span class="string">"data"</span>, data =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Number of files <span class="subst">$&#123;data&#125;</span>`</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="spawn-options"><a href="#spawn-options" class="headerlink" title="spawn options"></a>spawn options</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> child = spawn(<span class="string">"find . -type f | wc -l"</span>, &#123;</div><div class="line">  stdio: <span class="string">"inherit"</span>,</div><div class="line">  shell: <span class="literal">true</span>,</div><div class="line">  cwd: <span class="string">'/usr/local'</span>,</div><div class="line">  env: &#123; <span class="attr">USER</span>: <span class="string">'STEVEN'</span> &#125;,</div><div class="line">&#125;)</div><div class="line"></div><div class="line">child.unref()</div></pre></td></tr></table></figure>
<h4 id="stdio-‘inherit’"><a href="#stdio-‘inherit’" class="headerlink" title="stdio: ‘inherit’"></a>stdio: ‘inherit’</h4><p>when we execute the code, the child process inherits the main process <code>stdin</code>, <code>stdout</code>, and <code>stderr</code>. This causes the child process data events handlers to be triggered on the main <code>process.stdout</code> stream, making the script output the result right away.</p>
<h4 id="shell-true"><a href="#shell-true" class="headerlink" title="shell: true"></a>shell: true</h4><p>we were able to use the shell syntax in the executed command, just like we did with <code>exec</code>.</p>
<h4 id="cwd"><a href="#cwd" class="headerlink" title="cwd"></a>cwd</h4><p>we can use the cwd option to change the working directory of the script</p>
<h4 id="env"><a href="#env" class="headerlink" title="env"></a>env</h4><p>we can use is env to specify the environment variables that will be visible to the new child process. The default for this option is process.env which gives any command access to the current process environment. If we want to override that behavior, we can simply pass an empty object as the env option or new values there to be considered as the only environment variables</p>
<h4 id="detached"><a href="#detached" class="headerlink" title="detached"></a>detached</h4><p>The exact behavior of detached child processes depends on the OS. On Windows, the detached child process will have its own console window while on Linux the detached child process will be made the leader of a new process group and session.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// parent.js</span></div><div class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> child = spawn(<span class="string">'node'</span>, [<span class="string">'timer.js'</span>], &#123;</div><div class="line">  detached: <span class="literal">true</span>,</div><div class="line">  stdio: <span class="string">'ignore'</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">child.unref();</div><div class="line"></div><div class="line"><span class="comment">// timer.js</span></div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;  </div><div class="line">  <span class="comment">// keep the event loop busy</span></div><div class="line">&#125;, <span class="number">20000</span>);</div></pre></td></tr></table></figure>
<h2 id="2-Shell-Syntax-and-the-exec-Function"><a href="#2-Shell-Syntax-and-the-exec-Function" class="headerlink" title="2 Shell Syntax and the exec Function"></a>2 Shell Syntax and the exec Function</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">"child_process"</span>);</div><div class="line"></div><div class="line">exec(<span class="string">"find . -type f | wc -l"</span>, (err, stdout, stderr) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="built_in">console</span>.error(<span class="string">`exec error: <span class="subst">$&#123;err&#125;</span>`</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Number of files <span class="subst">$&#123;stdout&#125;</span>`</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="3-execFile-Function"><a href="#3-execFile-Function" class="headerlink" title="3 execFile Function"></a>3 execFile Function</h2><p>execute a file without using a shell, the execFile. It behaves exactly like the exec function, but does not use a shell, which makes it a bit more efficient</p>
<h2 id="4-The-fork-Function"><a href="#4-The-fork-Function" class="headerlink" title="4 The fork Function"></a>4 The fork Function</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// parent.js</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123; fork &#125; = <span class="built_in">require</span>(<span class="string">"child_process"</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> forked = fork(<span class="string">"child.js"</span>);</div><div class="line"></div><div class="line">forked.on(<span class="string">"message"</span>, msg =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"Message from child"</span>, msg) &#125;)</div><div class="line"></div><div class="line">forked.send(&#123; <span class="attr">hello</span>: <span class="string">"world"</span> &#125;)</div><div class="line"></div><div class="line"><span class="comment">// child.js</span></div><div class="line"></div><div class="line">process.on(<span class="string">"message"</span>, msg =&gt; &#123; <span class="built_in">console</span>.log(<span class="string">"Message from parent:"</span>, msg) &#125;)</div><div class="line"></div><div class="line"><span class="keyword">let</span> counter = <span class="number">0</span></div><div class="line">setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="comment">//send back to the parent process</span></div><div class="line">  process.send(&#123; <span class="attr">counter</span>: counter++ &#125;)</div><div class="line">&#125;, <span class="number">1000</span>)</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> fork </tag>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node Stream]]></title>
      <url>http://hczhang.com/2020/01/10/Node-Stream/</url>
      <content type="html"><![CDATA[<p>Take note from <a href="https://jscomplete.com/learn/node-beyond-basics/node-streams" target="_blank" rel="noopener">node-stream</a> More information, read source.</p>
<a id="more"></a>
<h1 id="Overall"><a href="#Overall" class="headerlink" title="Overall"></a>Overall</h1><ul>
<li>A readable stream is an abstraction for a source from which data can be consumed. An example of that is the fs.createReadStream method.</li>
<li>A writable stream is an abstraction for a destination to which data can be written. An example of that is the fs.createWriteStream method.</li>
<li>A duplex stream is both Readable and Writable. An example of that is a TCP socket.</li>
<li>A transform stream is basically a duplex stream that can be used to modify or transform the data as it is written and read. An example of that is the zlib.createGzip stream to compress the data using gzip. You can think of a transform stream as a function where the input is the writable stream part and the output is readable stream part. You might also hear transform streams referred to as “through streams.”</li>
</ul>
<p>All streams are instances of EventEmitter. They emit events that can be used to read and write data. </p>
<h1 id="Pipe"><a href="#Pipe" class="headerlink" title="Pipe"></a>Pipe</h1><blockquote>
<p>readableSrc.pipe(writableDest)</p>
</blockquote>
<h1 id="Stream-Event"><a href="#Stream-Event" class="headerlink" title="Stream Event"></a>Stream Event</h1><table>
<thead>
<tr>
<th></th>
<th style="text-align:left">Readable Streams</th>
<th style="text-align:left">Writable Streams</th>
</tr>
</thead>
<tbody>
<tr>
<td>Events</td>
<td style="text-align:left">data, end, error, close, readable</td>
<td style="text-align:left">drain, finish, error, close, pipe, unpipe</td>
</tr>
<tr>
<td>Methods</td>
<td style="text-align:left">pipe(), unpipe(), wrap(), destroy()</td>
<td style="text-align:left">write(), destroy(), end()</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">read(), unshift(), resume(), pause(), isPaused(), setEncoding()</td>
<td style="text-align:left">cork(), uncork(), setDefaultEncoding()</td>
</tr>
</tbody>
</table>
<h2 id="Readable-Stream-Event"><a href="#Readable-Stream-Event" class="headerlink" title="Readable Stream Event"></a>Readable Stream Event</h2><ul>
<li>The data event, which is emitted whenever the stream passes a chunk of data to the consumer</li>
<li>The end event, which is emitted when there is no more data to be consumed from the stream.</li>
</ul>
<h2 id="Writable-Stream-Event"><a href="#Writable-Stream-Event" class="headerlink" title="Writable Stream Event"></a>Writable Stream Event</h2><ul>
<li>The drain event, which is a signal that the writable stream can receive more data.</li>
<li>The finish event, which is emitted when all data has been flushed to the underlying system.</li>
</ul>
<h1 id="Transform-Stream"><a href="#Transform-Stream" class="headerlink" title="Transform Stream"></a>Transform Stream</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; Transform &#125; = <span class="built_in">require</span>(<span class="string">"stream"</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> upperCaseTr = <span class="keyword">new</span> Transform(&#123;</div><div class="line">  transform(chunk, encoding, callback) &#123;</div><div class="line">    <span class="keyword">this</span>.push(chunk.toString().toUpperCase());</div><div class="line">    callback();</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">process.stdin.pipe(upperCaseTr).pipe(process.stdout);</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> node </tag>
            
            <tag> stream </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Purescript Types]]></title>
      <url>http://hczhang.com/2019/12/12/purescript-types/</url>
      <content type="html"><![CDATA[<p>Some though about types in purescript</p>
<ul>
<li><strong>data Foo = Foo Int</strong>: Foo and Int totally different.</li>
<li><strong>newtype Foo = Foo Int</strong>: Foo and Int different at compile time but same at runtime.</li>
<li><strong>type Foo = Int</strong>: Foo and Int same at compile time and runtime.</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> fp </tag>
            
            <tag> purescript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Functor]]></title>
      <url>http://hczhang.com/2019/11/26/Functor/</url>
      <content type="html"><![CDATA[<h1 id="Functor"><a href="#Functor" class="headerlink" title="Functor"></a>Functor</h1><ul>
<li>Container with somewhere to store values(s)</li>
<li>Some way of applying a function to values(s)</li>
<li>Must return values(s) in same context</li>
</ul>
<p>or a shorter explain:</p>
<blockquote>
<p>a functor is simply something that can be mapped over</p>
</blockquote>
<h1 id="Monid"><a href="#Monid" class="headerlink" title="Monid"></a>Monid</h1><p>a monoid is a semigroup with an identity element.</p>
<h1 id="Semigroup"><a href="#Semigroup" class="headerlink" title="Semigroup"></a>Semigroup</h1><p>A semigroup is an algebraic structure with a binary operation that satisfies the associativity law.</p>
<p>In PureScript, the binary operation for a semigroup that satisfies the associative property is called append, whose infix operator is &lt;&gt;</p>
<h1 id="monoid"><a href="#monoid" class="headerlink" title="monoid"></a>monoid</h1><p>Identity: whenever we append one or more elements to it, we get back those elements</p>
<p>In PureScript, mempty (monoid empty) to reference the identity element of a monoid.</p>
]]></content>
      
        
        <tags>
            
            <tag> fp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Purescript Note]]></title>
      <url>http://hczhang.com/2019/11/02/purescript-note/</url>
      <content type="html"><![CDATA[<p>Notebook for <em>PureScript by Example</em><br><a href="https://leanpub.com/purescript/read#leanpub-auto-functions-and-records" target="_blank" rel="noopener">https://leanpub.com/purescript/read#leanpub-auto-functions-and-records</a></p>
<a id="more"></a>
<h1 id="Chapter-2-Getting-Started"><a href="#Chapter-2-Getting-Started" class="headerlink" title="Chapter 2 Getting Started"></a>Chapter 2 Getting Started</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span> Main <span class="keyword">where</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> Control.Monad.Eff.Console</div><div class="line"></div><div class="line"><span class="title">main</span> = log <span class="string">"Hello, World!"</span></div></pre></td></tr></table></figure>
<h1 id="Chapter-3-Functions-and-Records"><a href="#Chapter-3-Functions-and-Records" class="headerlink" title="Chapter 3 Functions and Records"></a>Chapter 3 Functions and Records</h1><h2 id="Simple-Types-3-3"><a href="#Simple-Types-3-3" class="headerlink" title="Simple Types (3.3)"></a>Simple Types (3.3)</h2><p>Built-in types</p>
<ul>
<li>Number</li>
<li>String</li>
<li>Boolean</li>
<li>integers</li>
<li>characters</li>
<li>arrays</li>
<li>records</li>
<li>functions</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; :<span class="class"><span class="keyword">type</span> [1, 2, 3]</span></div><div class="line"><span class="type">Array</span> <span class="type">Int</span></div></pre></td></tr></table></figure>
<p>Fuction</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="title">add</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Int</span></div><div class="line"><span class="title">add</span> x y = x + y</div><div class="line"></div><div class="line">&gt; add <span class="number">10</span> <span class="number">20</span></div><div class="line"><span class="number">30</span></div></pre></td></tr></table></figure>
<h2 id="Quantified-Types-3-4"><a href="#Quantified-Types-3-4" class="headerlink" title="Quantified Types (3.4)"></a>Quantified Types (3.4)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; :<span class="class"><span class="keyword">type</span> flip</span></div><div class="line"><span class="title">forall</span> a b c. (a -&gt; b -&gt; c) -&gt; b -&gt; a -&gt; c</div></pre></td></tr></table></figure>
<p>forall means universally quantified type</p>
<h2 id="Notes-On-Indentation-3-5"><a href="#Notes-On-Indentation-3-5" class="headerlink" title="Notes On Indentation (3.5)"></a>Notes On Indentation (3.5)</h2><p>PureScript code is indentation-sensitive</p>
<h2 id="Defining-Our-Types-3-6"><a href="#Defining-Our-Types-3-6" class="headerlink" title="Defining Our Types (3.6)"></a>Defining Our Types (3.6)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- a record type</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">Entry</span> =</span></div><div class="line">  &#123; firstName :: <span class="type">String</span></div><div class="line">  , lastName  :: <span class="type">String</span></div><div class="line">  , address   :: <span class="type">Address</span></div><div class="line">  &#125;</div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">Address</span> =</span></div><div class="line">  &#123; street :: <span class="type">String</span></div><div class="line">  , city   :: <span class="type">String</span></div><div class="line">  , state  :: <span class="type">String</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="comment">-- type synonym</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">AddressBook</span> = <span class="type">List</span> <span class="type">Entry</span></span></div><div class="line"></div><div class="line">&gt; address = &#123; street: <span class="string">"123 Fake St."</span>, city: <span class="string">"Faketown"</span>, state: <span class="string">"CA"</span> &#125;</div></pre></td></tr></table></figure>
<h2 id="Type-Constructors-and-Kinds-3-7"><a href="#Type-Constructors-and-Kinds-3-7" class="headerlink" title="Type Constructors and Kinds (3.7)"></a>Type Constructors and Kinds (3.7)</h2><p><strong>List</strong> is an example of a type constructor.</p>
<p>Values do not have the type List directly, but rather <strong>List a</strong> for some type <strong>a</strong>. That is, <strong>List</strong> takes a type argument a and constructs a new type List a.</p>
<p>values are distinguished by their <strong>types</strong>, types are distinguished by their <strong>kinds</strong></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; :kind <span class="type">Number</span></div><div class="line"><span class="type">Type</span></div><div class="line"></div><div class="line">&gt; <span class="keyword">import</span> Data.List</div><div class="line">&gt; :kind <span class="type">List</span></div><div class="line"><span class="type">Type</span> -&gt; <span class="type">Type</span></div><div class="line"></div><div class="line">&gt; :kind <span class="type">List</span> <span class="type">String</span></div><div class="line"><span class="type">Type</span></div></pre></td></tr></table></figure>
<h2 id="Curried-Functions-3-11"><a href="#Curried-Functions-3-11" class="headerlink" title="Curried Functions (3.11)"></a>Curried Functions (3.11)</h2><p>Functions in PureScript take exactly one argument.</p>
<h2 id="Querying-the-Address-Book-3-12"><a href="#Querying-the-Address-Book-3-12" class="headerlink" title="Querying the Address Book (3.12)"></a>Querying the Address Book (3.12)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="title">findEntry</span> firstName lastName book = head $ filter filterEntry book</div><div class="line">  <span class="keyword">where</span></div><div class="line">    filterEntry :: <span class="type">Entry</span> -&gt; <span class="type">Boolean</span></div><div class="line">    filterEntry entry = entry.firstName == firstName &amp;&amp; entry.lastName == lastName</div></pre></td></tr></table></figure>
<p>Note that, just like for top-level declarations, it was not necessary to specify a type signature for filterEntry. However, doing so is recommended as a form of documentation.</p>
<h2 id="Infix-Function-Application-3-13"><a href="#Infix-Function-Application-3-13" class="headerlink" title="Infix Function Application (3.13)"></a>Infix Function Application (3.13)</h2><blockquote>
<p>head $ filter filterEntry book</p>
</blockquote>
<p>is equals</p>
<blockquote>
<p>head (filter filterEntry book)</p>
</blockquote>
<p>($) is just an alias for a regular function called apply</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="title">apply</span> :: <span class="keyword">forall</span> a b. (a -&gt; b) -&gt; a -&gt; b</div><div class="line"><span class="title">apply</span> f x = f x</div><div class="line"></div><div class="line"><span class="keyword">infixr</span> <span class="number">0</span> apply as $</div></pre></td></tr></table></figure>
<h2 id="Function-Composition-3-14"><a href="#Function-Composition-3-14" class="headerlink" title="Function Composition (3.14)"></a>Function Composition (3.14)</h2><ul>
<li><strong>&lt;&lt;&lt;</strong> backwards composition</li>
<li><strong>&gt;&gt;&gt;</strong> forwards composition</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(head &lt;&lt;&lt; filter filterEntry) book</div><div class="line"><span class="title">filter</span> filterEntry &gt;&gt;&gt; head</div></pre></td></tr></table></figure>
<h1 id="Chapter-4-Recursion-Maps-And-Folds"><a href="#Chapter-4-Recursion-Maps-And-Folds" class="headerlink" title="Chapter 4 Recursion, Maps And Folds"></a>Chapter 4 Recursion, Maps And Folds</h1><ul>
<li>purescript-maybe, which defines the Maybe type constructor</li>
<li>purescript-arrays, which defines functions for working with arrays</li>
<li>purescript-strings, which defines functions for working with Javascript strings</li>
<li>purescript-foldable-traversable, which defines functions for folding arrays and other data structures</li>
<li>purescript-console, which defines functions for printing to the console</li>
</ul>
<h2 id="Recursion-on-Array-4-4"><a href="#Recursion-on-Array-4-4" class="headerlink" title="Recursion on Array (4.4)"></a>Recursion on Array (4.4)</h2><ul>
<li>The null function returns true on an empty array</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Prelude</div><div class="line"></div><div class="line"><span class="keyword">import</span> Data.Array (<span class="title">null</span>)</div><div class="line"><span class="keyword">import</span> Data.Array.Partial (<span class="title">tail</span>)</div><div class="line"><span class="keyword">import</span> Partial.Unsafe (<span class="title">unsafePartial</span>)</div><div class="line"></div><div class="line"><span class="title">length</span> :: <span class="keyword">forall</span> a. <span class="type">Array</span> a -&gt; <span class="type">Int</span></div><div class="line"><span class="title">length</span> arr =</div><div class="line">  <span class="keyword">if</span> null arr</div><div class="line">    <span class="keyword">then</span> <span class="number">0</span></div><div class="line">    <span class="keyword">else</span> <span class="number">1</span> + length (unsafePartial tail arr)</div></pre></td></tr></table></figure>
<h2 id="Infix-Operators-4-6"><a href="#Infix-Operators-4-6" class="headerlink" title="Infix Operators (4.6)"></a>Infix Operators (4.6)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; (\n -&gt; n + <span class="number">1</span>) `map` [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line">&gt; (\n -&gt; n + <span class="number">1</span>) &lt;$&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line">&gt; (&lt;$&gt;) (\n -&gt; n + <span class="number">1</span>) [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div></pre></td></tr></table></figure>
<h2 id="Flattening-Arrays-4-8"><a href="#Flattening-Arrays-4-8" class="headerlink" title="Flattening Arrays (4.8)"></a>Flattening Arrays (4.8)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">import</span> Data.Array</div><div class="line"></div><div class="line">&gt; :<span class="class"><span class="keyword">type</span> concat</span></div><div class="line"><span class="title">forall</span> a. <span class="type">Array</span> (<span class="type">Array</span> a) -&gt; <span class="type">Array</span> a</div><div class="line"></div><div class="line">&gt; concat [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>]]</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line"></div><div class="line">&gt; :<span class="class"><span class="keyword">type</span> concatMap</span></div><div class="line"><span class="title">forall</span> a b. (a -&gt; <span class="type">Array</span> b) -&gt; <span class="type">Array</span> a -&gt; <span class="type">Array</span> b</div><div class="line"></div><div class="line">&gt; concatMap (\n -&gt; [n, n * n]) (<span class="number">1</span> .. <span class="number">5</span>)</div><div class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">16</span>,<span class="number">5</span>,<span class="number">25</span>]</div></pre></td></tr></table></figure>
<h2 id="Do-Notation-4-10"><a href="#Do-Notation-4-10" class="headerlink" title="Do Notation (4.10)"></a>Do Notation (4.10)</h2><p><strong>map</strong> and <strong>bind</strong> allow us to write so-called <strong>monad comprehensions</strong></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="title">factors</span> :: <span class="type">Int</span> -&gt; <span class="type">Array</span> (<span class="type">Array</span> <span class="type">Int</span>)</div><div class="line"><span class="title">factors</span> n = filter (\xs -&gt; product xs == n) $ <span class="keyword">do</span></div><div class="line">  i &lt;- <span class="number">1</span> .. n</div><div class="line">  j &lt;- i .. n</div><div class="line">  pure [i, j]</div></pre></td></tr></table></figure>
<h2 id="Guards-4-11"><a href="#Guards-4-11" class="headerlink" title="Guards (4.11)"></a>Guards (4.11)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Control.MonadZero (<span class="title">guard</span>)</div><div class="line"></div><div class="line"><span class="title">factors</span> :: <span class="type">Int</span> -&gt; <span class="type">Array</span> (<span class="type">Array</span> <span class="type">Int</span>)</div><div class="line"><span class="title">factors</span> n = <span class="keyword">do</span></div><div class="line">  i &lt;- <span class="number">1</span> .. n</div><div class="line">  j &lt;- i .. n</div><div class="line">  guard $ i * j == n</div><div class="line">  pure [i, j]</div><div class="line"></div><div class="line">&gt; <span class="keyword">import</span> Control.MonadZero</div><div class="line"></div><div class="line">&gt; :<span class="class"><span class="keyword">type</span> guard</span></div><div class="line"><span class="title">forall</span> m. <span class="type">MonadZero</span> m =&gt; <span class="type">Boolean</span> -&gt; m <span class="type">Unit</span></div><div class="line"></div><div class="line">&gt; length $ guard true</div><div class="line"><span class="number">1</span></div><div class="line"></div><div class="line">&gt; length $ guard false</div><div class="line"><span class="number">0</span></div></pre></td></tr></table></figure>
<p>That is, if guard is passed an expression which evaluates to true, then it returns an array with a single element. If the expression evaluates to false, then its result is empty.</p>
<h2 id="Folds-4-12"><a href="#Folds-4-12" class="headerlink" title="Folds (4.12)"></a>Folds (4.12)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; :<span class="class"><span class="keyword">type</span> foldl</span></div><div class="line"><span class="title">forall</span> a b. (b -&gt; a -&gt; b) -&gt; b -&gt; <span class="type">Array</span> a -&gt; b</div><div class="line"></div><div class="line">&gt; :<span class="class"><span class="keyword">type</span> foldr</span></div><div class="line"><span class="title">forall</span> a b. (a -&gt; b -&gt; b) -&gt; b -&gt; <span class="type">Array</span> a -&gt; b</div><div class="line"></div><div class="line">&gt; foldl (+) <span class="number">0</span> (<span class="number">1</span> .. <span class="number">5</span>)</div><div class="line"><span class="number">15</span></div></pre></td></tr></table></figure>
<h2 id="Tail-Recursion-4-13"><a href="#Tail-Recursion-4-13" class="headerlink" title="Tail Recursion (4.13)"></a>Tail Recursion (4.13)</h2><p><strong>purescript-free</strong> and <strong>purescript-tailrec</strong> packages.</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">fact</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Int</span></div><div class="line"><span class="title">fact</span> <span class="number">0</span> acc = acc</div><div class="line"><span class="title">fact</span> n acc = fact (n - <span class="number">1</span>) (acc * n)</div></pre></td></tr></table></figure>
<p>Notice that the recursive call to fact is the last thing that happens in this function - it is in tail position.</p>
<p>Prefer Folds to Explicit Recursion</p>
<h1 id="Chapter-5-Pattern-Matching"><a href="#Chapter-5-Pattern-Matching" class="headerlink" title="Chapter 5 Pattern Matching"></a>Chapter 5 Pattern Matching</h1><ul>
<li><strong>purescript-globals</strong>, which provides access to some common JavaScript values and functions.</li>
<li><strong>purescript-math</strong>, which provides access to the JavaScript Math module.</li>
</ul>
<h2 id="Simple-Pattern-Matching-5-3"><a href="#Simple-Pattern-Matching-5-3" class="headerlink" title="Simple Pattern Matching (5.3)"></a>Simple Pattern Matching (5.3)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="title">gcd</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Int</span></div><div class="line"><span class="title">gcd</span> n <span class="number">0</span> = n</div><div class="line"><span class="title">gcd</span> <span class="number">0</span> m = m</div><div class="line"><span class="title">gcd</span> n m = <span class="keyword">if</span> n &gt; m</div><div class="line">            <span class="keyword">then</span> gcd (n - m) m</div><div class="line">            <span class="keyword">else</span> gcd n (m - n)</div></pre></td></tr></table></figure>
<ul>
<li>Number, String, Char and Boolean literals</li>
<li>Wildcard patterns, indicated with an underscore (_), which match any argument, and which do not bind any names.</li>
</ul>
<h2 id="Guards-5-5"><a href="#Guards-5-5" class="headerlink" title="Guards (5.5)"></a>Guards (5.5)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="title">gcd</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Int</span></div><div class="line"><span class="title">gcd</span> n <span class="number">0</span> = n</div><div class="line"><span class="title">gcd</span> <span class="number">0</span> n = n</div><div class="line"><span class="title">gcd</span> n m | n &gt; m     = gcd (n - m) m</div><div class="line">        | otherwise = gcd n (m - n)</div></pre></td></tr></table></figure>
<h2 id="Array-Patterns-5-6"><a href="#Array-Patterns-5-6" class="headerlink" title="Array Patterns (5.6)"></a>Array Patterns (5.6)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="title">isEmpty</span> :: <span class="keyword">forall</span> a. <span class="type">Array</span> a -&gt; <span class="type">Boolean</span></div><div class="line"><span class="title">isEmpty</span> [] = true</div><div class="line"><span class="title">isEmpty</span> _ = false</div><div class="line"></div><div class="line"><span class="title">takeFive</span> :: <span class="type">Array</span> <span class="type">Int</span> -&gt; <span class="type">Int</span></div><div class="line"><span class="title">takeFive</span> [<span class="number">0</span>, <span class="number">1</span>, a, b, _] = a * b</div><div class="line"><span class="title">takeFive</span> _ = <span class="number">0</span></div></pre></td></tr></table></figure>
<h2 id="Record-Patterns-and-Row-Polymorphism-5-7"><a href="#Record-Patterns-and-Row-Polymorphism-5-7" class="headerlink" title="Record Patterns and Row Polymorphism (5.7)"></a>Record Patterns and Row Polymorphism (5.7)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="title">showPerson</span> :: &#123; first :: <span class="type">String</span>, last :: <span class="type">String</span> &#125; -&gt; <span class="type">String</span></div><div class="line"><span class="title">showPerson</span> &#123; first: x, last: y &#125; = y &lt;&gt; <span class="string">", "</span> &lt;&gt; x</div><div class="line"></div><div class="line">&gt; :<span class="class"><span class="keyword">type</span> showPerson</span></div><div class="line"><span class="title">forall</span> r. &#123; first :: <span class="type">String</span>, last :: <span class="type">String</span> | r &#125; -&gt; <span class="type">String</span></div><div class="line"></div><div class="line">&gt; showPerson &#123; first: <span class="string">"Phil"</span>, last: <span class="string">"Freeman"</span> &#125;</div><div class="line"><span class="string">"Freeman, Phil"</span></div><div class="line"></div><div class="line">&gt; showPerson &#123; first: <span class="string">"Phil"</span>, last: <span class="string">"Freeman"</span>, location: <span class="string">"Los Angeles"</span> &#125;</div><div class="line"><span class="string">"Freeman, Phil"</span></div></pre></td></tr></table></figure>
<p>Notice: what is the type variable r here?</p>
<blockquote>
<p>We can read the new type signature of showPerson as “takes any record with first and last fields which are Strings and any other fields, and returns a String”.</p>
</blockquote>
<p>This function is polymorphic in the row r of record fields, hence the name row polymorphism.</p>
<h2 id="Nested-Patterns-5-8"><a href="#Nested-Patterns-5-8" class="headerlink" title="Nested Patterns (5.8)"></a>Nested Patterns (5.8)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">Address</span> = &#123; <span class="title">street</span> :: <span class="type">String</span>, <span class="title">city</span> :: <span class="type">String</span> &#125;</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">Person</span> = &#123; <span class="title">name</span> :: <span class="type">String</span>, <span class="title">address</span> :: <span class="type">Address</span> &#125;</span></div><div class="line"></div><div class="line"><span class="title">livesInLA</span> :: <span class="type">Person</span> -&gt; <span class="type">Boolean</span></div><div class="line"><span class="title">livesInLA</span> &#123; address: &#123; city: <span class="string">"Los Angeles"</span> &#125; &#125; = true</div><div class="line"><span class="title">livesInLA</span> _ = false</div></pre></td></tr></table></figure>
<h2 id="Named-Patterns-5-9"><a href="#Named-Patterns-5-9" class="headerlink" title="Named Patterns (5.9)"></a>Named Patterns (5.9)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="title">sortPair</span> :: <span class="type">Array</span> <span class="type">Int</span> -&gt; <span class="type">Array</span> <span class="type">Int</span></div><div class="line"><span class="title">sortPair</span> arr@[x, y]</div><div class="line">  | x &lt;= y = arr</div><div class="line">  | otherwise = [y, x]</div><div class="line"><span class="title">sortPair</span> arr = arr</div></pre></td></tr></table></figure>
<h2 id="Case-Expressions-5-10"><a href="#Case-Expressions-5-10" class="headerlink" title="Case Expressions (5.10)"></a>Case Expressions (5.10)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Data.Array.Partial (<span class="title">tail</span>)</div><div class="line"><span class="keyword">import</span> Partial.Unsafe (<span class="title">unsafePartial</span>)</div><div class="line"></div><div class="line"><span class="title">lzs</span> :: <span class="type">Array</span> <span class="type">Int</span> -&gt; <span class="type">Array</span> <span class="type">Int</span></div><div class="line"><span class="title">lzs</span> [] = []</div><div class="line"><span class="title">lzs</span> xs = <span class="keyword">case</span> sum xs <span class="keyword">of</span></div><div class="line">           <span class="number">0</span> -&gt; xs</div><div class="line">           _ -&gt; lzs (unsafePartial tail xs)</div></pre></td></tr></table></figure>
<h2 id="Algebraic-Data-Types-5-12"><a href="#Algebraic-Data-Types-5-12" class="headerlink" title="Algebraic Data Types (5.12)"></a>Algebraic Data Types (5.12)</h2><p>Algebraic Data Types (or ADTs)</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- OR</span></div><div class="line"><span class="class"><span class="keyword">data</span> <span class="type">Shape</span></span></div><div class="line">  = <span class="type">Circle</span> <span class="type">Point</span> <span class="type">Number</span></div><div class="line">  | <span class="type">Rectangle</span> <span class="type">Point</span> <span class="type">Number</span> <span class="type">Number</span></div><div class="line">  | <span class="type">Line</span> <span class="type">Point</span> <span class="type">Point</span></div><div class="line">  | <span class="type">Text</span> <span class="type">Point</span> <span class="type">String</span></div><div class="line"></div><div class="line"><span class="comment">-- AND</span></div><div class="line"><span class="class"><span class="keyword">data</span> <span class="type">Point</span> = <span class="type">Point</span></span></div><div class="line">  &#123; x :: <span class="type">Number</span></div><div class="line">  , y :: <span class="type">Number</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">data</span> <span class="type">Maybe</span> a = <span class="type">Nothing</span> | <span class="type">Just</span> a</span></div><div class="line"></div><div class="line"><span class="comment">-- recursive define</span></div><div class="line"><span class="class"><span class="keyword">data</span> <span class="type">List</span> a = <span class="type">Nil</span> | <span class="type">Cons</span> a (<span class="type">List</span> <span class="title">a</span>)</span></div></pre></td></tr></table></figure>
<h2 id="Using-ADTs-5-13"><a href="#Using-ADTs-5-13" class="headerlink" title="Using ADTs (5.13)"></a>Using ADTs (5.13)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="title">showPoint</span> :: <span class="type">Point</span> -&gt; <span class="type">String</span></div><div class="line"><span class="title">showPoint</span> (<span class="type">Point</span> &#123; x: x, y: y &#125;) = <span class="string">"("</span> &lt;&gt; show x &lt;&gt; <span class="string">", "</span> &lt;&gt; show y &lt;&gt; <span class="string">")"</span></div><div class="line"></div><div class="line"><span class="comment">-- or we could define as below. Record Puns</span></div><div class="line"><span class="comment">-- showPoint (Point &#123; x, y &#125;) = ...</span></div><div class="line"></div><div class="line"><span class="title">showShape</span> :: <span class="type">Shape</span> -&gt; <span class="type">String</span></div><div class="line"><span class="title">showShape</span> (<span class="type">Circle</span> c r)      = ...</div><div class="line"><span class="title">showShape</span> (<span class="type">Rectangle</span> c w h) = ...</div><div class="line"><span class="title">showShape</span> (<span class="type">Line</span> start end)  = ...</div><div class="line"><span class="title">showShape</span> (<span class="type">Text</span> p text) = ...</div></pre></td></tr></table></figure>
<h2 id="Newtypes-5-15"><a href="#Newtypes-5-15" class="headerlink" title="Newtypes (5.15)"></a>Newtypes (5.15)</h2><p>There is an important special case of <strong>algebraic data types (ADT)</strong>, called newtypes</p>
<p>Newtypes must define exactly one constructor, and that constructor must take exactly one argument.</p>
<p>a newtype gives a new name to an existing type. In fact, the values of a newtype have the same runtime representation as the underlying type. This gives an extra layer of type safety.</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Pixels</span> = <span class="type">Pixels</span> <span class="type">Number</span></span></div></pre></td></tr></table></figure>
<blockquote>
<p>Newtypes will become important, since they allow us to attach different behavior to a type without changing its representation at runtime.</p>
</blockquote>
<h1 id="Chapter-6-Type-Classes"><a href="#Chapter-6-Type-Classes" class="headerlink" title="Chapter 6 Type Classes"></a>Chapter 6 Type Classes</h1><h2 id="Show-Me-6-3"><a href="#Show-Me-6-3" class="headerlink" title="Show Me (6.3)"></a>Show Me (6.3)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">Show</span> a <span class="keyword">where</span></span></div><div class="line">  show :: a -&gt; <span class="type">String</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">instance</span> showBoolean :: <span class="type">Show</span> <span class="type">Boolean</span> <span class="keyword">where</span></span></div><div class="line">  show true = <span class="string">"true"</span></div><div class="line">  show false = <span class="string">"false"</span></div></pre></td></tr></table></figure>
<p>We can annotate the expression with a type, using the :: operator, so that PSCi can choose the correct type class instance:</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; show (<span class="type">Left</span> <span class="number">10</span> :: <span class="type">Either</span> <span class="type">Int</span> <span class="type">String</span>)</div><div class="line"><span class="string">"(Left 10)"</span></div></pre></td></tr></table></figure>
<h2 id="Common-Type-Classes-6-4"><a href="#Common-Type-Classes-6-4" class="headerlink" title="Common Type Classes (6.4)"></a>Common Type Classes (6.4)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">Eq</span> a <span class="keyword">where</span></span></div><div class="line">  eq :: a -&gt; a -&gt; <span class="type">Boolean</span></div><div class="line"></div><div class="line"><span class="comment">-- Ord</span></div><div class="line"><span class="class"><span class="keyword">data</span> <span class="type">Ordering</span> = <span class="type">LT</span> | <span class="type">EQ</span> | <span class="type">GT</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">Eq</span> a &lt;= <span class="type">Ord</span> a <span class="keyword">where</span></span></div><div class="line">  compare :: a -&gt; a -&gt; <span class="type">Ordering</span></div><div class="line"></div><div class="line"><span class="comment">-- The Field type class identifies those types which support numeric operators such as addition, subtraction, multiplication and division. It is provided to abstract over those operators</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">EuclideanRing</span> a &lt;= <span class="type">Field</span> a</span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class"><span class="comment">-- purescript-monoid</span></span></div><div class="line"><span class="class"><span class="comment">-- Semigroups and Monoids</span></span></div><div class="line"><span class="class"><span class="comment">-- &lt;&gt; is as an alias for append</span></span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">Semigroup</span> a <span class="keyword">where</span></span></div><div class="line">  append :: a -&gt; a -&gt; a</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">Semigroup</span> m &lt;= <span class="type">Monoid</span> m <span class="keyword">where</span></span></div><div class="line">  mempty :: m</div><div class="line"></div><div class="line"><span class="comment">-- purescript-foldable-traversable</span></div><div class="line"><span class="comment">-- Foldable</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">Foldable</span> f <span class="keyword">where</span></span></div><div class="line">  foldr :: <span class="keyword">forall</span> a b. (a -&gt; b -&gt; b) -&gt; b -&gt; f a -&gt; b</div><div class="line">  foldl :: <span class="keyword">forall</span> a b. (b -&gt; a -&gt; b) -&gt; b -&gt; f a -&gt; b</div><div class="line">  foldMap :: <span class="keyword">forall</span> a m. <span class="type">Monoid</span> m =&gt; (a -&gt; m) -&gt; f a -&gt; m</div><div class="line"></div><div class="line"><span class="comment">-- Functor</span></div><div class="line"><span class="comment">-- alias &lt;$&gt;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f <span class="keyword">where</span></span></div><div class="line">  map :: <span class="keyword">forall</span> a b. (a -&gt; b) -&gt; f a -&gt; f b</div></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">import</span> Data.Monoid</div><div class="line">&gt; <span class="keyword">import</span> Data.Foldable</div><div class="line"></div><div class="line">&gt; foldl append mempty [<span class="string">"Hello"</span>, <span class="string">" "</span>, <span class="string">"World"</span>]  </div><div class="line"><span class="string">"Hello World"</span></div></pre></td></tr></table></figure>
<p>Functor Law</p>
<ul>
<li><strong>identity law:</strong> map id xs = xs</li>
<li><strong>composition law:</strong> map g (map f xs) = map (g &lt;&lt;&lt; f) xs</li>
</ul>
<h2 id="Type-Annotations-6-5"><a href="#Type-Annotations-6-5" class="headerlink" title="Type Annotations (6.5)"></a>Type Annotations (6.5)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="title">threeAreEqual</span> :: <span class="keyword">forall</span> a. <span class="type">Eq</span> a =&gt; a -&gt; a -&gt; a -&gt; <span class="type">Boolean</span></div><div class="line"><span class="title">threeAreEqual</span> a1 a2 a3 = a1 == a2 &amp;&amp; a2 == a3</div><div class="line"></div><div class="line"><span class="title">showCompare</span> :: <span class="keyword">forall</span> a. <span class="type">Ord</span> a =&gt; <span class="type">Show</span> a =&gt; a -&gt; a -&gt; <span class="type">String</span></div><div class="line"><span class="title">showCompare</span> a1 a2 | a1 &lt; a2 =</div><div class="line">  show a1 &lt;&gt; <span class="string">" is less than "</span> &lt;&gt; show a2</div><div class="line"><span class="title">showCompare</span> a1 a2 | a1 &gt; a2 =</div><div class="line">  show a1 &lt;&gt; <span class="string">" is greater than "</span> &lt;&gt; show a2</div><div class="line"><span class="title">showCompare</span> a1 a2 =</div><div class="line">  show a1 &lt;&gt; <span class="string">" is equal to "</span> &lt;&gt; show a2</div></pre></td></tr></table></figure>
<h2 id="Instance-Dependencies-6-7"><a href="#Instance-Dependencies-6-7" class="headerlink" title="Instance Dependencies (6.7)"></a>Instance Dependencies (6.7)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">instance</span> showEither :: (<span class="type">Show</span> <span class="title">a</span>, <span class="type">Show</span> <span class="title">b</span>) =&gt; <span class="type">Show</span> (<span class="type">Either</span> <span class="title">a</span> <span class="title">b</span>) <span class="keyword">where</span></span></div><div class="line">  ...</div></pre></td></tr></table></figure>
<h2 id="Multi-Parameter-Type-Classes-6-8"><a href="#Multi-Parameter-Type-Classes-6-8" class="headerlink" title="Multi Parameter Type Classes (6.8)"></a>Multi Parameter Type Classes (6.8)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span> Stream <span class="keyword">where</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> Data.Array <span class="keyword">as</span> Array</div><div class="line"><span class="keyword">import</span> Data.Maybe (<span class="type">Maybe</span>)</div><div class="line"><span class="keyword">import</span> Data.String <span class="keyword">as</span> String</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">Stream</span> stream element <span class="keyword">where</span></span></div><div class="line">  uncons :: stream -&gt; <span class="type">Maybe</span> &#123; head :: element, tail :: stream &#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">instance</span> streamArray :: <span class="type">Stream</span> (<span class="type">Array</span> <span class="title">a</span>) a <span class="keyword">where</span></span></div><div class="line">  uncons = <span class="type">Array</span>.uncons</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">instance</span> streamString :: <span class="type">Stream</span> <span class="type">String</span> <span class="type">Char</span> <span class="keyword">where</span></span></div><div class="line">  uncons = <span class="type">String</span>.uncons</div></pre></td></tr></table></figure>
<h2 id="Functional-Dependencies-6-9"><a href="#Functional-Dependencies-6-9" class="headerlink" title="Functional Dependencies (6.9)"></a>Functional Dependencies (6.9)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">Stream</span> stream element | stream -&gt; element <span class="keyword">where</span></span></div><div class="line">  uncons :: stream -&gt; <span class="type">Maybe</span> &#123; head :: element, tail :: stream &#125;</div><div class="line"></div><div class="line"><span class="title">genericTail</span> xs = map _.tail (uncons xs)</div><div class="line"></div><div class="line">&gt; :<span class="class"><span class="keyword">type</span> genericTail</span></div><div class="line"><span class="title">forall</span> stream element. <span class="type">Stream</span> stream element =&gt; stream -&gt; <span class="type">Maybe</span> stream</div><div class="line"></div><div class="line">&gt; genericTail <span class="string">"testing"</span></div><div class="line">(<span class="type">Just</span> <span class="string">"esting"</span>)</div></pre></td></tr></table></figure>
<h2 id="Nullary-Type-Classes-6-10"><a href="#Nullary-Type-Classes-6-10" class="headerlink" title="Nullary Type Classes (6.10)"></a>Nullary Type Classes (6.10)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">head</span> :: <span class="keyword">forall</span> a. <span class="type">Partial</span> =&gt; <span class="type">Array</span> a -&gt; a</div><div class="line"></div><div class="line"><span class="title">tail</span> :: <span class="keyword">forall</span> a. <span class="type">Partial</span> =&gt; <span class="type">Array</span> a -&gt; <span class="type">Array</span> a</div></pre></td></tr></table></figure>
<p>Note that there is no instance defined for the Partial type class! Doing so would defeat its purpose: attempting to use the head function directly will result in a type error:</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">secondElement</span> :: <span class="keyword">forall</span> a. <span class="type">Partial</span> =&gt; <span class="type">Array</span> a -&gt; a</div><div class="line"><span class="title">secondElement</span> xs = head (tail xs)</div></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">unsafePartial</span> :: <span class="keyword">forall</span> a. (<span class="type">Partial</span> =&gt; a) -&gt; a</div></pre></td></tr></table></figure>
<p>Note that the Partial constraint appears inside the parentheses on the left of the function arrow, but not in the outer forall. That is, unsafePartial is a function from partial values to regular values.</p>
<h1 id="Chapter-7-Applicative-Validation"><a href="#Chapter-7-Applicative-Validation" class="headerlink" title="Chapter 7 Applicative Validation"></a>Chapter 7 Applicative Validation</h1><h2 id="lift-Arbitrary-Functions-7-4"><a href="#lift-Arbitrary-Functions-7-4" class="headerlink" title="lift Arbitrary Functions (7.4)"></a>lift Arbitrary Functions (7.4)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- &lt;$&gt;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f <span class="keyword">where</span></span></div><div class="line">  map :: <span class="keyword">forall</span> a b. (a -&gt; b) -&gt; f a -&gt; f b</div><div class="line"></div><div class="line"><span class="comment">-- &lt;*&gt;</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f &lt;= <span class="type">Apply</span> f <span class="keyword">where</span></span></div><div class="line">  apply :: <span class="keyword">forall</span> a b. f (a -&gt; b) -&gt; f a -&gt; f b</div></pre></td></tr></table></figure>
<p>Maybe implement apply class</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">instance</span> functorMaybe :: <span class="type">Functor</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></div><div class="line">  map f (<span class="type">Just</span> a) = <span class="type">Just</span> (f a)</div><div class="line">  map f <span class="type">Nothing</span>  = <span class="type">Nothing</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">instance</span> applyMaybe :: <span class="type">Apply</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></div><div class="line">  apply (<span class="type">Just</span> f) (<span class="type">Just</span> x) = <span class="type">Just</span> (f x)</div><div class="line">  apply _        _        = <span class="type">Nothing</span></div></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">lift3</span> :: <span class="keyword">forall</span> a b c d f. <span class="type">Apply</span> f =&gt; </div><div class="line">    (a -&gt; b -&gt; c -&gt; d) -&gt; f a -&gt; f b -&gt; f c -&gt; f d</div><div class="line"><span class="title">lift3</span> f x y z = f &lt;$&gt; x &lt;*&gt; y &lt;*&gt; z</div></pre></td></tr></table></figure>
<h2 id="Applicative-type-class-7-5"><a href="#Applicative-type-class-7-5" class="headerlink" title="Applicative type class (7.5)"></a>Applicative type class (7.5)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f <span class="keyword">where</span></span></div><div class="line">  map :: <span class="keyword">forall</span> a b. (a -&gt; b) -&gt; f a -&gt; f b</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f &lt;= <span class="type">Apply</span> f <span class="keyword">where</span></span></div><div class="line">  apply :: <span class="keyword">forall</span> a b. f (a -&gt; b) -&gt; f a -&gt; f b</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">Apply</span> f &lt;= <span class="type">Applicative</span> f <span class="keyword">where</span></span></div><div class="line">    pure :: <span class="keyword">forall</span> a. a -&gt; f a</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">instance</span> applicativeMaybe :: <span class="type">Applicative</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></div><div class="line">  pure x = <span class="type">Just</span> x</div></pre></td></tr></table></figure>
<h2 id="More-Effects-7-7"><a href="#More-Effects-7-7" class="headerlink" title="More Effects (7.7)"></a>More Effects (7.7)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="title">withError</span> <span class="type">Nothing</span>  err = <span class="type">Left</span> err</div><div class="line"><span class="title">withError</span> (<span class="type">Just</span> a) _   = <span class="type">Right</span> a</div><div class="line"></div><div class="line"><span class="title">fullNameEither</span> first middle last =</div><div class="line">   fullName &lt;$&gt; (first  `withError` <span class="string">"First name was missing"</span>)</div><div class="line">            &lt;*&gt; (middle `withError` <span class="string">"Middle name was missing"</span>)</div><div class="line">            &lt;*&gt; (last   `withError` <span class="string">"Last name was missing"</span>)</div><div class="line"></div><div class="line">&gt; :<span class="class"><span class="keyword">type</span> fullNameEither</span></div><div class="line"><span class="type">Maybe</span> <span class="type">String</span> -&gt; <span class="type">Maybe</span> <span class="type">String</span> -&gt; <span class="type">Maybe</span> <span class="type">String</span> -&gt; <span class="type">Either</span> <span class="type">String</span> <span class="type">String</span></div></pre></td></tr></table></figure>
<h2 id="Applicative-Validation-7-9"><a href="#Applicative-Validation-7-9" class="headerlink" title="Applicative Validation (7.9)"></a>Applicative Validation (7.9)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="title">address</span> :: <span class="type">String</span> -&gt; <span class="type">String</span> -&gt; <span class="type">String</span> -&gt; <span class="type">Address</span></div><div class="line"></div><div class="line"><span class="title">phoneNumber</span> :: <span class="type">PhoneType</span> -&gt; <span class="type">String</span> -&gt; <span class="type">PhoneNumber</span></div><div class="line"></div><div class="line"><span class="title">person</span> :: <span class="type">String</span> -&gt; <span class="type">String</span> -&gt; <span class="type">Address</span> -&gt; <span class="type">Array</span> <span class="type">PhoneNumber</span> -&gt; <span class="type">Person</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">data</span> <span class="type">PhoneType</span> = <span class="type">HomePhone</span> | <span class="type">WorkPhone</span> | <span class="type">CellPhone</span> | <span class="type">OtherPhone</span></span></div><div class="line"></div><div class="line"><span class="title">examplePerson</span> :: <span class="type">Person</span></div><div class="line"><span class="title">examplePerson</span> =</div><div class="line">  person <span class="string">"John"</span> <span class="string">"Smith"</span></div><div class="line">        (address <span class="string">"123 Fake St."</span> <span class="string">"FakeTown"</span> <span class="string">"CA"</span>)</div><div class="line">        [ phoneNumber <span class="type">HomePhone</span> <span class="string">"555-555-5555"</span></div><div class="line">         , phoneNumber <span class="type">CellPhone</span> <span class="string">"555-555-0000"</span></div><div class="line">        ]</div></pre></td></tr></table></figure>
<blockquote>
<p>purescript-validation</p>
</blockquote>
<p>The <strong>Data.AddressBook.Validation</strong> module uses the <strong>V (Array String) </strong>applicative functor to validate the data structures</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="title">nonEmpty</span> :: <span class="type">String</span> -&gt; <span class="type">String</span> -&gt; <span class="type">V</span> <span class="type">Errors</span> <span class="type">Unit</span></div><div class="line"><span class="title">nonEmpty</span> field <span class="string">""</span> = invalid [<span class="string">"Field '"</span> &lt;&gt; field &lt;&gt; <span class="string">"' cannot be empty"</span>]</div><div class="line"><span class="title">nonEmpty</span> _     _  = pure unit</div><div class="line"></div><div class="line"><span class="title">lengthIs</span> :: <span class="type">String</span> -&gt; <span class="type">Number</span> -&gt; <span class="type">String</span> -&gt; <span class="type">V</span> <span class="type">Errors</span> <span class="type">Unit</span></div><div class="line"><span class="title">lengthIs</span> field len value | <span class="type">S</span>.length value /= len =</div><div class="line">  invalid [<span class="string">"Field '"</span> &lt;&gt; field &lt;&gt; <span class="string">"' must have length "</span> &lt;&gt; show len]</div><div class="line"><span class="title">lengthIs</span> _     _   _     =</div><div class="line">  pure unit</div><div class="line"></div><div class="line"><span class="title">matches</span> :: <span class="type">String</span> -&gt; <span class="type">R</span>.<span class="type">Regex</span> -&gt; <span class="type">String</span> -&gt; <span class="type">V</span> <span class="type">Errors</span> <span class="type">Unit</span></div><div class="line"><span class="title">matches</span> _     regex value | <span class="type">R</span>.test regex value =</div><div class="line">  pure unit</div><div class="line"><span class="title">matches</span> field _     _     =</div><div class="line">  invalid [<span class="string">"Field '"</span> &lt;&gt; field &lt;&gt; <span class="string">"' did not match the required format"</span>]</div><div class="line"></div><div class="line"><span class="title">validateAddress</span> :: <span class="type">Address</span> -&gt; <span class="type">V</span> <span class="type">Errors</span> <span class="type">Address</span></div><div class="line"><span class="title">validateAddress</span> (<span class="type">Address</span> o) =</div><div class="line">  address &lt;$&gt; (nonEmpty <span class="string">"Street"</span> o.street *&gt; pure o.street)</div><div class="line">          &lt;*&gt; (nonEmpty <span class="string">"City"</span>   o.city   *&gt; pure o.city)</div><div class="line">          &lt;*&gt; (lengthIs <span class="string">"State"</span> <span class="number">2</span> o.state *&gt; pure o.state)</div><div class="line"></div><div class="line"><span class="title">validatePhoneNumber</span> :: <span class="type">PhoneNumber</span> -&gt; <span class="type">V</span> <span class="type">Errors</span> <span class="type">PhoneNumber</span></div><div class="line"><span class="title">validatePhoneNumber</span> (<span class="type">PhoneNumber</span> o) =</div><div class="line">  phoneNumber &lt;$&gt; pure o.<span class="string">"type"</span></div><div class="line">              &lt;*&gt; (matches <span class="string">"Number"</span> phoneNumberRegex o.number *&gt; pure o.number)</div></pre></td></tr></table></figure>
<h2 id="Traversable-Functors-7-11"><a href="#Traversable-Functors-7-11" class="headerlink" title="Traversable Functors (7.11)"></a>Traversable Functors (7.11)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="title">arrayNonEmpty</span> :: <span class="keyword">forall</span> a. <span class="type">String</span> -&gt; <span class="type">Array</span> a -&gt; <span class="type">V</span> <span class="type">Errors</span> <span class="type">Unit</span></div><div class="line"><span class="title">arrayNonEmpty</span> field [] =</div><div class="line">  invalid [<span class="string">"Field '"</span> &lt;&gt; field &lt;&gt; <span class="string">"' must contain at least one value"</span>]</div><div class="line"><span class="title">arrayNonEmpty</span> _     _  =</div><div class="line">  pure unit</div><div class="line"></div><div class="line"><span class="title">validatePerson</span> :: <span class="type">Person</span> -&gt; <span class="type">V</span> <span class="type">Errors</span> <span class="type">Person</span></div><div class="line"><span class="title">validatePerson</span> (<span class="type">Person</span> o) =</div><div class="line">  person &lt;$&gt; (nonEmpty <span class="string">"First Name"</span> o.firstName *&gt; pure o.firstName)</div><div class="line">         &lt;*&gt; (nonEmpty <span class="string">"Last Name"</span>  o.lastName  *&gt; pure o.lastName)</div><div class="line">	       &lt;*&gt; validateAddress o.address</div><div class="line">         &lt;*&gt; (arrayNonEmpty <span class="string">"Phone Numbers"</span> o.phones *&gt; traverse validatePhoneNumber o.phones)</div></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> (<span class="type">Functor</span> <span class="title">t</span>, <span class="type">Foldable</span> <span class="title">t</span>) &lt;= <span class="type">Traversable</span> t <span class="keyword">where</span></span></div><div class="line">  traverse :: <span class="keyword">forall</span> a b f. <span class="type">Applicative</span> f =&gt; (a -&gt; f b) -&gt; t a -&gt; f (t b)</div><div class="line">  sequence :: <span class="keyword">forall</span> a f. <span class="type">Applicative</span> f =&gt; t (f a) -&gt; f (t a)</div></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">traverse</span> :: <span class="keyword">forall</span> a b f. <span class="type">Applicative</span> f =&gt; (a -&gt; f b) -&gt; <span class="type">Array</span> a -&gt; f (<span class="type">Array</span> b)</div><div class="line"><span class="title">traverse</span> :: <span class="keyword">forall</span> a b. (a -&gt; <span class="type">V</span> <span class="type">Errors</span> b) -&gt; <span class="type">Array</span> a -&gt; <span class="type">V</span> <span class="type">Errors</span> (<span class="type">Array</span> b)</div></pre></td></tr></table></figure>
<blockquote>
<p>Traversable functors capture the idea of traversing a data structure, collecting a set of effectful computations, and combining their effects. In fact, sequence and traverse are equally important to the definition of Traversable - each can be implemented in terms of each other</p>
</blockquote>
<p>List implements</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- traverse :: forall a b f. Applicative f =&gt; (a -&gt; f b) -&gt; List a -&gt; f (List b)</span></div><div class="line"><span class="title">traverse</span> _ <span class="type">Nil</span> = pure <span class="type">Nil</span></div><div class="line"><span class="title">traverse</span> f (<span class="type">Cons</span> x xs) = <span class="type">Cons</span> &lt;$&gt; f x &lt;*&gt; traverse f xs</div></pre></td></tr></table></figure>
<h2 id="Applicative-Functors-for-Parallelism-7-12"><a href="#Applicative-Functors-for-Parallelism-7-12" class="headerlink" title="Applicative Functors for Parallelism (7.12)"></a>Applicative Functors for Parallelism (7.12)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">f</span> &lt;$&gt; parallel computation1</div><div class="line">  &lt;*&gt; parallel computation2</div></pre></td></tr></table></figure>
<p>This computation would start computing values asynchronously using computation1 and computation2. When both results have been computed, they would be combined into a single result using the function f.</p>
<h1 id="Chapter-8-The-Eff-Monad"><a href="#Chapter-8-The-Eff-Monad" class="headerlink" title="Chapter 8 The Eff Monad"></a>Chapter 8 The Eff Monad</h1><h2 id="Monads-and-Do-Notation-8-3"><a href="#Monads-and-Do-Notation-8-3" class="headerlink" title="Monads and Do Notation (8.3)"></a>Monads and Do Notation (8.3)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Prelude</div><div class="line"></div><div class="line"><span class="keyword">import</span> Control.Plus (<span class="title">empty</span>)</div><div class="line"><span class="keyword">import</span> Data.Array ((..))</div><div class="line"></div><div class="line"><span class="title">countThrows</span> :: <span class="type">Int</span> -&gt; <span class="type">Array</span> (<span class="type">Array</span> <span class="type">Int</span>)</div><div class="line"><span class="title">countThrows</span> n = <span class="keyword">do</span></div><div class="line">  x &lt;- <span class="number">1</span> .. <span class="number">6</span></div><div class="line">  y &lt;- <span class="number">1</span> .. <span class="number">6</span></div><div class="line">  <span class="keyword">if</span> x + y == n</div><div class="line">    <span class="keyword">then</span> pure [x, y]</div><div class="line">    <span class="keyword">else</span> empty</div></pre></td></tr></table></figure>
<blockquote>
<p>In general, every line of a do notation block will contain a computation of type m a for some type a and our monad m<br>The monad m must be the same on every line<br>the types a can differ (i.e. individual computations can have different result types)</p>
</blockquote>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="title">userCity</span> :: <span class="type">XML</span> -&gt; <span class="type">Maybe</span> <span class="type">XML</span></div><div class="line"><span class="title">userCity</span> root = <span class="keyword">do</span></div><div class="line">  prof &lt;- child root <span class="string">"profile"</span></div><div class="line">  addr &lt;- child prof <span class="string">"address"</span></div><div class="line">  city &lt;- child addr <span class="string">"city"</span></div><div class="line">  pure city</div></pre></td></tr></table></figure>
<h2 id="Monad-type-class-8-4"><a href="#Monad-type-class-8-4" class="headerlink" title="Monad type class (8.4)"></a>Monad type class (8.4)</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- &gt;&gt;=</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">Apply</span> m &lt;= <span class="type">Bind</span> m <span class="keyword">where</span></span></div><div class="line">    bind :: <span class="keyword">forall</span> a b. m a -&gt; (a -&gt; m b) -&gt; m b</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> (<span class="type">Applicative</span> <span class="title">m</span>, <span class="type">Bind</span> <span class="title">m</span>) &lt;= <span class="type">Monad</span> m</span></div><div class="line"><span class="class"></span></div><div class="line"><span class="class"><span class="keyword">instance</span> bindArray :: <span class="type">Bind</span> <span class="type">Array</span> <span class="keyword">where</span></span></div><div class="line">    bind xs f = concatMap f xs</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">instance</span> bindMaybe :: <span class="type">Bind</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></div><div class="line">    bind <span class="type">Nothing</span>  _ = <span class="type">Nothing</span></div><div class="line">    bind (<span class="type">Just</span> a) f = f a</div></pre></td></tr></table></figure>
<blockquote>
<p>syntax suger</p>
</blockquote>
<p>all of the following statement are same</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="title">do</span> value &lt;- someComputation</div><div class="line">   whatToDoNext</div><div class="line"></div><div class="line"><span class="title">bind</span> someComputation \value -&gt; whatToDoNext</div><div class="line"></div><div class="line"><span class="title">someComputation</span> &gt;&gt;= \value -&gt; whatToDoNext</div></pre></td></tr></table></figure>
<h2 id="8-5-Monad-Laws"><a href="#8-5-Monad-Laws" class="headerlink" title="8.5 Monad Laws"></a>8.5 Monad Laws</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Left identity</span></div><div class="line"><span class="title">pure</span> a &gt;&gt;= f ≡ f a</div><div class="line"></div><div class="line"><span class="comment">-- Right identity</span></div><div class="line"><span class="title">m</span> &gt;&gt;= pure ≡ m</div><div class="line"></div><div class="line"><span class="comment">-- Associativity</span></div><div class="line">(m &gt;&gt;= f) &gt;&gt;= g ≡ m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)</div></pre></td></tr></table></figure>
<h3 id="Right-identity"><a href="#Right-identity" class="headerlink" title="Right identity"></a>Right identity</h3><p>It tells us that we can eliminate a call to pure if it is the last expression in a do notation block:</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">do</span></div><div class="line">  x &lt;- expr</div><div class="line">  pure x</div></pre></td></tr></table></figure>
<p>The right-identity law says that this is equivalent to just expr.</p>
<h3 id="Left-identity"><a href="#Left-identity" class="headerlink" title="Left identity"></a>Left identity</h3><p>we can eliminate a call to pure if it is the first expression in a do notation block:</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">do</span></div><div class="line">  x &lt;- pure y</div><div class="line">  next</div></pre></td></tr></table></figure>
<p>This code is equivalent to next, after the name x has been replaced with the expression y.</p>
<h3 id="Associativity"><a href="#Associativity" class="headerlink" title="Associativity"></a>Associativity</h3><p>It tells us how to deal with nested do notation blocks</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="title">c1</span> = <span class="keyword">do</span></div><div class="line">  y &lt;- <span class="keyword">do</span></div><div class="line">    x &lt;- m1</div><div class="line">    m2</div><div class="line">  m3</div><div class="line"></div><div class="line"><span class="title">c2</span> = <span class="keyword">do</span></div><div class="line">  x &lt;- m1</div><div class="line">  y &lt;- m2</div><div class="line">  m3</div></pre></td></tr></table></figure>
<h2 id="8-6-Folding-With-Monads"><a href="#8-6-Folding-With-Monads" class="headerlink" title="8.6 Folding With Monads"></a>8.6 Folding With Monads</h2><p><strong>foldM</strong> generalizes the foldl function that we met earlier to a monadic context.</p>
<p>Intuitively, foldM performs a fold over a list in some context supporting some set of side-effects.</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="title">foldM</span> :: <span class="keyword">forall</span> m a b. <span class="type">Monad</span> m =&gt; (a -&gt; b -&gt; m a) -&gt; a -&gt; <span class="type">List</span> b -&gt; m a</div><div class="line"><span class="title">foldM</span> _ a <span class="type">Nil</span> = pure a</div><div class="line"><span class="title">foldM</span> f a (b : bs) = <span class="keyword">do</span></div><div class="line">  a' &lt;- f a b</div><div class="line">  foldM f a' bs</div></pre></td></tr></table></figure>
<p>Example:</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Data.List</div><div class="line"></div><div class="line"><span class="title">safeDivide</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Maybe</span> <span class="type">Int</span></div><div class="line"><span class="title">safeDivide</span> _ <span class="number">0</span> = <span class="type">Nothing</span></div><div class="line"><span class="title">safeDivide</span> a b = <span class="type">Just</span> (a / b)</div><div class="line"></div><div class="line"><span class="comment">-- (Just 5)</span></div><div class="line"><span class="title">foldM</span> safeDivide <span class="number">100</span> (fromFoldable [<span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>]) </div><div class="line"></div><div class="line"><span class="comment">-- Nothing</span></div><div class="line"><span class="title">foldM</span> safeDivide <span class="number">100</span> (fromFoldable [<span class="number">2</span>, <span class="number">0</span>, <span class="number">4</span>])</div></pre></td></tr></table></figure>
<h2 id="8-7-Monads-and-Applicatives"><a href="#8-7-Monads-and-Applicatives" class="headerlink" title="8.7 Monads and Applicatives"></a>8.7 Monads and Applicatives</h2><blockquote>
<p>Every instance of the Monad type class is also an instance of the Applicative type class</p>
</blockquote>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="title">ap</span> :: <span class="keyword">forall</span> m a b. <span class="type">Monad</span> m =&gt; m (a -&gt; b) -&gt; m a -&gt; m b</div><div class="line"><span class="title">ap</span> mf ma = <span class="keyword">do</span></div><div class="line">  f &lt;- mf</div><div class="line">  a &lt;- ma</div><div class="line">  pure (f a)</div></pre></td></tr></table></figure>
<blockquote>
<p>a monad has to combine its side-effects in sequence.</p>
</blockquote>
<h2 id="8-8-Native-Effects"><a href="#8-8-Native-Effects" class="headerlink" title="8.8 Native Effects"></a>8.8 Native Effects</h2><blockquote>
<p>The Eff monad is defined in the Prelude, in the Control.Monad.Eff module. It is used to manage so-called native side-effects.</p>
</blockquote>
<h2 id="8-9-Side-Effects-and-Purity"><a href="#8-9-Side-Effects-and-Purity" class="headerlink" title="8.9 Side-Effects and Purity"></a>8.9 Side-Effects and Purity</h2><blockquote>
<p>The answer is that PureScript does not aim to eliminate side-effects. It aims to represent side-effects in such a way that pure computations can be distinguished from computations with side-effects in the type system. In this sense, the language is still pure.</p>
<p><em>main</em> is required to be a computation in the Eff monad</p>
</blockquote>
<h2 id="8-10-The-Eff-Monad"><a href="#8-10-The-Eff-Monad" class="headerlink" title="8.10 The Eff Monad"></a>8.10 The Eff Monad</h2><p>Simple example.</p>
<p>This program uses do notation to combine two types of native effects provided by the Javascript runtime: random number generation and console IO.</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span> Main <span class="keyword">where</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> Prelude</div><div class="line"></div><div class="line"><span class="keyword">import</span> Control.Monad.Eff.Random (<span class="title">random</span>)</div><div class="line"><span class="keyword">import</span> Control.Monad.Eff.Console (<span class="title">logShow</span>)</div><div class="line"></div><div class="line"><span class="title">main</span> = <span class="keyword">do</span></div><div class="line">  n &lt;- random</div><div class="line">  logShow n</div></pre></td></tr></table></figure>
<h2 id="8-11-Extensible-Effects"><a href="#8-11-Extensible-Effects" class="headerlink" title="8.11 Extensible Effects"></a>8.11 Extensible Effects</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; :<span class="class"><span class="keyword">type</span> main</span></div><div class="line"><span class="title">forall</span> eff. <span class="type">Eff</span> (console :: <span class="type">CONSOLE</span>, random :: <span class="type">RANDOM</span> | eff) <span class="type">Unit</span></div></pre></td></tr></table></figure>
<p>main is a computation with side-effects, which can be run in any environment which supports random number generation and console IO, and any other types of side effect, and which returns a value of type Unit</p>
]]></content>
      
        
        <tags>
            
            <tag> fp </tag>
            
            <tag> purescript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Elastic Search Step by Step 2]]></title>
      <url>http://hczhang.com/2019/05/31/Elastic-Search-Step-by-Step-2/</url>
      <content type="html"><![CDATA[<h1 id="Searching-with-elasticsearch"><a href="#Searching-with-elasticsearch" class="headerlink" title="Searching with elasticsearch"></a>Searching with elasticsearch</h1><p>This section will focus on query</p>
<a id="more"></a>
<h2 id="query-lite"><a href="#query-lite" class="headerlink" title="query lite"></a>query lite</h2><p>URI Search</p>
<ul>
<li>/movies/movie/_search?q=title:star</li>
<li>/movies/movie/_search?q=+year:&gt;2010+title:trek</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">'Content-Type: application/json'</span> -X GET http://&#123;&#123;host&#125;&#125;:9200/movies/movie/_search?q=title:star&amp;pretty</div><div class="line"></div><div class="line"><span class="comment"># becareful about url encoding</span></div><div class="line">curl -H <span class="string">'Content-Type: application/json'</span> -X GET http://&#123;&#123;host&#125;&#125;:9200/movies/movie/_search?q=%2Byear%3A%3E2010%2Btitle%3Atrek</div></pre></td></tr></table></figure>
<h2 id="request-body-search"><a href="#request-body-search" class="headerlink" title="request body search"></a>request body search</h2><p>query DSL is in the request body as JSON</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">'Content-Type: application/json'</span> -X GET http://&#123;&#123;host&#125;&#125;:9200/movies/movie/_search?pretty -d `</div><div class="line">&#123;</div><div class="line">    <span class="string">"query"</span>: &#123;</div><div class="line">        <span class="string">"match"</span>: &#123;</div><div class="line">            <span class="string">"title"</span>: <span class="string">"star"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">`</div></pre></td></tr></table></figure>
<ul>
<li><strong>filters</strong> ask a yes/no question of your data</li>
<li><strong>queries</strong> return data in terms of relevance</li>
</ul>
<p>use filters when you can - they are faster and cacheable.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">'Content-Type: application/json'</span> -X GET http://&#123;&#123;host&#125;&#125;:9200/movies/movie/_search?pretty -d <span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    "query": &#123;</span></div><div class="line"><span class="string">        "bool": &#123;</span></div><div class="line"><span class="string">            "must": &#123; "term": &#123;"title": "trek" &#125;&#125;,</span></div><div class="line"><span class="string">            "filter": &#123;"range": &#123;"year": &#123;"gte": 2010&#125;&#125;&#125;</span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;'</span></div></pre></td></tr></table></figure>
<h3 id="some-types-of-filters"><a href="#some-types-of-filters" class="headerlink" title="some types of filters"></a>some types of filters</h3><p>filters are wrapped in a <em>filter: {}</em> block</p>
<p>could combine filters inside queries, or queries inside filters</p>
<ul>
<li>term: filter by exact values<ul>
<li>{“term”: {“year”: 2014”}}</li>
</ul>
</li>
<li>terms: match if any exact values in a list match<ul>
<li>{“terms”: {“genre”: [“Sci-Fi”, “Adventure”]}}</li>
</ul>
</li>
<li>range: Find numbers or dates in a given range(gt, gte, lt, lte)<ul>
<li>{“range”: {“year”: {“gte”: 2010}}}</li>
</ul>
</li>
<li>exists: Find doc where a field exists<ul>
<li>{“exists”: {“field”: “tags”}}</li>
</ul>
</li>
<li>missing: Find doc where a field is missing<ul>
<li>{“missing”: {field”: “tags”}}</li>
</ul>
</li>
<li>bool: Combine filters with Boolean logic (must, must_not, should)</li>
</ul>
<h3 id="some-types-of-queries"><a href="#some-types-of-queries" class="headerlink" title="some types of queries"></a>some types of queries</h3><p>queries are wrapped in a <em>query: {}</em> block</p>
<p>could combine filters inside queries, or queries inside filters</p>
<ul>
<li>match_all: return all documents and is the default. Normally used with a filter.<ul>
<li>{“match_all”: {}}</li>
</ul>
</li>
<li>match: searches analyzed results, such as full text search.<ul>
<li>{“match”: {“title”: “star”}}</li>
</ul>
</li>
<li>multi-match: run the same query on multiple fields.<ul>
<li>{“multi_match”: {“query”: “star”, “fields”: [“title”, “synopsis”]}}</li>
</ul>
</li>
<li>bool: Works like a bool filter, but results are scored by relevance.</li>
<li>match_phase: must find all terms, in the right order<ul>
<li>{“match_phase”: {“title”: “star wars”}}</li>
</ul>
</li>
</ul>
<h2 id="Phrase-search"><a href="#Phrase-search" class="headerlink" title="Phrase search"></a>Phrase search</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">'Content-Type: application/json'</span> -X GET http://&#123;&#123;host&#125;&#125;:9200/movies/movie/_search?pretty -d <span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    "query": &#123;</span></div><div class="line"><span class="string">        "match_phase": &#123;"title": "star wars"&#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;'</span></div></pre></td></tr></table></figure>
<h2 id="slop"><a href="#slop" class="headerlink" title="slop"></a>slop</h2><p>order matters, but you’re OK with some words being in between the terms.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">'Content-Type: application/json'</span> -X GET http://&#123;&#123;host&#125;&#125;:9200/movies/movie/_search?pretty -d <span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    "query": &#123;</span></div><div class="line"><span class="string">        "match_phase": &#123;"title": "star beyond", "slop": 1&#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;'</span></div></pre></td></tr></table></figure></p>
<p>“quick brown fox” would match “quick fox” with a slop of 1</p>
<h2 id="proximity-queries"><a href="#proximity-queries" class="headerlink" title="proximity queries"></a>proximity queries</h2><blockquote>
<p>Remember this: query results are sorted by relevance.</p>
</blockquote>
<p>Just use a really high slop for proximity queries</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">'Content-Type: application/json'</span> -X GET http://&#123;&#123;host&#125;&#125;:9200/movies/movie/_search?pretty -d <span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    "query": &#123;</span></div><div class="line"><span class="string">        "match_phase": &#123;"title": "star beyond", "slop": 100&#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;'</span></div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> architecture </tag>
            
            <tag> elastic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[kubernetes intro day 1]]></title>
      <url>http://hczhang.com/2019/05/13/kubernetes-intro-day-1/</url>
      <content type="html"><![CDATA[<h1 id="Initializing-the-Master"><a href="#Initializing-the-Master" class="headerlink" title="Initializing the Master"></a>Initializing the Master</h1><p>Calico networking plugin</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">kubeadm init --pod-network-cidr 192.168.0.0/16 \</div><div class="line">--service-cidr 10.96.0.0/16 \</div><div class="line">--apiserver-advertise-address $(ifconfig ens160 | grep <span class="string">'inet addr'</span>| cut -d<span class="string">':'</span> -f2 | awk <span class="string">'&#123;print $1&#125; '</span>)</div></pre></td></tr></table></figure>
<h1 id="Calico-Project"><a href="#Calico-Project" class="headerlink" title="Calico Project"></a>Calico Project</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubectl apply -f http://docs.projectcalico.org/v2.3/getting- started/kubernetes/installation/hosted/kubeadm/1.6/calico.yaml</div></pre></td></tr></table></figure>
<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"source &lt;(kubectl completion bash)"</span> &gt;&gt; ~/.bashrc</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> devops </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Elastic Search Step by Step 1]]></title>
      <url>http://hczhang.com/2019/04/28/Elastic-Search-Step-by-Step-1/</url>
      <content type="html"><![CDATA[<p>This is follow up Elastic Search - Getting Start Post</p>
<p>More details and step by step instruction</p>
<a id="more"></a>
<h1 id="Mapping-and-indexing-data"><a href="#Mapping-and-indexing-data" class="headerlink" title="Mapping and indexing data"></a>Mapping and indexing data</h1><h2 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h2><p>A mapping is a schema definition.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">curl -X PUT http://&#123;&#123;host&#125;&#125;:9200/movies -H <span class="string">'Content-Type: application/json'</span> -d <span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    "mappings": &#123;</span></div><div class="line"><span class="string">        "movie": &#123;</span></div><div class="line"><span class="string">            "properties": &#123;</span></div><div class="line"><span class="string">                "year": &#123; "type": "date" &#125;</span></div><div class="line"><span class="string">            &#125;</span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">curl -H '</span>Content-Type: application/json<span class="string">' -X GET http://&#123;&#123;host&#125;&#125;:9200/movies/_mapping/movie?pretty</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<h2 id="Import-Document"><a href="#Import-Document" class="headerlink" title="Import Document"></a>Import Document</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">curl -X PUT http://&#123;&#123;host&#125;&#125;:9200/movies/movie/109487 -H <span class="string">'Content-Type: application/json'</span> -d <span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    "genre": ["IMAX", "Sci-Fi"],</span></div><div class="line"><span class="string">    "title": "Interstella",</span></div><div class="line"><span class="string">    "year": 2014</span></div><div class="line"><span class="string">&#125;'</span></div><div class="line"></div><div class="line">curl -H <span class="string">'Content-Type: application/json'</span> -X GET http://&#123;&#123;host&#125;&#125;:9200/movies/movie/_search?pretty</div></pre></td></tr></table></figure>
<h2 id="Bulk-import"><a href="#Bulk-import" class="headerlink" title="Bulk import"></a>Bulk import</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget http://media.sundog-soft.com/es/movies.json</div><div class="line"></div><div class="line">curl -X PUT http://&#123;&#123;host&#125;&#125;:9200/_bulk?pretty --data-binary @movies.json -H <span class="string">'Content-Type: application/json'</span></div></pre></td></tr></table></figure>
<h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><p>Every document has a _version field</p>
<p>Elasticsearch documents are immutable.</p>
<ul>
<li>a new doc is created with an incremented _version</li>
<li>the old document is marked for deletion</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">'Content-Type: application/json'</span> -X GET http://&#123;&#123;host&#125;&#125;:9200/movies/movie/109487?pretty</div><div class="line"></div><div class="line">curl -X POST http://&#123;&#123;host&#125;&#125;:9200/movies/movie/109487/_update -H <span class="string">'Content-Type: application/json'</span> -d <span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    "doc": &#123;</span></div><div class="line"><span class="string">        "title": "instellar"</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<p>create doc with same id, it also increase _version field. such as:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">curl -X PUT http://&#123;&#123;host&#125;&#125;:9200/movies/movie/109487 -H <span class="string">'Content-Type: application/json'</span> -d <span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    "genre": ["IMAX", "Sci-Fi"],</span></div><div class="line"><span class="string">    "title": "Interstella",</span></div><div class="line"><span class="string">    "year": 2014</span></div><div class="line"><span class="string">&#125;'</span></div></pre></td></tr></table></figure>
<h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># first of all, search id</span></div><div class="line">curl -H <span class="string">'Content-Type: application/json'</span> -X GET http://&#123;&#123;host&#125;&#125;:9200/movies/_search?q=Dark_</div><div class="line"></div><div class="line"><span class="comment"># delete by id</span></div><div class="line">curl -H <span class="string">'Content-Type: application/json'</span> -X DELETE http://&#123;&#123;host&#125;&#125;:9200/movies/movie/109487?pretty</div></pre></td></tr></table></figure>
<h2 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h2><p>Optimistic concurrency control</p>
<p>In short, ELK use _version field to control version of data</p>
<blockquote>
<p>For conflict _version: Use retry_on_conflicts+N to automatically retry</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">'Content-Type: application/json'</span> -X PUT http://&#123;&#123;host&#125;&#125;:9200/movies/movie/109487?version=3 -d <span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    "genre": ["Imax", "Sci-Fi"],</span></div><div class="line"><span class="string">    "title": "Interstellar Foo",</span></div><div class="line"><span class="string">    "year": 2014,</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div><div class="line"></div><div class="line"><span class="comment"># keey to retry if conflict on data</span></div><div class="line">curl -H <span class="string">'Content-Type: application/json'</span> -X POST http://&#123;&#123;host&#125;&#125;:9200/movies/movie/109487/_update?retry_on_conflict=5 -d <span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    "doc": &#123;</span></div><div class="line"><span class="string">        "title": "Interstellar"</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<h2 id="Data-modeling"><a href="#Data-modeling" class="headerlink" title="Data modeling"></a>Data modeling</h2><h3 id="Normalized-data-VS-Denormalized-data"><a href="#Normalized-data-VS-Denormalized-data" class="headerlink" title="Normalized data VS Denormalized data"></a>Normalized data <em>VS</em> Denormalized data</h3><blockquote>
<p>think about Denormalized data in ELK</p>
</blockquote>
<h3 id="Strategies-for-relational-data"><a href="#Strategies-for-relational-data" class="headerlink" title="Strategies for relational data"></a>Strategies for relational data</h3><p>In short answer, <em>join</em> field (ELK 6)</p>
<p>parent and child data should be store in same shards</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">curl -H <span class="string">'Content-Type: application/json'</span> -X PUT http://&#123;&#123;host&#125;&#125;:9200/series -d <span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    "mappings": &#123;</span></div><div class="line"><span class="string">        "movie": &#123;</span></div><div class="line"><span class="string">            "properties": &#123;`</span></div><div class="line"><span class="string">                "film_to_franchise": &#123;</span></div><div class="line"><span class="string">                    "type": "join", "relations": &#123; "franchise": "film" &#125;</span></div><div class="line"><span class="string">                &#125;</span></div><div class="line"><span class="string">            &#125;</span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">wget http://media.sundog-soft.com/es6/series.json</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">curl -H '</span>Content-Type: application/json<span class="string">' -X PUT http://&#123;&#123;host&#125;&#125;:9200/_bulk --data-binary @series.json</span></div><div class="line"><span class="string">'</span></div><div class="line"></div><div class="line"><span class="comment"># Query by parent</span></div><div class="line">curl -H <span class="string">'Content-Type: application/json'</span> -X GET http://&#123;&#123;host&#125;&#125;:9200/series/movie/_search?pretty -d <span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    "query": &#123;</span></div><div class="line"><span class="string">        "has_parent": &#123;</span></div><div class="line"><span class="string">            "parent_type": "franchise",</span></div><div class="line"><span class="string">            "query": &#123;</span></div><div class="line"><span class="string">                "match": &#123; "title": "Star War" &#125;</span></div><div class="line"><span class="string">            &#125;</span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div><div class="line"></div><div class="line"><span class="comment"># Query by child</span></div><div class="line">curl -H <span class="string">'Content-Type: application/json'</span> -X GET http://&#123;&#123;host&#125;&#125;:9200/series/movie/_search?pretty -d <span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    "query": &#123;</span></div><div class="line"><span class="string">        "has_child": &#123;</span></div><div class="line"><span class="string">            "type": "film",</span></div><div class="line"><span class="string">            "query": &#123;</span></div><div class="line"><span class="string">                "match": &#123; "title": "The Force Awakens" &#125;</span></div><div class="line"><span class="string">            &#125;</span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> architecture </tag>
            
            <tag> elastic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oracle 12c workshop cheatsheet II]]></title>
      <url>http://hczhang.com/2019/03/27/Oracle-12c-workshop-cheatsheet-II/</url>
      <content type="html"><![CDATA[<p>This is a cheat sheet for Oracle 12C R2 workshop Part II</p>
<p>Will conver those topics:</p>
<ul>
<li>Storage space</li>
<li>Undo</li>
<li>Moving Data</li>
<li>Backup and Recovery</li>
</ul>
<a id="more"></a>
<h1 id="Manage-storage-space"><a href="#Manage-storage-space" class="headerlink" title="Manage storage space"></a>Manage storage space</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- check disk space</span></div><div class="line"><span class="keyword">SELECT</span> df.tablespace_name <span class="keyword">tablespace</span>, fs.bytes free, df.bytes, fs.bytes *<span class="number">100</span>/ df.bytes PCT_FREE</div><div class="line"><span class="keyword">FROM</span> dba_data_files df ,dba_free_space fs</div><div class="line"><span class="keyword">WHERE</span> df.tablespace_name = fs.tablespace_name <span class="number">4</span> <span class="keyword">AND</span> df.tablespace_name = <span class="string">'TBSALERT'</span>;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- checkout metric</span></div><div class="line"><span class="keyword">SELECT</span> warning_value, critical_value</div><div class="line"><span class="keyword">FROM</span> dba_thresholds</div><div class="line"><span class="keyword">WHERE</span> metrics_name=<span class="string">'Tablespace Space Usage'</span> <span class="number">4</span> <span class="keyword">AND</span> object_name <span class="keyword">IS</span> <span class="literal">NULL</span>;</div></pre></td></tr></table></figure>
<h1 id="Undo"><a href="#Undo" class="headerlink" title="Undo"></a>Undo</h1><p><a href="https://docs.oracle.com/cd/B19306_01/server.102/b14220/transact.htm" target="_blank" rel="noopener">Transaction Management</a></p>
<p>Two UNDO modes: SHARED versus LOCAL</p>
<ul>
<li>There is only one shared UNDO tablespace (in CDB root).</li>
<li>There can be a - local UNDO tablespace in each PDB.</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- check local undo flag</span></div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> property_name, property_value</div><div class="line"><span class="keyword">FROM</span> database_properties</div><div class="line"><span class="keyword">WHERE</span> property_name = <span class="string">'LOCAL_UNDO_ENABLED'</span></div></pre></td></tr></table></figure>
<h2 id="Enable-Local-Undo-Mode"><a href="#Enable-Local-Undo-Mode" class="headerlink" title="Enable Local Undo Mode"></a>Enable Local Undo Mode</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">STARTUP UPGRADE</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> <span class="keyword">LOCAL</span> <span class="keyword">UNDO</span> <span class="keyword">ON</span>;</div><div class="line">SHUTDOWN IMMEDIATE</div><div class="line">STARTUP</div></pre></td></tr></table></figure>
<h2 id="Enable-Temp-Undo"><a href="#Enable-Temp-Undo" class="headerlink" title="Enable Temp Undo"></a>Enable Temp Undo</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">SESSION</span> <span class="keyword">SET</span> temp_undo_enabled = <span class="literal">true</span>;</div></pre></td></tr></table></figure>
<h1 id="Moving-Data"><a href="#Moving-Data" class="headerlink" title="Moving Data"></a>Moving Data</h1><h2 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Create</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">DIRECTORY</span> dp_for_oe <span class="keyword">AS</span> <span class="string">'/u01/app/oracle/admin/ORCL/dpdump'</span>;</div><div class="line"><span class="comment">-- Grant permission</span></div><div class="line"><span class="keyword">GRANT</span> <span class="keyword">read</span>, write <span class="keyword">ON</span> <span class="keyword">DIRECTORY</span> dp_for_oe <span class="keyword">TO</span> oe;</div></pre></td></tr></table></figure>
<h2 id="expdp-impdp"><a href="#expdp-impdp" class="headerlink" title="expdp/impdp"></a>expdp/impdp</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Export</span></div><div class="line">expdp oe/&lt;password&gt;@PDB1 SCHEMAS=oe DIRECTORY=dp_for_oe DUMPFILE=expoe.dmp</div><div class="line"></div><div class="line"><span class="comment"># dummy import, convert to sql script</span></div><div class="line">impdp oe/&lt;password&gt;@PDB1 SCHEMAS=oe DIRECTORY=dp_for_oe DUMPFILE=expoe.dmp SQLFILE=oe_SQL</div><div class="line"></div><div class="line"><span class="comment"># Import By File</span></div><div class="line">impdp SYSTEM/&lt;password&gt;@PDB2 REMAP_SCHEMA=oe:oetest DIRECTORY=dp_for_oe DUMPFILE=expoe.dmp</div><div class="line"></div><div class="line"><span class="comment"># Import by DB Link</span></div><div class="line">impdp SYSTEM/&lt;password&gt;@PDB2 SCHEMAS=oe REMAP_SCHEMA=oe:oetest NETWORK_LINK=link_pdb1</div></pre></td></tr></table></figure>
<h2 id="sqlldr"><a href="#sqlldr" class="headerlink" title="sqlldr"></a>sqlldr</h2><p><a href="https://docs.oracle.com/cd/B19306_01/server.102/b14215/ldr_params.htm" target="_blank" rel="noopener">SQL Loder Doc</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sqlldr userid=sh/&lt;password&gt;@PDB2 control=DP_inventories.ctl log=inventories.log data=DP_inventories.dat</div><div class="line"></div><div class="line"># Direct Mode.  The direct load loads records into the blocks</div><div class="line">sqlldr userid=sh/&lt;password&gt;@PDB2 control=DP_inventories.ctl log=inventories.log data=DP_inventories.dat ROWS=10 DIRECT=TRUE</div></pre></td></tr></table></figure>
<h1 id="External-Table"><a href="#External-Table" class="headerlink" title="External Table"></a>External Table</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Verify that the locations are correctly set for the partitions</span></div><div class="line"><span class="keyword">SELECT</span> table_name, partition_name, location, directory_name <span class="keyword">FROM</span> DBA_XTERNAL_LOC_PARTITIONS;</div></pre></td></tr></table></figure>
<p>Create external table</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sh.sales_ext_range</div><div class="line">(</div><div class="line">    time_id <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    prod_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    cust_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    channel_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    promo_id <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    quantity_sold <span class="built_in">NUMBER</span>(<span class="number">10</span>,<span class="number">2</span>),</div><div class="line">    amount_sole <span class="built_in">NUMBER</span>(<span class="number">10</span>,<span class="number">2</span>)</div><div class="line">)</div><div class="line"><span class="keyword">ORGANIZATION</span> <span class="keyword">EXTERNAL</span></div><div class="line">(</div><div class="line"><span class="keyword">TYPE</span> ORACLE_LOADER</div><div class="line">   <span class="keyword">DEFAULT</span> <span class="keyword">DIRECTORY</span> ext_dir</div><div class="line">   <span class="keyword">ACCESS</span> <span class="keyword">PARAMETERS</span></div><div class="line">   (</div><div class="line">      <span class="keyword">RECORDS</span> <span class="keyword">DELIMITED</span> <span class="keyword">BY</span> <span class="keyword">NEWLINE</span></div><div class="line">      <span class="keyword">BADFILE</span> <span class="string">'sh%a_%p.bad'</span></div><div class="line">      <span class="keyword">LOGFILE</span> <span class="string">'sh%a_%p.log'</span></div><div class="line">      <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">','</span></div><div class="line">      <span class="keyword">MISSING</span> <span class="keyword">FIELD</span> <span class="keyword">VALUES</span> <span class="keyword">ARE</span> <span class="literal">NULL</span></div><div class="line">    )</div><div class="line">)</div><div class="line"><span class="keyword">PARALLEL</span></div><div class="line"><span class="keyword">REJECT</span> <span class="keyword">LIMIT</span> <span class="keyword">UNLIMITED</span></div><div class="line"><span class="keyword">PARTITION</span> <span class="keyword">by</span> <span class="keyword">range</span> (time_id)</div><div class="line">(</div><div class="line">    <span class="keyword">PARTITION</span> year1998 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="keyword">TO_DATE</span>(<span class="string">'31-12-1998'</span>, <span class="string">'DD-MM-YYYY'</span>)) LOCATION (<span class="string">'DP_sales_1998.dat'</span>),</div><div class="line">    <span class="keyword">PARTITION</span> year1999 <span class="keyword">VALUES</span> <span class="keyword">LESS</span> <span class="keyword">THAN</span> (<span class="keyword">TO_DATE</span>(<span class="string">'31-12-1999'</span>, <span class="string">'DD-MM-YYYY'</span>)) LOCATION (ext_dir2:<span class="string">'DP2_sales_1999.dat'</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<h1 id="Backup-amp-Recovery"><a href="#Backup-amp-Recovery" class="headerlink" title="Backup &amp; Recovery"></a>Backup &amp; Recovery</h1><h2 id="Checkpoint"><a href="#Checkpoint" class="headerlink" title="Checkpoint"></a>Checkpoint</h2><p>Responsible</p>
<ul>
<li>Updating data file headers with checkpoint info</li>
<li>Updating control files with checkpoint info</li>
<li>Signaling DBWn at full checkpoints</li>
</ul>
<h2 id="Redo-log-and-Log-Writer-LGWR"><a href="#Redo-log-and-Log-Writer-LGWR" class="headerlink" title="Redo log and Log Writer (LGWR)"></a>Redo log and Log Writer (LGWR)</h2><p>Trigger</p>
<ul>
<li>At commit</li>
<li>When on-third full</li>
<li>Every 3 sec</li>
<li>Before DBWn write</li>
<li>Before clean shutdowns</li>
</ul>
<h2 id="Automatic-Instance-or-Crash-Recovery"><a href="#Automatic-Instance-or-Crash-Recovery" class="headerlink" title="Automatic Instance or Crash Recovery"></a>Automatic Instance or Crash Recovery</h2><p>Is caused by attempts to open a database whose files are not synchronized on shutdown<br>Uses information stored in redo log groups to synchronize files</p>
<p>Involves two distinct operations:</p>
<ul>
<li>Rolling forward: Redo log changes (both committed and uncommitted) are applied to data files.</li>
<li>Rolling back: Changes that are made but not committed are returned to their original state.</li>
</ul>
<h2 id="Backup-Type"><a href="#Backup-Type" class="headerlink" title="Backup Type"></a>Backup Type</h2><ul>
<li>Level 0. FULL</li>
<li>Level 1. Incremental<ul>
<li>Cumulative</li>
<li>Differential</li>
</ul>
</li>
</ul>
<h2 id="Complete-Recovery"><a href="#Complete-Recovery" class="headerlink" title="Complete Recovery"></a>Complete Recovery</h2><p>Brings the database or tablespace up to the present, including all committed data changes made to the point in time when the recovery was requested</p>
<ol>
<li>Restored data files</li>
<li>Changes applied (redo logs)</li>
<li>Data files containning committed and uncommitted trans</li>
<li>Dndo applied</li>
<li>Recovered data files</li>
</ol>
<h2 id="Pint-in-Time-Recovery-Process"><a href="#Pint-in-Time-Recovery-Process" class="headerlink" title="Pint-in-Time Recovery Process"></a>Pint-in-Time Recovery Process</h2><ol>
<li>Restored data files from as far back as necessary</li>
<li>Changes applied to point in time (PIT). (Redo logs)</li>
<li>Data files containing committed and un committed trans up to PIT</li>
<li>Database opened</li>
<li>Undo applied</li>
<li>PIT-recovered data files</li>
</ol>
<h2 id="List-control-files"><a href="#List-control-files" class="headerlink" title="List control files"></a>List control files</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> v$<span class="keyword">controlfile</span>;</div><div class="line">SQL&gt; SHOW PARAMETER control_files</div></pre></td></tr></table></figure>
<h2 id="Create-a-Control-File"><a href="#Create-a-Control-File" class="headerlink" title="Create a Control File"></a>Create a Control File</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SQL&gt; CREATE PFILE FROM SPFILE;</div><div class="line">SQL&gt; SHUTDOWN IMMEDIATE</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Upcate pfile</span></div><div class="line">$ vi <span class="variable">$ORACLE_HOME</span>/dbs/initORCL.ora</div><div class="line"></div><div class="line">*.control_files=<span class="string">'/u01/app/oracle/oradata/ORCL/control01.ctl'</span>, <span class="string">'/u01/app/oracle/fast_recovery_area/ORCL/control02.ctl'</span>,<span class="string">'/u01/app/oracle/ controlfiles_dir/ORCL/control03.ctl'</span></div><div class="line"></div><div class="line"><span class="comment"># copy file</span></div><div class="line">$ cp /u01/app/oracle/oradata/ORCL/control01.ctl /u01/app/oracle/controlfiles_dir /ORCL/control03.ctl</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- refresh from pfile to spfile</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">SPFILE</span> <span class="keyword">FROM</span> PFILE;</div><div class="line">STARTUP</div><div class="line"></div><div class="line"><span class="comment">-- check control file</span></div><div class="line"><span class="keyword">SHOW</span> PARAMETER control_files</div></pre></td></tr></table></figure>
<h2 id="Fast-Recovery-Area-FRA"><a href="#Fast-Recovery-Area-FRA" class="headerlink" title="Fast Recovery Area (FRA)"></a>Fast Recovery Area (FRA)</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SQL&gt; SHOW PARAMETER db_recovery_file_dest</div><div class="line"></div><div class="line"><span class="comment">-- Change the size of the fast recovery area</span></div><div class="line">SQL&gt; ALTER SYSTEM SET db_recovery_file_dest_size = 18G SCOPE=both;</div><div class="line">SQL&gt; SHOW PARAMETER db_recovery_file_dest_size</div></pre></td></tr></table></figure>
<h2 id="Redo-Log"><a href="#Redo-Log" class="headerlink" title="Redo Log"></a>Redo Log</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">group</span>#, <span class="keyword">status</span>, <span class="keyword">member</span> <span class="keyword">FROM</span> v$<span class="keyword">logfile</span>;</div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">group</span>#, members, <span class="keyword">archived</span>, <span class="keyword">status</span> <span class="keyword">FROM</span> v$<span class="keyword">log</span>;</div><div class="line"></div><div class="line"><span class="comment">-- Switch log</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SWITCH</span> <span class="keyword">LOGFILE</span>;</div><div class="line"></div><div class="line"><span class="comment">-- Add log</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> <span class="keyword">ADD</span> <span class="keyword">LOGFILE</span> <span class="keyword">MEMBER</span> <span class="string">'/u01/app/oracle/fast_recovery_area/ORCL/redo01b.log'</span> <span class="keyword">TO</span> <span class="keyword">GROUP</span> <span class="number">1</span>;</div></pre></td></tr></table></figure>
<h2 id="ARCHIVELOG-Mode"><a href="#ARCHIVELOG-Mode" class="headerlink" title="ARCHIVELOG Mode"></a>ARCHIVELOG Mode</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- List archived logs</span></div><div class="line">SQL&gt; SELECT name FROM v$archived_log ORDER BY stamp;</div><div class="line">SQL&gt; ARCHIVE LOG LIST;</div><div class="line"></div><div class="line"><span class="comment">-- Enable archive mode</span></div><div class="line">SQL&gt; SHUTDOWN IMMEDIATE</div><div class="line">SQL&gt; STARTUP MOUNT</div><div class="line">SQL&gt; ALTER DATABASE ARCHIVELOG;</div><div class="line">SQL&gt; ALTER DATABASE OPEN;</div></pre></td></tr></table></figure>
<h2 id="Backing-up-the-Control-File"><a href="#Backing-up-the-Control-File" class="headerlink" title="Backing up the Control File"></a>Backing up the Control File</h2><p>The control file and server parameter file (SPFILE) are backup automatically by default</p>
<p>Manually backup it as below</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Back up the control file to a trace file</span></div><div class="line"><span class="comment">-- Location: /u01/app/oracle/diag/rdbms/orcl/ORCL/trace</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> <span class="keyword">BACKUP</span> <span class="keyword">controlfile</span> <span class="keyword">TO</span> <span class="keyword">trace</span>;</div></pre></td></tr></table></figure>
<h2 id="Whole-DB-backup"><a href="#Whole-DB-backup" class="headerlink" title="Whole DB backup"></a>Whole DB backup</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ rman target /</div><div class="line">RMAN&gt; REPORT schema;</div><div class="line">RMAN&gt; BACKUP DATABASE PLUS ARCHIVELOG;</div><div class="line"></div><div class="line"><span class="comment"># partial backup</span></div><div class="line">RMAN&gt; BACKUP PLUGGABLE DATABASE PDB1 PLUS ARCHIVELOG;</div><div class="line"></div><div class="line"><span class="comment"># backup ts</span></div><div class="line">RMAN&gt; BACKUP TABLESPACE tbs_app;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># List backup</span></div><div class="line">RMAN&gt; LIST BACKUP;</div></pre></td></tr></table></figure>
<h2 id="Recovery"><a href="#Recovery" class="headerlink" title="Recovery"></a>Recovery</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RMAN&gt; RECOVER DATAFILE 1;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">--- Recover failure</span></div><div class="line">RMAN&gt; LIST FAILURE;</div><div class="line">RMAN&gt; ADVISE FAILURE;</div><div class="line">RMAN&gt; REPAIR FAILURE PREVIEW;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">rman target SYS/&lt;password&gt;@PDB1</div><div class="line"></div><div class="line">RMAN&gt; SHUTDOWN IMMEDIATE;</div><div class="line">RMAN&gt; RESTORE DATABASE;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">-- restores and recovers the data file in one step</span></div><div class="line">RMAN&gt; REPAIR PLUGGABLE DATABASE pdb1;</div></pre></td></tr></table></figure>
<h1 id="Monitor-DB"><a href="#Monitor-DB" class="headerlink" title="Monitor DB"></a>Monitor DB</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- kill locked session</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">KILL</span> <span class="keyword">SESSION</span> <span class="string">'278,21828'</span>;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> database </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oracle 12c workshop cheatsheet]]></title>
      <url>http://hczhang.com/2019/03/26/Oracle-12c-workshop-cheatsheet/</url>
      <content type="html"><![CDATA[<p>This is a cheat sheet for Oracle 12C R2 workshop Part I</p>
<p>Will conver those topics:</p>
<ul>
<li>EM</li>
<li>CBD</li>
<li>PDB</li>
<li>Network</li>
<li>User Security</li>
<li>Tablespaces</li>
</ul>
<a id="more"></a>
<h1 id="EM-Express"><a href="#EM-Express" class="headerlink" title="EM Express"></a>EM Express</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- enable em and listen at https://localhost:5500/em.</span></div><div class="line">sqlplus / as sysdba</div><div class="line"><span class="keyword">SELECT</span> dbms_xdb_config.gethttpsport() <span class="keyword">FROM</span> dual;</div><div class="line">exec dbms_xdb_config.SetGlobalPortEnabled(TRUE);</div></pre></td></tr></table></figure>
<h1 id="CDB"><a href="#CDB" class="headerlink" title="CDB"></a>CDB</h1><h2 id="Basic-Information"><a href="#Basic-Information" class="headerlink" title="Basic Information"></a>Basic Information</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Checkout wheather the db is a non-CDB or CDB</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, cdb, con_id <span class="keyword">FROM</span> v$<span class="keyword">database</span>;</div><div class="line"></div><div class="line"><span class="comment">-- List containers in CDB</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, con_id <span class="keyword">FROM</span> v$containers <span class="keyword">ORDER</span> <span class="keyword">BY</span> con_id;</div><div class="line"></div><div class="line"><span class="comment">-- List PDB in CDB</span></div><div class="line">SQL&gt; SHOW pdbs;</div><div class="line"><span class="keyword">SELECT</span> pdb_name, <span class="keyword">status</span> <span class="keyword">FROM</span> cdb_pdbs <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">-- List users</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> username <span class="keyword">FROM</span> cdb_users <span class="keyword">WHERE</span> common =<span class="string">'YES'</span></div><div class="line"><span class="keyword">SELECT</span> con_id, username <span class="keyword">FROM</span> cdb_users;</div></pre></td></tr></table></figure>
<h2 id="Disk-Informaiton"><a href="#Disk-Informaiton" class="headerlink" title="Disk Informaiton"></a>Disk Informaiton</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- List all tablespace in CDB</span></div><div class="line"><span class="keyword">SELECT</span> d.file#, ts.name, ts.ts#, ts.con_id <span class="keyword">FROM</span> v$<span class="keyword">datafile</span> d, v$<span class="keyword">tablespace</span> ts <span class="keyword">WHERE</span> d.ts#=ts.ts# <span class="keyword">AND</span> d.con_id=ts.con_id;</div><div class="line"></div><div class="line"><span class="comment">-- List all the data files in the CDB</span></div><div class="line"><span class="keyword">SELECT</span> file_name, tablespace_name <span class="keyword">FROM</span> cdb_data_files;</div><div class="line"></div><div class="line"><span class="comment">-- List all tmp tablespace in CDB</span></div><div class="line"><span class="keyword">SELECT</span> file_name, tablespace_name <span class="keyword">FROM</span> cdb_temp_files;</div><div class="line"></div><div class="line"><span class="comment">-- List all redo log in CDB</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">group</span>#, <span class="keyword">member</span>, con_id <span class="keyword">FROM</span> v$<span class="keyword">logfile</span>;</div><div class="line"></div><div class="line"><span class="comment">-- List all control file</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, con_id <span class="keyword">FROM</span> v$<span class="keyword">controlfile</span>;</div></pre></td></tr></table></figure>
<h2 id="Instance-Information"><a href="#Instance-Information" class="headerlink" title="Instance Information"></a>Instance Information</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- View the database instance name, its status</span></div><div class="line"><span class="keyword">SELECT</span> instance_name, <span class="keyword">status</span>, con_id <span class="keyword">FROM</span> v$<span class="keyword">instance</span>;</div><div class="line"></div><div class="line"><span class="comment">-- List the services for all the containers in the CDB</span></div><div class="line"><span class="keyword">SELECT</span> con_id, <span class="keyword">name</span> <span class="keyword">FROM</span> v$services <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">1</span>;</div></pre></td></tr></table></figure>
<h1 id="PDB"><a href="#PDB" class="headerlink" title="PDB"></a>PDB</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- switch CDB/PDB</span></div><div class="line">SQL &gt; ALTER SESSION SET CONTAINER = PDB1;</div><div class="line">SQL &gt; ALTER SESSION SET CONTAINER = CDB$ROOT;</div><div class="line"></div><div class="line"><span class="comment">-- open pdb</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">PLUGGABLE</span> <span class="keyword">DATABASE</span> PDB1 <span class="keyword">OPEN</span>;</div></pre></td></tr></table></figure>
<h2 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Prepare folder</span></div><div class="line">$ mkdir $ORACLE_BASE/oradata/ORCL/PDB2</div><div class="line">$ sqlplus / as sysdba</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">PLUGGABLE</span> <span class="keyword">DATABASE</span> PDB2 <span class="keyword">ADMIN</span> <span class="keyword">USER</span> PDB2ADMIN <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> &lt;<span class="keyword">password</span>&gt;</div><div class="line"><span class="keyword">ROLES</span>=(dba)</div><div class="line"><span class="keyword">DEFAULT</span> <span class="keyword">TABLESPACE</span> <span class="keyword">USERS</span></div><div class="line"><span class="keyword">DATAFILE</span> <span class="string">'/u01/app/oracle/oradata/ORCL/PDB2/users01.dbf'</span></div><div class="line"><span class="keyword">SIZE</span> <span class="number">250</span>M <span class="keyword">AUTOEXTEND</span> <span class="keyword">ON</span></div><div class="line"><span class="keyword">FILE_NAME_CONVERT</span>=(<span class="string">'/u01/app/oracle/oradata/ORCL/pdbseed/'</span>, <span class="string">'/u01/app/oracle/oradata/ORCL/PDB2/'</span>);</div><div class="line"></div><div class="line"><span class="comment">-- Open it</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">PLUGGABLE</span> <span class="keyword">DATABASE</span> PDB2 <span class="keyword">OPEN</span>;</div><div class="line"></div><div class="line"><span class="comment">-- Select service</span></div><div class="line">SQL&gt; SELECT name FROM v$services;</div></pre></td></tr></table></figure>
<h2 id="Clone"><a href="#Clone" class="headerlink" title="Clone"></a>Clone</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir $ORACLE_BASE/oradata/ORCL/PDB3</div><div class="line">sqlplus / as sysdba</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">PLUGGABLE</span> <span class="keyword">DATABASE</span> PDB3 <span class="keyword">FROM</span> PDB1 CREATE_FILE_DEST= <span class="string">'/u01/app/oracle/oradata/ORCL/PDB3'</span>;</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">PLUGGABLE</span> <span class="keyword">DATABASE</span> PDB3 <span class="keyword">OPEN</span>;</div></pre></td></tr></table></figure>
<h2 id="Unplugging-and-Plugging-a-PDB"><a href="#Unplugging-and-Plugging-a-PDB" class="headerlink" title="Unplugging and Plugging a PDB"></a>Unplugging and Plugging a PDB</h2><h3 id="Unplugging"><a href="#Unplugging" class="headerlink" title="Unplugging"></a>Unplugging</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">PLUGGABLE</span> <span class="keyword">DATABASE</span> PDB3 <span class="keyword">CLOSE</span> <span class="keyword">IMMEDIATE</span>;</div><div class="line"></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">PLUGGABLE</span> <span class="keyword">DATABASE</span> PDB3 UNPLUG <span class="keyword">INTO</span> <span class="string">'/u01/app/oracle/oradata/PDB3.xml'</span>;</div><div class="line"></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">PLUGGABLE</span> <span class="keyword">DATABASE</span> PDB3 <span class="keyword">KEEP</span> <span class="keyword">DATAFILES</span>;</div></pre></td></tr></table></figure>
<h3 id="check-compatiable"><a href="#check-compatiable" class="headerlink" title="check compatiable"></a>check compatiable</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">SQL&gt; set serveroutput on</div><div class="line"></div><div class="line"><span class="keyword">DECLARE</span></div><div class="line">compatible <span class="built_in">BOOLEAN</span> := <span class="literal">FALSE</span>;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">compatible := DBMS_PDB.CHECK_PLUG_COMPATIBILITY(</div><div class="line">           pdb_descr_file =&gt; <span class="string">'/u01/app/oracle/oradata/PDB3.xml'</span>);</div><div class="line">if compatible then</div><div class="line">DBMS_OUTPUT.PUT_LINE('PDB3 is compatible');</div><div class="line">else DBMS_OUTPUT.PUT_LINE('PDB3 is not compatible');</div><div class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</div><div class="line"><span class="keyword">END</span>;</div><div class="line"> /</div></pre></td></tr></table></figure>
<h3 id="Plugging"><a href="#Plugging" class="headerlink" title="Plugging"></a>Plugging</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">PLUGGABLE</span> <span class="keyword">DATABASE</span> HRPDB <span class="keyword">USING</span> <span class="string">'/u01/app/oracle/oradata/PDB3.xml'</span> <span class="keyword">NOCOPY</span> TEMPFILE <span class="keyword">REUSE</span>;</div></pre></td></tr></table></figure>
<h2 id="Drop"><a href="#Drop" class="headerlink" title="Drop"></a>Drop</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">PLUGGABLE</span> <span class="keyword">DATABASE</span> HRPDB <span class="keyword">CLOSE</span>;</div><div class="line"><span class="keyword">DROP</span> <span class="keyword">PLUGGABLE</span> <span class="keyword">DATABASE</span> HRPDB <span class="keyword">INCLUDING</span> <span class="keyword">DATAFILES</span>;</div></pre></td></tr></table></figure>
<h1 id="Database-Instance"><a href="#Database-Instance" class="headerlink" title="Database Instance"></a>Database Instance</h1><h2 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">SHUTDOWN</div><div class="line">SHUTDOWN ABORT</div><div class="line">SHUTDOWN IMMEDIATE</div><div class="line"></div><div class="line">STARTUP NOMOUNT;</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> <span class="keyword">MOUNT</span>;</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> <span class="keyword">OPEN</span>;</div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">PLUGGABLE</span> <span class="keyword">DATABASE</span> pdb1 <span class="keyword">OPEN</span>;</div></pre></td></tr></table></figure>
<h2 id="spfile-pfile"><a href="#spfile-pfile" class="headerlink" title="spfile/pfile"></a>spfile/pfile</h2><p>Load order:</p>
<ol>
<li>spfile</li>
<li>pfile</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Locate the default spfile for your database instance</span></div><div class="line"><span class="keyword">SHOW</span> PARAMETER <span class="keyword">spfile</span></div><div class="line"></div><div class="line"><span class="comment">-- create pfile from spfile</span></div><div class="line"><span class="keyword">CREATE</span> PFILE = <span class="string">'initORCL.ora'</span> <span class="keyword">FROM</span> <span class="keyword">SPFILE</span>;</div><div class="line"></div><div class="line"><span class="comment">-- check spfile</span></div><div class="line"><span class="comment">-- If the value is null, which means the database instance was started with a pfile.</span></div><div class="line"><span class="keyword">SHOW</span> PARAMETER <span class="keyword">spfile</span></div></pre></td></tr></table></figure>
<p>View parameters:</p>
<ul>
<li>V$PARAMETER</li>
<li>V$SPPARAMETER</li>
<li>V$PARAMETER2</li>
<li>V$SYSTEM_PARAMETER</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SHOW</span> PARAMETER db_name</div><div class="line"><span class="keyword">SHOW</span> PARAMETER db_domain</div><div class="line"><span class="keyword">SHOW</span> PARAMETER db_recovery_file_dest</div><div class="line"><span class="keyword">SHOW</span> PARAMETER sga</div><div class="line"><span class="keyword">SHOW</span> PARAMETER undo_tablespace</div><div class="line"><span class="keyword">SHOW</span> PARAMETER compatible</div><div class="line"><span class="keyword">SHOW</span> PARAMETER control_files</div><div class="line"><span class="keyword">SHOW</span> PARAMETER shared_pool_size</div><div class="line"><span class="keyword">SHOW</span> PARAMETER db_block_size</div><div class="line"><span class="keyword">SHOW</span> PARAMETER db_cache_size</div><div class="line"><span class="keyword">SHOW</span> PARAMETER undo_management</div><div class="line"><span class="keyword">SHOW</span> PARAMETER memory_target</div><div class="line"><span class="keyword">SHOW</span> PARAMETER memory_max_target</div><div class="line"><span class="keyword">SHOW</span> PARAMETER pga_aggregate_target</div></pre></td></tr></table></figure>
<h2 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- setup parameter</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">SESSION</span> <span class="keyword">SET</span> nls_date_format = <span class="string">'mon dd yyyy'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- update in both the database instance memory and in the spfile</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> job_queue_processes=<span class="number">15</span> <span class="keyword">SCOPE</span>=<span class="keyword">BOTH</span>;</div></pre></td></tr></table></figure>
<h2 id="Diagnostic"><a href="#Diagnostic" class="headerlink" title="Diagnostic"></a>Diagnostic</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, <span class="keyword">value</span> <span class="keyword">FROM</span> v$diag_info;</div></pre></td></tr></table></figure>
<h2 id="adrci"><a href="#adrci" class="headerlink" title="adrci"></a>adrci</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ adrci</div><div class="line">adrci&gt; SHOW ALERT</div><div class="line"></div><div class="line"><span class="comment"># Find the retention policy values</span></div><div class="line">adrci&gt; SET HOMEPATH diag/rdbms/orcl/ORCL</div><div class="line">adrci&gt; SELECT sizep_policy FROM adr_control_aux;</div><div class="line"></div><div class="line"><span class="comment"># Limit the target size for ADR ORCL diagnostics files to 200MB.</span></div><div class="line">adrci&gt; SET CONTROL (SIZEP_POLICY = 200000000)</div><div class="line">adrci&gt; SELECT sizep_policy FROM adr_control_aux;</div><div class="line"></div><div class="line"><span class="comment"># purge the ADR down to 5MB</span></div><div class="line"><span class="comment"># $ORACLE_BASE/diag/rdbms/orcl/ORCL</span></div><div class="line">adrci&gt; PURGE -size 5000000</div></pre></td></tr></table></figure>
<h2 id="Log-DDL"><a href="#Log-DDL" class="headerlink" title="Log DDL"></a>Log DDL</h2><p>Target file: <em>/u01/app/oracle/diag/rdbms/orcl/ORCL/log/ddl_ORCL.log</em></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- check enable/disable</span></div><div class="line">SQL&gt; SHOW PARAMETER enable_ddl_logging</div><div class="line"></div><div class="line"><span class="comment">-- enable it</span></div><div class="line">SQL&gt; ALTER SESSION SET enable_ddl_logging = TRUE;</div></pre></td></tr></table></figure>
<h1 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h1><p>Two files:</p>
<ul>
<li>listeners.ora: lnsrctl used</li>
<li>tnsnames.ora: Network configuration file. <ul>
<li>/u01/app/oracle/product/12.2.0/dbhome_1/network/admin/tnsnames.ora</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SQL&gt; SHOW PARAMETER INSTANCE_NAME</div><div class="line">SQL&gt; SHOW PARAMETER SERVICE_NAMES</div><div class="line">SQL&gt; SHOW PARAMETER LOCAL_LISTENER</div><div class="line">SQL&gt; SHOW PARAMETER REMOTE_LISTENER</div></pre></td></tr></table></figure>
<h2 id="lsnrctl"><a href="#lsnrctl" class="headerlink" title="lsnrctl"></a>lsnrctl</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">lsnrctl</div><div class="line"></div><div class="line">LSNRCTL&gt; show current_listener</div><div class="line">LSNRCTL&gt; status</div><div class="line">LSNRCTL&gt; services</div></pre></td></tr></table></figure>
<h2 id="Dynamic-Listener"><a href="#Dynamic-Listener" class="headerlink" title="Dynamic Listener"></a>Dynamic Listener</h2><p>create a listener, named LISTENER2, that listens on the non-default port 1561 for all database<br>services</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tnsnames.ora Network Configuration File</span></div><div class="line">LISTENER2 =</div><div class="line">  (ADDRESS = (PROTOCOL = TCP)(HOST = 12cr2db.example.com)(PORT = 1561))</div><div class="line"></div><div class="line">LISTENER_ORCL =</div><div class="line">  (ADDRESS = (PROTOCOL = TCP)(HOST = 12cr2db.example.com )(PORT = 1521))</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># listener.ora. used for tnsrctl</span></div><div class="line">LISTENER2 =</div><div class="line">  (DESCRIPTION =</div><div class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = 12cr2db.example.com)(PORT = 1561))</div><div class="line">  )</div><div class="line">ADR_BASE_LISTENER2 = /u01/app/oracle</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SQL&gt; SHOW PARAMETER local_listener</div><div class="line">SQL&gt; SELECT isses_modifiable, issys_modifiable FROM v$parameter WHERE name='local_listener';</div><div class="line">SQL&gt; ALTER SYSTEM SET local_listener="LISTENER_ORCL,LISTENER2" SCOPE=BOTH;</div><div class="line"></div><div class="line"><span class="comment">-- Start LISTENER2</span></div><div class="line">LSNRCTL&gt; start LISTENER2</div></pre></td></tr></table></figure>
<h2 id="Static-Listener-for-a-PDB"><a href="#Static-Listener-for-a-PDB" class="headerlink" title="Static Listener for a PDB"></a>Static Listener for a PDB</h2><p>create a listener named LISTENER_PDB1 that listens on the non-default port 1562 for the<br>PDB1.example.com service</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># listener.ora</span></div><div class="line">LISTENER_PDB1 =</div><div class="line">    (DESCRIPTION =</div><div class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = 12cr2db.example.com)(PORT = 1562))</div><div class="line">      )</div><div class="line">SID_LIST_LISTENER_PDB1 =</div><div class="line"> (SID_LIST =</div><div class="line">    (SID_DESC =</div><div class="line">        (GLOBAL_DBNAME = PDB1.example.com)</div><div class="line">        (SID_NAME = ORCL)</div><div class="line">        (ORACLE_HOME = /u01/app/oracle/product/12.2.0/dbhome_1)</div><div class="line">    )</div><div class="line">)</div><div class="line"></div><div class="line">lsnrctl</div><div class="line">LSNRCTL&gt; start LISTENER_PDB1</div></pre></td></tr></table></figure>
<h2 id="TNS-name"><a href="#TNS-name" class="headerlink" title="TNS name"></a>TNS name</h2><p>$ORACLE_HOME/network/admin/tnsnames.ora</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">MYPDB1 =</div><div class="line">  (DESCRIPTION =</div><div class="line">    (ADDRESS_LIST =</div><div class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = 12cr2db.example.com)(PORT = 1521))</div><div class="line">    )</div><div class="line">    (CONNECT_DATA =</div><div class="line">      (SERVICE_NAME = PDB1.example.com )</div><div class="line">    )</div><div class="line">)</div><div class="line"></div><div class="line">tnsping MyPDB1</div></pre></td></tr></table></figure>
<h1 id="Privilege"><a href="#Privilege" class="headerlink" title="Privilege"></a>Privilege</h1><h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- List common users</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> username <span class="keyword">FROM</span> dba_users <span class="keyword">WHERE</span> common=<span class="string">'YES'</span></div><div class="line"></div><div class="line"><span class="comment">-- List PDB users</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> username <span class="keyword">FROM</span> dba_users <span class="keyword">WHERE</span> common=<span class="string">'NO'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- list privileges</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> session_privs;</div><div class="line"><span class="comment">-- list roles</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> session_roles;</div><div class="line"></div><div class="line"><span class="comment">-- List system privilege granted</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dba_sys_privs <span class="keyword">WHERE</span> grantee=<span class="string">'PDBADMIN'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- list role granted for a specific user</span></div><div class="line"><span class="keyword">SELECT</span> granted_role, admin_option, default_role <span class="keyword">FROM</span> cdb_role_privs <span class="keyword">WHERE</span> grantee=<span class="string">'PDBADMIN'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- profile details</span></div><div class="line"><span class="keyword">SELECT</span> resource_type, resource_name, <span class="keyword">limit</span> <span class="keyword">FROM</span> dba_profiles <span class="keyword">WHERE</span> profile=<span class="string">'HRPROFILE'</span>;</div></pre></td></tr></table></figure>
<h2 id="User"><a href="#User" class="headerlink" title="User"></a>User</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- create a common user</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> c##CDB_ADMIN1 <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> &lt;<span class="keyword">password</span>&gt; <span class="keyword">CONTAINER</span>=ALL <span class="keyword">DEFAULT</span> <span class="keyword">TABLESPACE</span> <span class="keyword">users</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLESPACE</span> temp <span class="keyword">ACCOUNT</span> <span class="keyword">UNLOCK</span>;</div><div class="line"></div><div class="line"><span class="comment">-- Create an application user</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> INVENTORY <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> &lt;<span class="keyword">password</span>&gt; <span class="keyword">DEFAULT</span> <span class="keyword">TABLESPACE</span> <span class="keyword">users</span> <span class="keyword">QUOTA</span> <span class="keyword">UNLIMITED</span> <span class="keyword">ON</span> <span class="keyword">users</span>;</div><div class="line"></div><div class="line"><span class="comment">-- Grant privilege</span></div><div class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">SESSION</span>, dba, <span class="keyword">sysdba</span> <span class="keyword">TO</span> c##CDB_ADMIN1 <span class="keyword">CONTAINER</span>=ALL;</div><div class="line"><span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">SESSION</span> <span class="keyword">TO</span> INVENTORY;</div></pre></td></tr></table></figure>
<h2 id="Role"><a href="#Role" class="headerlink" title="Role"></a>Role</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- grant a role to user</span></div><div class="line"><span class="keyword">GRANT</span> DBA <span class="keyword">TO</span> PDBADMIN;</div><div class="line"></div><div class="line"><span class="comment">-- create a role</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">role</span> <span class="string">"HRCLERK"</span> <span class="keyword">NOT</span> <span class="keyword">IDENTIFIED</span>;</div><div class="line"><span class="keyword">grant</span> <span class="keyword">UPDATE</span> <span class="keyword">on</span> <span class="string">'HR'</span>.<span class="string">'EMPLOYEES'</span> <span class="keyword">to</span> <span class="string">'HRCLERK'</span>;</div><div class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span> <span class="keyword">on</span> <span class="string">'HR'</span>.<span class="string">'EMPLOYEES'</span> <span class="keyword">to</span> <span class="string">'HRCLERK'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- alter default role</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> JGOODMAN <span class="keyword">DEFAULT</span> <span class="keyword">ROLE</span> HRCLERK;</div></pre></td></tr></table></figure>
<h2 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> profile <span class="string">'HRPROFILE'</span> <span class="keyword">limit</span></div><div class="line">        <span class="keyword">cpu_per_session</span> <span class="keyword">UNLIMITED</span></div><div class="line">        <span class="keyword">cpu_per_call</span> <span class="keyword">UNLIMITED</span></div><div class="line">        <span class="keyword">connect_time</span> <span class="keyword">UNLIMITED</span></div><div class="line">        <span class="keyword">idle_time</span> <span class="number">60</span></div><div class="line">        <span class="keyword">sessions_per_user</span> <span class="keyword">UNLIMITED</span></div><div class="line">        password_life_time <span class="keyword">UNLIMITED</span></div><div class="line">        ...</div><div class="line"></div><div class="line"><span class="comment">-- update a profile</span></div><div class="line"><span class="keyword">ALTER</span> PROFILE hrprofile <span class="keyword">LIMIT</span> INACTIVE_ACCOUNT_TIME <span class="number">10</span>;</div></pre></td></tr></table></figure>
<h2 id="Audit-Policy"><a href="#Audit-Policy" class="headerlink" title="Audit Policy"></a>Audit Policy</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Verify that unified auditing is now enabled</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v$<span class="keyword">option</span> <span class="keyword">WHERE</span> parameter = <span class="string">'Unified Auditing'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- create policy</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">AUDIT</span> <span class="keyword">POLICY</span> drop_pol <span class="keyword">PRIVILEGES</span> <span class="keyword">DROP</span> <span class="keyword">ANY</span> <span class="keyword">TABLE</span>;</div><div class="line"></div><div class="line"><span class="comment">-- Verify that the audit policy is enabled for users granted the DBA role.</span></div><div class="line"><span class="keyword">SELECT</span> entity_name, entity_type, enabled_option <span class="keyword">FROM</span> audit_unified_enabled_policies <span class="keyword">WHERE</span> policy_name = <span class="string">'DROP_POL'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- View audit log</span></div><div class="line"><span class="keyword">SELECT</span> dbusername, action_name, object_name <span class="keyword">FROM</span> unified_audit_trail <span class="keyword">WHERE</span> dbusername = <span class="string">'PDBADMIN'</span> <span class="keyword">AND</span> action_name = <span class="string">'DROP TABLE'</span></div><div class="line"></div><div class="line"><span class="comment">-- diable policy</span></div><div class="line"><span class="keyword">NOAUDIT</span> <span class="keyword">POLICY</span> drop_pol <span class="keyword">BY</span> <span class="keyword">USERS</span> <span class="keyword">WITH</span> GRANTED <span class="keyword">ROLES</span> dba;</div><div class="line"></div><div class="line"><span class="comment">-- drop policy</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">AUDIT</span> <span class="keyword">POLICY</span> drop_pol;</div></pre></td></tr></table></figure>
<h1 id="Tablespace"><a href="#Tablespace" class="headerlink" title="Tablespace"></a>Tablespace</h1><h2 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h2><p>Tablespace information:</p>
<ul>
<li>DBA_TABLESPACES</li>
<li>V$TABLESPACE</li>
</ul>
<p>Data file information:</p>
<ul>
<li>DBA_DATA_FILES</li>
<li>V$DATAFILE</li>
</ul>
<p>Temp file information:</p>
<ul>
<li>DBA_TEMP_FILES</li>
<li>V$TEMPFILE</li>
</ul>
<p>Tables in a tablespace:</p>
<ul>
<li>ALL_TABLES</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- list tablespaces</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> tablespace_name <span class="keyword">FROM</span> dba_tablespaces;</div><div class="line"></div><div class="line"><span class="comment">-- find out tablespace contains HR schema</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> tablespace_name <span class="keyword">FROM</span> all_tables <span class="keyword">WHERE</span> owner=<span class="string">'HR'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- select tables name</span></div><div class="line"><span class="keyword">SELECT</span> table_name <span class="keyword">FROM</span> all_tables <span class="keyword">WHERE</span> tablespace_name=<span class="string">'INVENTORY'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- grab tablespace details</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">status</span>, <span class="keyword">contents</span>, <span class="keyword">logging</span>, plugged_in, <span class="keyword">bigfile</span>, extent_management, allocation_type <span class="keyword">FROM</span> dba_tablespaces <span class="keyword">where</span> tablespace_name=<span class="string">'SYSAUX'</span>;</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v$<span class="keyword">tablespace</span> <span class="keyword">WHERE</span> <span class="keyword">name</span>=<span class="string">'SYSAUX'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- data file</span></div><div class="line"><span class="keyword">SELECT</span> file_name, autoextensible, <span class="keyword">bytes</span>, maxbytes, user_bytes <span class="keyword">FROM</span> dba_data_files <span class="keyword">WHERE</span> tablespace_name=<span class="string">'SYSAUX'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- check out index</span></div><div class="line"><span class="keyword">SELECT</span> index_name <span class="keyword">FROM</span> all_indexes <span class="keyword">WHERE</span> tablespace_name=<span class="string">'SYSAUX'</span> <span class="keyword">AND</span> owner=<span class="string">'HR'</span>;</div></pre></td></tr></table></figure>
<h2 id="Maintain"><a href="#Maintain" class="headerlink" title="Maintain"></a>Maintain</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- Create tablespace</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">SMALLFILE</span> <span class="keyword">TABLESPACE</span> INVENTORY</div><div class="line"><span class="keyword">DATAFILE</span> <span class="string">'/u01/app/oracle/oradata/ORCL/PDB1/INVENTORY01.DBF'</span> <span class="keyword">SIZE</span> <span class="number">5242880</span> <span class="keyword">DEFAULT</span> <span class="keyword">NOCOMPRESS</span></div><div class="line"><span class="keyword">ONLINE</span></div><div class="line"><span class="keyword">SEGMENT</span> <span class="keyword">SPACE</span> <span class="keyword">MANAGEMENT</span> <span class="keyword">AUTO</span></div><div class="line"><span class="keyword">EXTENT</span> <span class="keyword">MANAGEMENT</span> <span class="keyword">LOCAL</span> <span class="keyword">AUTOALLOCATE</span>;</div><div class="line"></div><div class="line"><span class="comment">-- Resize file</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> <span class="keyword">DATAFILE</span> <span class="string">'/u01/app/oracle/oradata/ORCL/PDB1/INVENTORY01.DBF'</span> <span class="keyword">RESIZE</span> <span class="number">40</span>M;</div><div class="line"></div><div class="line"><span class="comment">-- Add data file</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLESPACE</span> <span class="string">"INVENTORY"</span> <span class="keyword">ADD</span> <span class="keyword">DATAFILE</span> <span class="string">'/u01/app/oracle/oradata/ORCL/PDB1/INVENTORY02.DBF'</span> <span class="keyword">SIZE</span> <span class="number">30</span>M <span class="keyword">AUTOEXTEND</span> <span class="keyword">OFF</span>;</div><div class="line"></div><div class="line"><span class="comment">-- Relocating an online data file</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> <span class="keyword">MOVE</span> <span class="keyword">DATAFILE</span> <span class="string">'/disk1/myexample01.dbf'</span> <span class="keyword">TO</span> <span class="string">'/disk2/myexample01.dbf'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- Rename</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> <span class="keyword">MOVE</span> <span class="keyword">DATAFILE</span> <span class="string">'/disk1/myexample01.dbf'</span> <span class="keyword">TO</span> <span class="string">'/disk1/myexample02.dbf'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- Delete</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLESPACE</span> inventory <span class="keyword">INCLUDING</span> <span class="keyword">CONTENTS</span> <span class="keyword">AND</span> <span class="keyword">DATAFILES</span>;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> database </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Elastic Search - Getting Start 3]]></title>
      <url>http://hczhang.com/2019/02/12/Elastic-Search-3/</url>
      <content type="html"><![CDATA[<h1 id="1-Search-API"><a href="#1-Search-API" class="headerlink" title="1. Search API"></a>1. Search API</h1><ul>
<li>sending search parameters through the <em>REST request URI</em></li>
<li>sending search parameters through the <em>REST request body</em></li>
</ul>
<a id="more"></a>
<h2 id="Request-UI"><a href="#Request-UI" class="headerlink" title="Request UI"></a>Request UI</h2><p>The REST API for search is accessible from the _search endpoint. This example returns all documents in the bank index:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/bank/_search?q=*&amp;sort=account_number:asc&amp;pretty"</span></div></pre></td></tr></table></figure>
<ul>
<li>_search : search in the bank index</li>
<li>q=* : to match all documents in the index</li>
<li>sort=account_number:asc : sort the results using the account_number field of each document in an ascending order</li>
<li>pretty : return pretty-printed JSON results</li>
</ul>
<h2 id="Request-Body"><a href="#Request-Body" class="headerlink" title="Request Body"></a>Request Body</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/bank/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">  "query": &#123; "match_all": &#123;&#125; &#125;,</span></div><div class="line"><span class="string">  "sort": [</span></div><div class="line"><span class="string">    &#123; "account_number": "asc" &#125;</span></div><div class="line"><span class="string">  ]</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<h1 id="2-Query-language"><a href="#2-Query-language" class="headerlink" title="2. Query language"></a>2. Query language</h1><p>Search all</p>
<p>size defaults to 10</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/bank/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">  "query": &#123; "match_all": &#123;&#125; &#125;,</span></div><div class="line"><span class="string">  "size": 1</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<p>from is 0-based</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/bank/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">  "query": &#123; "match_all": &#123;&#125; &#125;,</span></div><div class="line"><span class="string">  "from": 10,</span></div><div class="line"><span class="string">  "size": 10</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<p>Sort</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/bank/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">  "query": &#123; "match_all": &#123;&#125; &#125;,</span></div><div class="line"><span class="string">  "from": 10,</span></div><div class="line"><span class="string">  "size": 10</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<h1 id="3-Populate-Search"><a href="#3-Populate-Search" class="headerlink" title="3. Populate Search"></a>3. Populate Search</h1><p>Return two fields, account_number and balance (inside of _source)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/bank/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">  "query": &#123; "match_all": &#123;&#125; &#125;,</span></div><div class="line"><span class="string">  "_source": ["account_number", "balance"]</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<h2 id="Match-Query"><a href="#Match-Query" class="headerlink" title="Match Query"></a>Match Query</h2><p>Returns the account numbered 20</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/bank/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">   "query": &#123; "match": &#123; "account_number": 20 &#125; &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<p>Returns all accounts containing the term “mill”</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/bank/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">   "query": &#123; "match": &#123; "address": "mill" &#125; &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<p>Returns all accounts containing the term “mill” or “lane” in the address</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/bank/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">   "query": &#123; "match": &#123; "address": "mill lane" &#125; &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<p>A variant of match (match_phrase)<br>Returns all accounts containing the phrase “mill lane” in the address</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/bank/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">   "query": &#123; "match_phrase": &#123; "address": "mill lane" &#125; &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<h2 id="Bool-query"><a href="#Bool-query" class="headerlink" title="Bool query"></a>Bool query</h2><p>The bool query allows us to compose smaller queries into bigger queries using boolean logic.</p>
<p>the bool <em>must</em> clause specifies all the queries that must be true for a document to be considered a match</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/bank/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">   "query": &#123;</span></div><div class="line"><span class="string">    "bool": &#123;</span></div><div class="line"><span class="string">      "must": [</span></div><div class="line"><span class="string">        &#123; "match": &#123; "address": "mill" &#125; &#125;,</span></div><div class="line"><span class="string">        &#123; "match": &#123; "address": "lane" &#125; &#125;</span></div><div class="line"><span class="string">      ]</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">  &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<p>composes two match queries and returns all accounts containing “mill” or “lane” in the address</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/bank/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">   "query": &#123;</span></div><div class="line"><span class="string">    "bool": &#123;</span></div><div class="line"><span class="string">      "should": [</span></div><div class="line"><span class="string">        &#123; "match": &#123; "address": "mill" &#125; &#125;,</span></div><div class="line"><span class="string">        &#123; "match": &#123; "address": "lane" &#125; &#125;</span></div><div class="line"><span class="string">      ]</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">  &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<p>Composes two match queries and returns all accounts that contain neither “mill” nor “lane” in the address</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/bank/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">   "query": &#123;</span></div><div class="line"><span class="string">    "bool": &#123;</span></div><div class="line"><span class="string">      "must_not": [</span></div><div class="line"><span class="string">        &#123; "match": &#123; "address": "mill" &#125; &#125;,</span></div><div class="line"><span class="string">        &#123; "match": &#123; "address": "lane" &#125; &#125;</span></div><div class="line"><span class="string">      ]</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">  &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<p>returns all accounts of anybody who is 40 years old but doesn’t live in ID(aho)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/bank/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    "query": &#123;</span></div><div class="line"><span class="string">        "bool": &#123;</span></div><div class="line"><span class="string">        "must": [</span></div><div class="line"><span class="string">            &#123; "match": &#123; "age": "40" &#125; &#125;</span></div><div class="line"><span class="string">        ],</span></div><div class="line"><span class="string">        "must_not": [</span></div><div class="line"><span class="string">            &#123; "match": &#123; "state": "ID" &#125; &#125;</span></div><div class="line"><span class="string">        ]</span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<h1 id="4-Filter"><a href="#4-Filter" class="headerlink" title="4. Filter"></a>4. Filter</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/bank/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    "query": &#123;</span></div><div class="line"><span class="string">        "bool": &#123;</span></div><div class="line"><span class="string">            "must": &#123; "match_all": &#123;&#125; &#125;,</span></div><div class="line"><span class="string">            "filter": &#123;</span></div><div class="line"><span class="string">                "range": &#123;</span></div><div class="line"><span class="string">                    "balance": &#123;</span></div><div class="line"><span class="string">                        "gte": 20000,</span></div><div class="line"><span class="string">                        "lte": 30000</span></div><div class="line"><span class="string">                    &#125;</span></div><div class="line"><span class="string">                &#125;</span></div><div class="line"><span class="string">            &#125;</span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<h1 id="5-Aggregations"><a href="#5-Aggregations" class="headerlink" title="5. Aggregations"></a>5. Aggregations</h1><p>We set size=0 to not show search hits because we only want to see the aggregation results in the response.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/bank/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    "size": 0,</span></div><div class="line"><span class="string">    "aggs": &#123;</span></div><div class="line"><span class="string">        "group_by_state": &#123;</span></div><div class="line"><span class="string">            "terms": &#123;</span></div><div class="line"><span class="string">                "field": "state.keyword"</span></div><div class="line"><span class="string">            &#125;</span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<p>calculates the average account balance by state<br>only for the top 10 states sorted by count in descending order<br>sort on the average balance in descending order</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/bank/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    "size": 0,</span></div><div class="line"><span class="string">    "aggs": &#123;</span></div><div class="line"><span class="string">        "group_by_state": &#123;</span></div><div class="line"><span class="string">            "terms": &#123;</span></div><div class="line"><span class="string">                "field": "state.keyword",</span></div><div class="line"><span class="string">                "order": &#123;</span></div><div class="line"><span class="string">                    "average_balance": "desc"</span></div><div class="line"><span class="string">                &#125;</span></div><div class="line"><span class="string">            &#125;,</span></div><div class="line"><span class="string">            "aggs": &#123;</span></div><div class="line"><span class="string">                "average_balance": &#123;</span></div><div class="line"><span class="string">                    "avg": &#123;</span></div><div class="line"><span class="string">                        "field": "balance"</span></div><div class="line"><span class="string">                    &#125;</span></div><div class="line"><span class="string">                &#125;</span></div><div class="line"><span class="string">            &#125;</span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>
<p>group by age brackets (ages 20-29, 30-39, and 40-49), then by gender, and then finally get the average account balance, per age bracket, per gender</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/bank/_search"</span> -H <span class="string">'Content-Type: application/json'</span> -d<span class="string">'</span></div><div class="line"><span class="string">&#123;</span></div><div class="line"><span class="string">    "size": 0,</span></div><div class="line"><span class="string">    "aggs": &#123;</span></div><div class="line"><span class="string">        "group_by_age": &#123;</span></div><div class="line"><span class="string">            "range": &#123;</span></div><div class="line"><span class="string">                "field": "age",</span></div><div class="line"><span class="string">                "ranges": [</span></div><div class="line"><span class="string">                &#123;</span></div><div class="line"><span class="string">                    "from": 20,</span></div><div class="line"><span class="string">                    "to": 30</span></div><div class="line"><span class="string">                &#125;,</span></div><div class="line"><span class="string">                &#123;</span></div><div class="line"><span class="string">                    "from": 30,</span></div><div class="line"><span class="string">                    "to": 40</span></div><div class="line"><span class="string">                &#125;,</span></div><div class="line"><span class="string">                &#123;</span></div><div class="line"><span class="string">                    "from": 40,</span></div><div class="line"><span class="string">                    "to": 50</span></div><div class="line"><span class="string">                &#125;</span></div><div class="line"><span class="string">                ]</span></div><div class="line"><span class="string">            &#125;,</span></div><div class="line"><span class="string">            "aggs": &#123;</span></div><div class="line"><span class="string">                "group_by_gender": &#123;</span></div><div class="line"><span class="string">                    "terms": &#123;</span></div><div class="line"><span class="string">                        "field": "gender.keyword"</span></div><div class="line"><span class="string">                    &#125;,</span></div><div class="line"><span class="string">                    "aggs": &#123;</span></div><div class="line"><span class="string">                        "average_balance": &#123;</span></div><div class="line"><span class="string">                            "avg": &#123;</span></div><div class="line"><span class="string">                                "field": "balance"</span></div><div class="line"><span class="string">                            &#125;</span></div><div class="line"><span class="string">                        &#125;</span></div><div class="line"><span class="string">                    &#125;</span></div><div class="line"><span class="string">                &#125;</span></div><div class="line"><span class="string">            &#125;</span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">'</span></div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> architecture </tag>
            
            <tag> elastic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Elastic Search - Getting Start 2]]></title>
      <url>http://hczhang.com/2019/02/12/Elastic-Search-2/</url>
      <content type="html"><![CDATA[<h1 id="1-Health-API"><a href="#1-Health-API" class="headerlink" title="1. Health API"></a>1. Health API</h1><h2 id="Health-Check"><a href="#Health-Check" class="headerlink" title="Health Check"></a>Health Check</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X GET <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/_cat/health?v"</span></div></pre></td></tr></table></figure>
<ul>
<li>Green - everything is good (cluster is fully functional)<ul>
<li>Note: When a cluster is red, it will continue to serve search requests from the available shards but you will likely need to fix it ASAP since there are unassigned shards.</li>
</ul>
</li>
<li>Yellow - all data is available but some replicas are not yet allocated (cluster is fully functional)</li>
<li>Red - some data is not available for whatever reason (cluster is partially functional)</li>
</ul>
<a id="more"></a>
<h2 id="List-Nodes"><a href="#List-Nodes" class="headerlink" title="List Nodes"></a>List Nodes</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/_cat/nodes?v"</span></div></pre></td></tr></table></figure>
<h1 id="2-Indices-API"><a href="#2-Indices-API" class="headerlink" title="2. Indices API"></a>2. Indices API</h1><h2 id="2-1-List"><a href="#2-1-List" class="headerlink" title="2.1 List"></a>2.1 List</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/_cat/indices?v"</span></div></pre></td></tr></table></figure>
<h2 id="2-2-Create"><a href="#2-2-Create" class="headerlink" title="2.2 Create"></a>2.2 Create</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -X PUT <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/customer?pretty"</span></div><div class="line">curl <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/_cat/indices?v"</span></div></pre></td></tr></table></figure>
<h2 id="2-3-Delete"><a href="#2-3-Delete" class="headerlink" title="2.3 Delete"></a>2.3 Delete</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -X DELETE <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/customer?pretty"</span></div><div class="line">curl <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/_cat/indices?v"</span></div></pre></td></tr></table></figure>
<h1 id="3-Document-API"><a href="#3-Document-API" class="headerlink" title="3. Document API"></a>3. Document API</h1><h2 id="3-1-Query"><a href="#3-1-Query" class="headerlink" title="3.1 Query"></a>3.1 Query</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/movies/movie/1"</span></div><div class="line"></div><div class="line">curl <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/movies/_search?q=Dark"</span></div></pre></td></tr></table></figure>
<p>have another posts talk about <strong>query</strong></p>
<h2 id="3-2-Create"><a href="#3-2-Create" class="headerlink" title="3.2 Create"></a>3.2 Create</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -X PUT <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/movies/movie/109487"</span> -H <span class="string">'Content-Type: application/json'</span> -d <span class="string">'&#123; "genre": ["IMAX", "Sci-Fi"], "title": "Interstellar", "year": 2014 &#125;'</span></div><div class="line">curl <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/movies/movie/109487"</span></div></pre></td></tr></table></figure>
<h2 id="3-3-Update"><a href="#3-3-Update" class="headerlink" title="3.3 Update"></a>3.3 Update</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X POST <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/movies/movie/109487/_update"</span> -H <span class="string">'Content-Type: application/json'</span> -d <span class="string">'&#123; "doc": &#123; "title": "Interstellar" &#125; &#125;'</span></div></pre></td></tr></table></figure>
<p>Every document has a _version field<br>Elasticsearch documents are immutable.</p>
<ul>
<li>a new document is created with an incremented _version</li>
<li>the old doc is marked for deletion</li>
</ul>
<h2 id="3-4-Delete"><a href="#3-4-Delete" class="headerlink" title="3.4 Delete"></a>3.4 Delete</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -X DELETE <span class="string">"http://&#123;&#123;host&#125;&#125;:9200/movies/movie/109487"</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> architecture </tag>
            
            <tag> elastic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Elastic Search - Getting Start 1]]></title>
      <url>http://hczhang.com/2018/10/10/Elastic-Search-1/</url>
      <content type="html"><![CDATA[<h1 id="1-Overview"><a href="#1-Overview" class="headerlink" title="1. Overview"></a>1. Overview</h1><h2 id="Upside"><a href="#Upside" class="headerlink" title="Upside"></a>Upside</h2><ul>
<li>Easy to setup</li>
<li>Abstracts away low level</li>
<li>Scales beautifully</li>
<li>Feature rich (out of box)</li>
</ul>
<h2 id="Downside"><a href="#Downside" class="headerlink" title="Downside"></a>Downside</h2><ul>
<li>Poorly managed indeces</li>
<li>Inefficient queries</li>
<li>Web facing clasters</li>
<li>Used as primary data store</li>
</ul>
<blockquote>
<p>Elasticsearch is Robust, Highly Available, Distributed Search and Analytics Engine.</p>
</blockquote>
<a id="more"></a>
<h1 id="2-Goals"><a href="#2-Goals" class="headerlink" title="2. Goals"></a>2. Goals</h1><ul>
<li>Lightning Fast Search<ul>
<li>Scalable</li>
<li>Highly avaliable</li>
<li>Distributed. no Single Point failure</li>
</ul>
</li>
<li>Analytics Engine<ul>
<li>Aggregations</li>
<li>Log analysis</li>
<li>Geo-location data</li>
<li>Machine learning</li>
</ul>
</li>
<li>Near Real-Time (NRT)<ul>
<li>Add Doc -&gt; Inverted Index -&gt; Available for search</li>
</ul>
</li>
<li>Powerful Rest API<ul>
<li>Search API: localhost:9000/index_search?q=*&amp;pretty</li>
<li>DSL</li>
</ul>
</li>
</ul>
<h1 id="3-Install"><a href="#3-Install" class="headerlink" title="3. Install"></a>3. Install</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attr">version:</span> <span class="string">'3'</span></div><div class="line"></div><div class="line"><span class="attr">services:</span></div><div class="line"><span class="attr">  elasticsearch:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">docker.elastic.co/elasticsearch/elasticsearch:6.7.1</span></div><div class="line"><span class="attr">    environment:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">cluster.name=docker-cluster</span></div><div class="line"><span class="bullet">      -</span> <span class="string">bootstrap.memory_lock=true</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span></div><div class="line"><span class="attr">    ulimits:</span></div><div class="line"><span class="attr">      memlock:</span></div><div class="line"><span class="attr">        soft:</span> <span class="bullet">-1</span></div><div class="line"><span class="attr">        hard:</span> <span class="bullet">-1</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"9200:9200"</span></div><div class="line"><span class="attr">  kibana:</span></div><div class="line"><span class="attr">    image:</span> <span class="string">docker.elastic.co/kibana/kibana:6.7.1</span></div><div class="line"><span class="attr">    ports:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">"5601:5601"</span></div></pre></td></tr></table></figure>
<h1 id="4-Terms"><a href="#4-Terms" class="headerlink" title="4. Terms"></a>4. Terms</h1><h2 id="4-1-Compare-to-RDBMS"><a href="#4-1-Compare-to-RDBMS" class="headerlink" title="4.1 Compare to RDBMS"></a>4.1 Compare to RDBMS</h2><table>
<thead>
<tr>
<th>Relationship DB</th>
<th>Elasticsearch</th>
</tr>
</thead>
<tbody>
<tr>
<td>database</td>
<td>index</td>
</tr>
<tr>
<td>table</td>
<td>type</td>
</tr>
<tr>
<td>row</td>
<td>document</td>
</tr>
<tr>
<td>column</td>
<td>field</td>
</tr>
</tbody>
</table>
<h2 id="4-2-Index"><a href="#4-2-Index" class="headerlink" title="4.2 Index"></a>4.2 Index</h2><blockquote>
<p>An Index is a Logical Namespace that points to 1 or more Shards in an Elasticsearch Cluster</p>
</blockquote>
<p>Think about <em>Shards</em> as disk partition, or container of data.<br>Index is where data are stored in form of document</p>
<ul>
<li>Index is broken into shards</li>
<li>Shards are containers for data</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Create a new index</span></div><div class="line">http PUT http://slc10vfs:9200/my_test_index</div><div class="line"></div><div class="line"><span class="comment"># Get index info</span></div><div class="line">http http://slc10vfs:9200/my_test_index?pretty</div><div class="line"></div><div class="line"><span class="comment"># Delete an index</span></div><div class="line">http DELETE http://slc10vfs:9200/my_test_index</div></pre></td></tr></table></figure>
<h2 id="4-3-Type"><a href="#4-3-Type" class="headerlink" title="4.3 Type"></a>4.3 Type</h2><blockquote>
<p>A Representation of a class of similar Documents</p>
</blockquote>
<p>For example</p>
<p><code>index/type/document</code></p>
<p>One type per index</p>
<h2 id="4-4-Document"><a href="#4-4-Document" class="headerlink" title="4.4 Document"></a>4.4 Document</h2><blockquote>
<p>A Document in Elasticsearch is an Individual Entry that is the Primary method for adding data.</p>
</blockquote>
<h2 id="4-5-Field"><a href="#4-5-Field" class="headerlink" title="4.5 Field"></a>4.5 Field</h2><blockquote>
<p>A Field is an Individual Entry in an Elasticsearch Document</p>
</blockquote>
<h2 id="4-6-Example"><a href="#4-6-Example" class="headerlink" title="4.6 Example"></a>4.6 Example</h2><table>
<thead>
<tr>
<th>Object</th>
<th>Elasticsearch</th>
</tr>
</thead>
<tbody>
<tr>
<td>Movies</td>
<td>index</td>
</tr>
<tr>
<td>Movie</td>
<td>type</td>
</tr>
<tr>
<td>Row</td>
<td>Document</td>
</tr>
<tr>
<td>TITLE :: “text”</td>
<td>field</td>
</tr>
<tr>
<td>RATING :: “keyword”</td>
<td>field</td>
</tr>
<tr>
<td>ACTOR_COUNT :: “int”</td>
<td>field</td>
</tr>
</tbody>
</table>
<h2 id="4-7-Mapping"><a href="#4-7-Mapping" class="headerlink" title="4.7 Mapping"></a>4.7 Mapping</h2><p>A mapping is a schema definition</p>
<ul>
<li>field types<ul>
<li>text, keyword, byte, short, integer, long, float, double, boolean, date</li>
</ul>
</li>
<li>field index<ul>
<li>do you want this field to be queryable? ture/false</li>
</ul>
</li>
<li>field analyzer<ul>
<li>define our tokenizer and token filter. standard / whitespace / simple/ english<ul>
<li>characher filters: remove html encoding convert &amp; to and</li>
<li>tokenizer: split strings on whitespace / punctuation/ non-letter</li>
<li>token filter: lowercasing, stemming, synonyms, stopwords</li>
<li>standard: splits on word boundaries</li>
<li>simple: splits on anything isn’t a letter, and lowercases</li>
<li>whitespace: splits on whitespace but doesn’t lowercase</li>
<li>language: i.e. engligh. accounts for language-specific stopwords and stemming</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="analyzer"><a href="#analyzer" class="headerlink" title="analyzer"></a>analyzer</h3><p>Sometimes text fields should be exact-match</p>
<ul>
<li>use <strong>keyword</strong> mapping type to suppress analyzing (eact match only)</li>
<li>use <strong>text</strong> type to allow analyzing</li>
</ul>
<p>search on analyzed field will return anything remotely relevent</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">PUT my_movies</div><div class="line">&#123;</div><div class="line">    <span class="attr">"mappings"</span>: &#123;</div><div class="line">        <span class="attr">"movie"</span>: &#123;</div><div class="line">            <span class="attr">"properties"</span>: &#123;</div><div class="line">                <span class="attr">"id"</span>: &#123; <span class="attr">"type"</span>:<span class="string">"text"</span> &#125;,</div><div class="line">                <span class="attr">"year"</span>: &#123; <span class="attr">"type"</span>:<span class="string">"date"</span> &#125;,</div><div class="line">                <span class="attr">"genre"</span>: &#123; <span class="attr">"type"</span>: <span class="string">"keyword"</span> &#125;,</div><div class="line">                <span class="attr">"title"</span>: &#123; <span class="attr">"type"</span>: <span class="string">"text"</span>, <span class="attr">"analyzer"</span>: <span class="string">"english"</span>&#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">curl http://&#123;&#123;host&#125;&#125;:9200/movies/_mapping/movie</div></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PUT /my_moviews/movie/1</div><div class="line">&#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"Example Movie One"</span>,</div><div class="line">    <span class="attr">"actor_count"</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">"date"</span>: <span class="string">"2012-06-09"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DELETE /my_moviews/movie/1</div></pre></td></tr></table></figure>
<h1 id="5-Shards-and-Replicas"><a href="#5-Shards-and-Replicas" class="headerlink" title="5. Shards and Replicas"></a>5. Shards and Replicas</h1><h2 id="Shards"><a href="#Shards" class="headerlink" title="Shards"></a>Shards</h2><ul>
<li>Default: Five shards per index</li>
<li>Make Elasticsearch distributed</li>
<li>Auto-balanced by failover</li>
</ul>
<h2 id="Replicas"><a href="#Replicas" class="headerlink" title="Replicas"></a>Replicas</h2><blockquote>
<p>Replicas are Duplications of Primary Shards</p>
</blockquote>
<ul>
<li>Takes over if primary fails</li>
<li>Node rejoins after failure</li>
<li>New node asynchronizes with others</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>2 nodes, 5 shards and 1 replica<br>N = Primary shard<br>R = Replica shard</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Cluster status: GREEN      Clauster status: YELLOW     Cluster status: GREEN</div><div class="line">Node 1                     Node 2                      Node 2</div><div class="line">[ N0 N1 N2 R3 R4 ]         [ N0 N1 N2 R3 R4 ]          [ N0 N1 N2 R3 R4 ]</div><div class="line">                      =&gt;                          =&gt;</div><div class="line">Node 2                     Node 2 (FAILED)             Node 2 (STARTED &amp; SYNCED)</div><div class="line">[ R0 R1 R2 N3 N4 ]                                     [ R0 R1 R2 N3 N4 ]</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">PUT test_index</div><div class="line">&#123;</div><div class="line">    "settings": &#123;</div><div class="line">        "number_of_shards": 1</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">PUT test_index/_settings</div><div class="line">&#123;</div><div class="line">    "number_of_replicas": 3</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Cannot set shards after created</li>
<li>But could change replicas</li>
</ul>
<h1 id="6-Bulk-API"><a href="#6-Bulk-API" class="headerlink" title="6. Bulk API"></a>6. Bulk API</h1><p>Allows you to index multiple documents at one time.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">POST my_movies/_bulk</div><div class="line">&#123;&quot;index&quot;:&#123;&quot;_index&quot;:&quot;my_movies&quot;,&quot;_type&quot;:&quot;movie&quot;,&quot;_id&quot;:&quot;2&quot;&#125;&#125;</div><div class="line">&#123;&quot;name&quot;:&quot;Sample Movie 2&quot;,&quot;actor_count&quot;:9,&quot;date&quot;:&quot;2015-01-10&quot;&#125;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">curl -XPUT 127.0.0.1:9200/_bulk --data-binary @movies.json</div><div class="line"></div><div class="line">$ cat movies.json</div><div class="line">&#123; <span class="string">"create"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"movies"</span>, <span class="string">"_type"</span> : <span class="string">"movie"</span>, <span class="string">"_id"</span> : <span class="string">"135569"</span> &#125; &#125;</div><div class="line">&#123; <span class="string">"id"</span>: <span class="string">"135569"</span>, <span class="string">"title"</span> : <span class="string">"Star Trek Beyond"</span>, <span class="string">"year"</span>:2016 , <span class="string">"genre"</span>:[<span class="string">"Action"</span>, <span class="string">"Adventure"</span>, <span class="string">"Sci-Fi"</span>] &#125;</div></pre></td></tr></table></figure>
<h1 id="7-REST-Queries"><a href="#7-REST-Queries" class="headerlink" title="7. REST Queries"></a>7. REST Queries</h1><table>
<thead>
<tr>
<th>DB</th>
<th>Verb</th>
</tr>
</thead>
<tbody>
<tr>
<td>Create</td>
<td>POST</td>
</tr>
<tr>
<td>Read</td>
<td>GET</td>
</tr>
<tr>
<td>Update</td>
<td>POST (partial) / PUT (whole)</td>
</tr>
<tr>
<td>Delete</td>
<td>Delete</td>
</tr>
</tbody>
</table>
<p><code>curl -X &lt;VERB&gt; &#39;&lt;PROTOCOL&gt;://&lt;HOST&gt;:&lt;PORT&gt;/&lt;PATH&gt;?&lt;QUERY_STRING&gt;&#39; -d &#39;&lt;BODY&gt;&#39;</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">curl -XGET http://localhost:9200/INDEX_NAME/_search?q=name:John</div><div class="line"></div><div class="line"># Shorthand version</div><div class="line"># could be runnable in kibana</div><div class="line">GET /INDEX_NAME/_search?q=name:John</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> architecture </tag>
            
            <tag> elastic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[老人节]]></title>
      <url>http://hczhang.com/2018/05/07/senior-day/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2018年05月07日</p>
</blockquote>
<p>饭桌上大家讨论旅游日期<br>妈妈说：“五月有什么节”<br>“母亲节，momerial day”， 我回答道<br>Zoe赶紧插话问：“有儿童节日吗”<br>我们一口同声， ”有啊“<br>我装可怜的说：“妈妈有母亲节，宝宝有儿童节，都没有爸爸的节日”<br>Zoe一脸嫌弃的回答：“你可以过老人节啊”</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue2-4 template]]></title>
      <url>http://hczhang.com/2018/04/10/vue2-4-template/</url>
      <content type="html"><![CDATA[<h1 id="Template-slot"><a href="#Template-slot" class="headerlink" title="Template slot"></a>Template slot</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">task</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"title"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">            this will go to nameless slot tag</div><div class="line">        <span class="tag">&lt;/<span class="name">task</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./order.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'task'</span>, &#123;</div><div class="line">    template: <span class="string">`</span></div><div class="line"><span class="string">    &lt;li&gt;</span></div><div class="line"><span class="string">        &lt;slot name="title"&gt;&lt;/slot&gt;</span></div><div class="line"><span class="string">        &lt;slot&gt;Default content&lt;/slot&gt;</span></div><div class="line"><span class="string">    &lt;/li&gt;`</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    el: <span class="string">'#root'</span>,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>Note: template tag will be deleted when rendered in html page<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">task</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">task</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Note: other tag will be kept.</p>
</blockquote>
<h1 id="Inline-template"><a href="#Inline-template" class="headerlink" title="Inline template"></a>Inline template</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">progress-view</span> <span class="attr">inline-template</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Your progress is &#123;&#123; completionRate &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">progress-view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./order.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue2-3 event]]></title>
      <url>http://hczhang.com/2018/04/09/vue2-3-event/</url>
      <content type="html"><![CDATA[<h1 id="Simple-Example"><a href="#Simple-Example" class="headerlink" title="Simple Example"></a>Simple Example</h1><p>Please look at <code>this.$emit()</code> method. and how we use it to notify the parent view.</p>
<p>Basically, the notification path is </p>
<blockquote>
<p>input @blur -&gt; applied method -&gt; $emit applied event -&gt; coupon @applied -&gt; onCouponApplied method</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">coupon</span> @<span class="attr">applied</span>=<span class="string">"onCouponApplied"</span>&gt;</span><span class="tag">&lt;/<span class="name">coupon</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"couponApplied"</span>&gt;</span>You used a coupon<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./order.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'coupon'</span>, &#123;</div><div class="line">    template: <span class="string">`&lt;input placeholder="Enter code" @blur="applied"&gt;`</span>,</div><div class="line">    methods: &#123;</div><div class="line">        applied() &#123;</div><div class="line">            <span class="keyword">this</span>.$emit(<span class="string">'applied'</span>)</div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    el: <span class="string">'#root'</span>,</div><div class="line">    data: &#123;</div><div class="line">        couponApplied: <span class="literal">false</span>,</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">        onCouponApplied() &#123;</div><div class="line">            <span class="keyword">this</span>.couponApplied = <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h1 id="Send-Listen-event-by-shared-instance"><a href="#Send-Listen-event-by-shared-instance" class="headerlink" title="Send/Listen event by shared instance"></a>Send/Listen event by shared instance</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.Event = <span class="keyword">new</span> Vue()</div><div class="line">Vue.component(<span class="string">'coupon'</span>, &#123;</div><div class="line">    template: <span class="string">`&lt;input placeholder="Enter code" @blur="applied"&gt;`</span>,</div><div class="line">    methods: &#123;</div><div class="line">        applied() &#123;</div><div class="line">            Event.$emit(<span class="string">'applied'</span>)</div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    el: <span class="string">'#root'</span>,</div><div class="line">    data: &#123;</div><div class="line">        couponApplied: <span class="literal">false</span>,</div><div class="line">    &#125;,</div><div class="line">    created() &#123;</div><div class="line">        Event.$on(<span class="string">'applied'</span>, () =&gt; alert(<span class="string">'Handling'</span>))</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue2-2 component]]></title>
      <url>http://hczhang.com/2018/04/07/vue2-2-component/</url>
      <content type="html"><![CDATA[<h1 id="Simple-Component"><a href="#Simple-Component" class="headerlink" title="Simple Component"></a>Simple Component</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">task</span>&gt;</span><span class="tag">&lt;/<span class="name">task</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./order.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'task'</span>, &#123;</div><div class="line">    template: <span class="string">'&lt;li&gt;Foobar&lt;/li&gt;'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    el: <span class="string">'#root'</span>,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h1 id="Sub-component"><a href="#Sub-component" class="headerlink" title="Sub component"></a>Sub component</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">task-list</span> <span class="attr">title</span>=<span class="string">"my todo list"</span>&gt;</span><span class="tag">&lt;/<span class="name">task-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./order.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'task-list'</span>, &#123;</div><div class="line">    props: [<span class="string">'title'</span>],</div><div class="line">    template: <span class="string">`</span></div><div class="line"><span class="string">    &lt;div v-show="isVisible"&gt;</span></div><div class="line"><span class="string">        &lt;div&gt;&#123;&#123; title &#125;&#125;&lt;/div&gt;</span></div><div class="line"><span class="string">        &lt;task v-for="t in tasks"&gt;&#123;&#123; t.task &#125;&#125;&lt;/task&gt;</span></div><div class="line"><span class="string">        &lt;button type="button" @click="hideModel"&gt;close&lt;/button&gt;</span></div><div class="line"><span class="string">    &lt;/div&gt;</span></div><div class="line"><span class="string">    `</span>,</div><div class="line"></div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            isVisible: <span class="literal">true</span>,</div><div class="line">            tasks: [</div><div class="line">                &#123; <span class="attr">task</span>: <span class="string">'Go to the store'</span>, <span class="attr">complete</span>: <span class="literal">true</span> &#125;,</div><div class="line">                &#123; <span class="attr">task</span>: <span class="string">'Go to the email'</span>, <span class="attr">complete</span>: <span class="literal">false</span> &#125;,</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">        hideModel() &#123;</div><div class="line">            <span class="keyword">this</span>.isVisible = <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">&#125;)</div><div class="line"></div><div class="line">Vue.component(<span class="string">'task'</span>, &#123;</div><div class="line">    template: <span class="string">'&lt;li&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/li&gt;'</span>,</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    el: <span class="string">'#root'</span>,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue2-1 basic]]></title>
      <url>http://hczhang.com/2018/04/07/vue2-1-basic/</url>
      <content type="html"><![CDATA[<h1 id="Basic-Example"><a href="#Basic-Example" class="headerlink" title="Basic Example"></a>Basic Example</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"n in names"</span> <span class="attr">v-text</span>=<span class="string">"n"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"input"</span> <span class="attr">:type</span>=<span class="string">"inputType"</span> <span class="attr">v-model</span>=<span class="string">"newName"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addName"</span>&gt;</span>&#123;&#123; label &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">"reversedMessage"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">        new Vue(&#123;</span></div><div class="line"><span class="undefined">            el: '#root',</span></div><div class="line"><span class="undefined">            data: &#123;</span></div><div class="line"><span class="undefined">                label: 'Add Name',</span></div><div class="line"><span class="undefined">                inputType: 'text',</span></div><div class="line"><span class="undefined">                newName: '',</span></div><div class="line"><span class="undefined">                names: ['Alice', 'Bob', 'Jane', 'Jack'],</span></div><div class="line"><span class="undefined">                message: 'Hello World'</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="undefined">            methods: &#123;</span></div><div class="line"><span class="undefined">                addName() &#123;</span></div><div class="line"><span class="undefined">                    this.names.push(this.newName)</span></div><div class="line"><span class="undefined">                    this.newName = ''</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="undefined">            computed: &#123;</span></div><div class="line"><span class="undefined">                reversedMessage() &#123;</span></div><div class="line"><span class="undefined">                    return this.message.split('').reverse().join('')</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[rabbit]]></title>
      <url>http://hczhang.com/2018/03/22/rabbit/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2018年03月22日</p>
</blockquote>
<p>小小罗与爸爸武道比试<br>爸爸：“看我猴拳，鹤拳，虎拳，呼呼呼”<br>小小罗手做兔耳，同时喊道：“看我兔拳，小兔子乖乖”<br>画风突变…</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[lunch]]></title>
      <url>http://hczhang.com/2018/02/12/lunch/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2018年02月12日</p>
</blockquote>
<p>某顿饭桌上，我说: “撑死了，我吃不下了”<br>小小罗眨眨眼睛: “来，给我点，我帮你 da(处) shi(理)”</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[phone]]></title>
      <url>http://hczhang.com/2017/12/06/phone/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年12月06日</p>
</blockquote>
<p>小小罗不小心把手机掉到地上<br>看到手机坏了，然后郑重其事的说，<br>看来我可以打个洞去姥姥家了。</p>
<p>这是女儿一直对facetime视频电话的幻想</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[brave]]></title>
      <url>http://hczhang.com/2017/12/03/brave/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年12月03日</p>
</blockquote>
<p>你是我的爸爸啊，你应该勇敢，痛，你怎么能说呢？</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[turtle]]></title>
      <url>http://hczhang.com/2017/11/25/turtle/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年11月25日</p>
</blockquote>
<p>妈妈后背受伤，结痂后说像乌龟壳，让女儿摸摸看。<br>“女儿，像乌龟不” 妈妈问<br>女儿开心的说，“像，来把头缩回去看看” </p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大爷]]></title>
      <url>http://hczhang.com/2017/11/13/uncle/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年11月14日</p>
</blockquote>
<p>女儿对问妈妈 “什么是大爷啊”<br>蹦豆说 “就是爸爸的哥哥”</p>
<p>“哦”， 女儿又问， “那妈妈有大爷吗？”<br>“没有”</p>
<p>“那我当你大爷吧”<br>这就是女儿体谅别人的可爱方式</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[口头禅]]></title>
      <url>http://hczhang.com/2017/11/13/tag/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年11月13日</p>
</blockquote>
<p>最近女儿有句口头禅，而且我觉得很无敌。<br>可以说我和她妈妈，罗蹦豆，对这句没有任何招架之力。</p>
<blockquote>
<p>只要妈妈爸爸好就行了</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Haskell 8 Input and Output]]></title>
      <url>http://hczhang.com/2017/11/13/Haskell-8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Taking Notes from <a href="http://learnyouahaskell.com" target="_blank" rel="noopener">http://learnyouahaskell.com</a></p>
</blockquote>
<h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><ul>
<li>你能把 I/O action 想成是一个长了脚的<strong>盒子</strong>，它会跑到真实世界中替你做某些事</li>
<li>打开盒子的唯一办法就是用 <strong>&lt;-</strong></li>
<li>一个 I/O action 会在我们把它绑定到 main 这个名字并且运行程序的时候触发</li>
<li>do 表示法将所有 I/O action 绑成一个</li>
</ul>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>hello world 来的晚了点 ：）</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">main</span> = putStrLn <span class="string">"hello, world"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="title">ghci</span>&gt; :t putStrLn</div><div class="line"><span class="title">putStrLn</span> :: <span class="type">String</span> -&gt; <span class="type">IO</span> ()</div><div class="line"><span class="title">ghci</span>&gt; :t putStrLn <span class="string">"hello, world"</span></div><div class="line"><span class="title">putStrLn</span> <span class="string">"hello, world"</span> :: <span class="type">IO</span> ()</div></pre></td></tr></table></figure>
<ul>
<li>return an I/O action</li>
<li>it container <em>()</em>  () means return nothing</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">ghci</span>&gt; :t getLine</div><div class="line"><span class="title">getLine</span> :: <span class="type">IO</span> <span class="type">String</span></div></pre></td></tr></table></figure>
<h2 id="Let-Binding"><a href="#Let-Binding" class="headerlink" title="Let Binding"></a>Let Binding</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Data.Char</div><div class="line"></div><div class="line"><span class="title">main</span> = <span class="keyword">do</span></div><div class="line">    putStrLn <span class="string">"What's your first name?"</span></div><div class="line">    firstName &lt;- getLine</div><div class="line">    putStrLn <span class="string">"What's your last name?"</span></div><div class="line">    lastName &lt;- getLine</div><div class="line">    <span class="keyword">let</span> bigFirstName = map toUpper firstName</div><div class="line">        bigLastName = map toUpper lastName</div><div class="line">    putStrLn $ <span class="string">"hey "</span> ++ bigFirstName ++ <span class="string">" "</span> ++ bigLastName ++ <span class="string">", how are you?"</span></div></pre></td></tr></table></figure>
<ul>
<li>let bindings in expression  (in expression is not required)</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="title">main</span> = <span class="keyword">do</span></div><div class="line">    line &lt;- getLine</div><div class="line">    <span class="keyword">if</span> null line</div><div class="line">        <span class="keyword">then</span> return ()</div><div class="line">        <span class="keyword">else</span> <span class="keyword">do</span></div><div class="line">            putStrLn $ reverseWords line</div><div class="line">            main</div><div class="line"></div><div class="line"><span class="title">reverseWords</span> :: <span class="type">String</span> -&gt; <span class="type">String</span></div><div class="line"><span class="title">reverseWords</span> = unwords . map reverse . words</div></pre></td></tr></table></figure>
<ul>
<li>return () means it return an <strong>IO ()</strong></li>
<li>return will not stop program</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="title">main</span> = <span class="keyword">do</span></div><div class="line">    a &lt;- return <span class="string">"hell"</span></div><div class="line">    b &lt;- return <span class="string">"yeah!"</span></div><div class="line">    putStrLn $ a ++ <span class="string">" "</span> ++ b</div></pre></td></tr></table></figure>
<h1 id="Some-IO-methods"><a href="#Some-IO-methods" class="headerlink" title="Some IO methods"></a>Some IO methods</h1><ul>
<li>putStr :: String -&gt; IO ()</li>
<li>putChar</li>
<li>putStrLn</li>
<li>print <ul>
<li>接受任何是 Show typeclass 的 instance 的型态的值</li>
<li>putStrLn 会打印出”, print不会</li>
</ul>
</li>
<li>getChar :: IO Char</li>
<li></li>
</ul>
<h2 id="When"><a href="#When" class="headerlink" title="When"></a>When</h2><ul>
<li><em>import Control.Monad</em> will import <strong>when</strong></li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Control.Monad</div><div class="line"></div><div class="line"><span class="title">main</span> = <span class="keyword">do</span></div><div class="line">    c &lt;- getChar</div><div class="line">    when (c /= ' ') $ <span class="keyword">do</span></div><div class="line">        putChar c</div><div class="line">        main</div></pre></td></tr></table></figure>
<h2 id="sequence"><a href="#sequence" class="headerlink" title="sequence"></a>sequence</h2><blockquote>
<p>sequence :: [IO a] -&gt; IO [a]</p>
</blockquote>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="title">main</span> = <span class="keyword">do</span></div><div class="line">    a &lt;- getLine</div><div class="line">    b &lt;- getLine</div><div class="line">    c &lt;- getLine</div><div class="line">    print [a,b,c]</div><div class="line"></div><div class="line"><span class="title">main</span> = <span class="keyword">do</span></div><div class="line">    rs &lt;- sequence [getLine, getLine, getLine]</div><div class="line">    print rs</div></pre></td></tr></table></figure>
<h2 id="mapM-mapM-forM"><a href="#mapM-mapM-forM" class="headerlink" title="mapM mapM_ forM"></a>mapM mapM_ forM</h2><p>由于对一个串列 map 一个回传 I/O action 的函数，然后再 sequence 他这个动作太常用了</p>
<ul>
<li>mapM 接受一个函数跟一个串列，将对串列用函数 map 然后 sequence 结果</li>
<li>mapM_ 也作同样的事，只是他把运算的结果丢掉而已</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="title">ghci</span>&gt; mapM print [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line">[(),(),()]</div><div class="line"></div><div class="line"><span class="title">ghci</span>&gt; mapM_ print [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> Control.Monad</div><div class="line"></div><div class="line"><span class="title">main</span> = <span class="keyword">do</span></div><div class="line">    colors &lt;- forM [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] (\a -&gt; <span class="keyword">do</span></div><div class="line">        putStrLn $ <span class="string">"Which color do you associate with the number "</span> ++ show a ++ <span class="string">"?"</span></div><div class="line">        color &lt;- getLine</div><div class="line">        return color)</div><div class="line">    putStrLn <span class="string">"The colors that you associate with 1, 2, 3 and 4 are: "</span></div><div class="line">    mapM putStrLn colors</div></pre></td></tr></table></figure>
<h2 id="forever"><a href="#forever" class="headerlink" title="forever"></a>forever</h2><ul>
<li>forever 接受一个 I/O action 并回传一个永远作同一件事的 I/O action</li>
<li>import Control.Monad</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import Control.Monad</div><div class="line">import Data.Char</div><div class="line"></div><div class="line">main = forever $ do</div><div class="line">    putStr &quot;Give me some input: &quot;</div><div class="line">    l &lt;- getLine</div><div class="line">    putStrLn $ map toUpper l</div></pre></td></tr></table></figure>
<h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><ul>
<li>getChar</li>
<li>getLine</li>
<li>getContents :: IO String</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Data.Char</div><div class="line"></div><div class="line"><span class="title">main</span> = <span class="keyword">do</span></div><div class="line">    contents &lt;- getContents</div><div class="line">    putStr (map toUpper contents)</div><div class="line"></div><div class="line">$ cat haiku.txt | ./capslocker</div></pre></td></tr></table></figure>
<h1 id="File"><a href="#File" class="headerlink" title="File"></a>File</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="title">man</span> = <span class="keyword">do</span></div><div class="line">    handle &lt;- openFile <span class="string">"test.txt"</span> <span class="type">ReadMode</span></div><div class="line">    contents &lt;- hGetContents handle</div><div class="line">    putStr contents</div><div class="line">    hClose handle</div></pre></td></tr></table></figure>
<ul>
<li>openFile :: FilePath -&gt; IOMode -&gt; IO Handle</li>
<li>type FilePath = String</li>
<li>data IOMode = ReadMode | WriteMode | AppendMode | ReadWriteMode</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> System.IO</div><div class="line"></div><div class="line"><span class="title">main</span> = <span class="keyword">do</span></div><div class="line">    withFile <span class="string">"girlfriend.txt"</span> <span class="type">ReadMode</span> (\handle -&gt; <span class="keyword">do</span></div><div class="line">            contents &lt;- hGetContents handle</div><div class="line">            putStr contents)</div></pre></td></tr></table></figure>
<ul>
<li>withFile :: FilePath -&gt; IOMode -&gt; (Handle -&gt; IO a) -&gt; IO a</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> System.IO</div><div class="line"><span class="keyword">import</span> Data.Char</div><div class="line"></div><div class="line"><span class="title">main</span> = <span class="keyword">do</span></div><div class="line">    contents &lt;- readFile <span class="string">"girlfriend.txt"</span></div><div class="line">    writeFile <span class="string">"girlfriendcaps.txt"</span> (map toUpper contents)</div></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> System.IO</div><div class="line"><span class="keyword">import</span> Data.Char</div><div class="line"></div><div class="line"><span class="title">main</span> = <span class="keyword">do</span></div><div class="line">    contents &lt;- readFile <span class="string">"girlfriend.txt"</span></div><div class="line">    writeFile <span class="string">"girlfriendcaps.txt"</span> (map toUpper contents)</div></pre></td></tr></table></figure>
<ul>
<li>writefile :: FilePath -&gt; String -&gt; IO ()</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> System.IO</div><div class="line"></div><div class="line"><span class="title">main</span> = <span class="keyword">do</span></div><div class="line">    todoItem &lt;- getLine</div><div class="line">    appendFile <span class="string">"todo.txt"</span> (todoItem ++ <span class="string">"\n"</span>)</div></pre></td></tr></table></figure>
<p>Other functions:</p>
<ul>
<li>hGetLine</li>
<li>hPutStr</li>
<li>hPutStrLn</li>
<li>hGetChar</li>
</ul>
<h1 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="title">ghci</span>&gt; randomR (<span class="number">1</span>,<span class="number">6</span>) (mkStrGen <span class="number">359353</span>)</div><div class="line">(<span class="number">6</span>,<span class="number">1494289578</span> <span class="number">40692</span>)</div><div class="line"></div><div class="line"><span class="title">ghci</span>&gt; take <span class="number">10</span> $ randomRs ('a','z') (mkStdGen <span class="number">3</span>) :: [<span class="type">Char</span>]</div><div class="line"><span class="string">"ndkxbvmomg"</span></div></pre></td></tr></table></figure>
<p>System IO action<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> System.Random</div><div class="line"></div><div class="line"><span class="title">main</span> = <span class="keyword">do</span></div><div class="line">    gen &lt;- getStdGen</div><div class="line">    putStr $ take <span class="number">20</span> (randomRs ('a','z') gen)</div><div class="line">    gen' &lt;- newStdGen</div><div class="line">    putStr $ take <span class="number">20</span> (randomRs ('a','z') gen')</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> fp </tag>
            
            <tag> haskell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Haskell 7 Create new Types and Typeclass]]></title>
      <url>http://hczhang.com/2017/11/13/Haskell-7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Taking Notes from <a href="http://learnyouahaskell.com" target="_blank" rel="noopener">http://learnyouahaskell.com</a></p>
</blockquote>
<h1 id="Algebraic-Data-Types"><a href="#Algebraic-Data-Types" class="headerlink" title="Algebraic Data Types"></a>Algebraic Data Types</h1><h2 id="Option-1-data"><a href="#Option-1-data" class="headerlink" title="Option 1: data"></a>Option 1: data</h2><p>data ValueName = Value Constructor<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">data</span> <span class="type">Bool</span> = <span class="type">False</span> | <span class="type">True</span></span></div><div class="line"><span class="class"><span class="keyword">data</span> <span class="type">Shape</span> = <span class="type">Circle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> | <span class="type">Rectangle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span></span></div></pre></td></tr></table></figure></p>
<p><em>Shape</em> is type, but <em>Circle</em> is not.<br>[]、False 或 5，它们都是不包含参数的值构造子</p>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ghci&gt; :t Circle</div><div class="line">Circle :: Float -&gt; Float -&gt; Float -&gt; Shape</div></pre></td></tr></table></figure>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">surface</span> :: <span class="type">Shape</span> -&gt; <span class="type">Float</span></div><div class="line"><span class="title">surface</span> (<span class="type">Circle</span> _ _ r) = pi * r ^ <span class="number">2</span></div><div class="line"><span class="title">surface</span> (<span class="type">Rectangle</span> x1 y1 x2 y2) = (abs $ x2 - x1) * (abs $ y2 - y1)</div></pre></td></tr></table></figure>
<h3 id="deriving"><a href="#deriving" class="headerlink" title="deriving"></a>deriving</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">data</span> <span class="type">Point</span> = <span class="type">Point</span> <span class="type">Float</span> <span class="type">Float</span> <span class="keyword">deriving</span> (<span class="type">Show</span>)</span></div><div class="line"><span class="class"><span class="keyword">data</span> <span class="type">Shape</span> = <span class="type">Circle</span> <span class="type">Point</span> <span class="type">Float</span> | <span class="type">Rectangle</span> <span class="type">Point</span> <span class="type">Point</span> <span class="keyword">deriving</span> (<span class="type">Show</span>)</span></div><div class="line"></div><div class="line"><span class="title">surface</span> :: <span class="type">Shape</span> -&gt; <span class="type">Float</span></div><div class="line"><span class="title">surface</span> (<span class="type">Circle</span> _ r) = pi * r ^ <span class="number">2</span></div><div class="line"><span class="title">surface</span> (<span class="type">Rectangle</span> (<span class="type">Point</span> x1 y1) (<span class="type">Point</span> x2 y2)) = (abs $ x2 - x1) * (abs $ y2 - y1)</div><div class="line"></div><div class="line"><span class="title">surface</span> (<span class="type">Rectangle</span> (<span class="type">Point</span> <span class="number">0</span> <span class="number">0</span>) (<span class="type">Point</span> <span class="number">100</span> <span class="number">100</span>))</div></pre></td></tr></table></figure>
<h3 id="Export-in-module"><a href="#Export-in-module" class="headerlink" title="Export in module"></a>Export in module</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span> Shapes</div><div class="line">( <span class="type">Point(..)</span></div><div class="line">, <span class="type">Shape(..)</span></div><div class="line">, <span class="title">surface</span></div><div class="line">, <span class="title">nudge</span></div><div class="line">, <span class="title">baseCircle</span></div><div class="line">, <span class="title">baseRect</span></div><div class="line">) <span class="keyword">where</span></div></pre></td></tr></table></figure>
<p>.. means exports all of <em>Value Contructors</em></p>
<h2 id="Options-2-Record-Syntax"><a href="#Options-2-Record-Syntax" class="headerlink" title="Options 2: Record Syntax"></a>Options 2: Record Syntax</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">data</span> <span class="type">Car</span> = <span class="type">Car</span> &#123;<span class="title">company</span> :: <span class="type">String</span>, <span class="title">model</span> :: <span class="type">String</span>, <span class="title">year</span> :: <span class="type">Int</span>&#125; <span class="keyword">deriving</span> (<span class="type">Show</span>)</span></div><div class="line"></div><div class="line"><span class="title">ghci</span>&gt; <span class="type">Car</span> &#123;company=<span class="string">"Ford"</span>, model=<span class="string">"Mustang"</span>, year=<span class="number">1967</span>&#125;</div><div class="line"><span class="type">Car</span> &#123;company = <span class="string">"Ford"</span>, model = <span class="string">"Mustang"</span>, year = <span class="number">1967</span>&#125;</div></pre></td></tr></table></figure>
<h2 id="Options-3-Type-parameters"><a href="#Options-3-Type-parameters" class="headerlink" title="Options 3: Type parameters"></a>Options 3: Type parameters</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">data</span> <span class="type">Maybe</span> a = <span class="type">Nothing</span> | <span class="type">Just</span> a</span></div></pre></td></tr></table></figure>
<ul>
<li><em>a</em> is Type Parameter</li>
<li><em>Maybe</em> is Type Constructor</li>
<li><em>Maybe String</em> is Type</li>
</ul>
<blockquote>
<p>Haskell 中有一个严格的约定，那就是永远不要在 data 声明中添加类型约束</p>
</blockquote>
<h2 id="Options-4-Derived-instances"><a href="#Options-4-Derived-instances" class="headerlink" title="Options 4: Derived instances"></a>Options 4: Derived instances</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">data</span> <span class="type">Day</span> = <span class="type">Monday</span> | <span class="type">Tuesday</span> | <span class="type">Wednesday</span> | <span class="type">Thursday</span> | <span class="type">Friday</span> | <span class="type">Saturday</span> | <span class="type">Sunday</span></span></div><div class="line">           <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Show</span>, <span class="type">Read</span>, <span class="type">Bounded</span>, <span class="type">Enum</span>)</div><div class="line"></div><div class="line"><span class="comment">-- Show and Red instance</span></div><div class="line"><span class="title">ghci</span>&gt; <span class="type">Wednesday</span></div><div class="line"><span class="type">Wednesday</span></div><div class="line"><span class="title">ghci</span>&gt; show <span class="type">Wednesday</span></div><div class="line"><span class="string">"Wednesday"</span></div><div class="line"><span class="title">ghci</span>&gt; read <span class="string">"Saturday"</span> :: <span class="type">Day</span></div><div class="line"><span class="type">Saturday</span></div><div class="line"></div><div class="line"><span class="comment">-- Eq and Ord instance</span></div><div class="line"><span class="title">ghci</span>&gt; <span class="type">Saturday</span> == <span class="type">Saturday</span></div><div class="line"><span class="type">True</span></div><div class="line"><span class="title">ghci</span>&gt; <span class="type">Saturday</span> &gt; <span class="type">Friday</span></div><div class="line"><span class="type">True</span></div><div class="line"></div><div class="line"><span class="comment">-- Bounded instance</span></div><div class="line"><span class="title">ghci</span>&gt; succ <span class="type">Monday</span></div><div class="line"><span class="type">Tuesday</span></div><div class="line"><span class="title">ghci</span>&gt; pred <span class="type">Saturday</span></div><div class="line"><span class="type">Friday</span></div><div class="line"><span class="title">ghci</span>&gt; [<span class="type">Thursday</span> .. <span class="type">Sunday</span>]</div><div class="line">[<span class="type">Thursday</span>,<span class="type">Friday</span>,<span class="type">Saturday</span>,<span class="type">Sunday</span>]</div><div class="line"><span class="title">ghci</span>&gt; [minBound .. maxBound] :: [<span class="type">Day</span>]</div><div class="line">[<span class="type">Monday</span>,<span class="type">Tuesday</span>,<span class="type">Wednesday</span>,<span class="type">Thursday</span>,<span class="type">Friday</span>,<span class="type">Saturday</span>,<span class="type">Sunday</span>]</div></pre></td></tr></table></figure>
<h2 id="Options-5-Type-Synonyms"><a href="#Options-5-Type-Synonyms" class="headerlink" title="Options 5: Type Synonyms"></a>Options 5: Type Synonyms</h2><p>type alias</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">String</span> = [<span class="type">Char</span>]</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">AssocList</span> k v = [(<span class="title">k</span>, <span class="title">v</span>)]</span></div><div class="line"></div><div class="line">// partial <span class="class"><span class="keyword">type</span> constructor</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">IntMap</span> v = <span class="type">Map</span> <span class="type">Int</span> v</span></div><div class="line"><span class="class"><span class="keyword">type</span> <span class="type">IntMap</span> = <span class="type">Map</span> <span class="type">Int</span></span></div></pre></td></tr></table></figure>
<h1 id="Recursive-data-structures"><a href="#Recursive-data-structures" class="headerlink" title="Recursive data structures"></a>Recursive data structures</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">data</span> <span class="type">List</span> a = <span class="type">Empty</span> | <span class="type">Cons</span> a (<span class="type">List</span> <span class="title">a</span>) <span class="keyword">deriving</span> (<span class="type">Show</span>, <span class="type">Read</span>, <span class="type">Eq</span>, <span class="type">Ord</span>)</span></div><div class="line"></div><div class="line">// <span class="type">Or</span></div><div class="line"><span class="class"><span class="keyword">data</span> <span class="type">List</span> a = <span class="type">Empty</span> | <span class="type">Cons</span> &#123; <span class="title">listHead</span> :: <span class="title">a</span>, <span class="title">listTail</span> :: <span class="type">List</span> <span class="title">a</span>&#125; <span class="keyword">deriving</span> (<span class="type">Show</span>, <span class="type">Read</span>, <span class="type">Eq</span>, <span class="type">Ord</span>)</span></div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ghci&gt; Empty</div><div class="line">Empty</div><div class="line">ghci&gt; 5 `Cons` Empty</div><div class="line">Cons 5 Empty</div><div class="line">ghci&gt; 4 `Cons` (5 `Cons` Empty)</div><div class="line">Cons 4 (Cons 5 Empty)</div></pre></td></tr></table></figure>
<h2 id="Infix-Op"><a href="#Infix-Op" class="headerlink" title="Infix Op"></a>Infix Op</h2><ul>
<li>我们可以只用特殊字符来定义函数，这样他们就会自动具有中缀的性质</li>
<li>在 Value Constructor 上也可以使用</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">infixr</span> <span class="number">5</span> :-:</div><div class="line"><span class="class"><span class="keyword">data</span> <span class="type">List</span> a = <span class="type">Empty</span> | a :-: (<span class="type">List</span> <span class="title">a</span>) <span class="keyword">deriving</span> (<span class="type">Show</span>, <span class="type">Read</span>, <span class="type">Eq</span>, <span class="type">Ord</span>)</span></div><div class="line"></div><div class="line"><span class="keyword">infixl</span> <span class="number">7</span> *</div></pre></td></tr></table></figure>
<blockquote>
<p>priority * &gt; :-:</p>
</blockquote>
<h1 id="Typeclasses"><a href="#Typeclasses" class="headerlink" title="Typeclasses"></a>Typeclasses</h1><h2 id="Class-and-Instance"><a href="#Class-and-Instance" class="headerlink" title="Class and Instance"></a>Class and Instance</h2><p><em>typeclasses are like interfaces</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Eq a where</div><div class="line">    (==) :: a -&gt; a -&gt; Bool</div><div class="line">    (/=) :: a -&gt; a -&gt; Bool</div><div class="line">    x == y = not (x /= y)</div><div class="line">    x /= y = not (x == y)</div><div class="line"></div><div class="line">data TrafficLight = Red | Yellow | Green</div><div class="line"></div><div class="line">// TrafficLight is a in class Eq</div><div class="line">instance Eq TrafficLight where </div><div class="line">    Red == Red == True</div><div class="line">    Green == Green = True</div><div class="line">    Yellow == Yellow = True</div><div class="line">    _ == _ == False</div><div class="line"></div><div class="line">instance Show TrafficLight where</div><div class="line">    show Red = &quot;Red light&quot;</div><div class="line">    show Yellow = &quot;Yellow light&quot;</div><div class="line">    show Green = &quot;Green light&quot;</div></pre></td></tr></table></figure>
<ul>
<li>class is for defining new typeclasses</li>
<li>instance is for making our types instances of typeclasses</li>
</ul>
<h2 id="Subclass"><a href="#Subclass" class="headerlink" title="Subclass"></a>Subclass</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> (<span class="type">Eq</span> <span class="title">a</span>) =&gt; <span class="type">Num</span> a <span class="keyword">where</span></span></div><div class="line">    ...</div></pre></td></tr></table></figure>
<blockquote>
<p>(Eq a) is class contraints</p>
</blockquote>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Eq</span> (<span class="type">Maybe</span> <span class="title">m</span>) <span class="keyword">where</span></span></div><div class="line">    <span class="type">Just</span> x == <span class="type">Just</span> y = x == y</div><div class="line">    <span class="type">Nothing</span> == <span class="type">Nothing</span> = <span class="type">True</span></div><div class="line">    _ == _ = <span class="type">False</span></div></pre></td></tr></table></figure>
<ul>
<li>Maybe is not type, it’s type constructor.</li>
<li>Maybe m is a type.</li>
<li>so cannot write like this: <em>instance Eq Maybe where</em></li>
<li>(Maybe m) is <em>a</em> for preivous example</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Eq</span> <span class="title">m</span>) =&gt; <span class="type">Eq</span> (<span class="type">Maybe</span> <span class="title">m</span>) <span class="keyword">where</span></span></div><div class="line">    <span class="type">Just</span> x == <span class="type">Just</span> y = x == y</div><div class="line">    <span class="type">Nothing</span> == <span class="type">Nothing</span> = <span class="type">True</span></div><div class="line">    _ == _ == <span class="type">False</span></div></pre></td></tr></table></figure>
<p>This is required for comparing value inside Maybe.</p>
<h1 id="Example-Yes-No-Typeclass"><a href="#Example-Yes-No-Typeclass" class="headerlink" title="Example: Yes/No Typeclass"></a>Example: Yes/No Typeclass</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">instance</span> <span class="type">YesNo</span> <span class="type">Int</span> <span class="keyword">where</span></span></div><div class="line">    yesno <span class="number">0</span> = <span class="type">False</span></div><div class="line">    yesno _ = <span class="type">True</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">instance</span> <span class="type">YesNo</span> [a] <span class="keyword">where</span></span></div><div class="line">    yesno [] = <span class="type">False</span></div><div class="line">    yesno _ = <span class="type">True</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">instance</span> <span class="type">YesNo</span> <span class="type">Bool</span> <span class="keyword">where</span></span></div><div class="line">    yesno = id</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">instance</span> <span class="type">YesNo</span> (<span class="type">Maybe</span> <span class="title">a</span>) <span class="keyword">where</span></span></div><div class="line">    yesno (<span class="type">Just</span> _) = <span class="type">True</span></div><div class="line">    yesno <span class="type">Nothing</span> = <span class="type">False</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">instance</span> <span class="type">YesNo</span> <span class="type">TrafficLight</span> <span class="keyword">where</span></span></div><div class="line">    yesno <span class="type">Red</span> = <span class="type">False</span></div><div class="line">    yesno _ = <span class="type">True</span></div></pre></td></tr></table></figure>
<blockquote>
<p>id is function :: a -&gt; a</p>
</blockquote>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="title">ghci</span>&gt; yesno $ length []</div><div class="line"><span class="type">False</span></div><div class="line"><span class="title">ghci</span>&gt; yesno <span class="string">"haha"</span></div><div class="line"><span class="type">True</span></div><div class="line"><span class="title">ghci</span>&gt; yesno <span class="string">""</span></div><div class="line"><span class="type">False</span></div><div class="line"><span class="title">ghci</span>&gt; yesno $ <span class="type">Just</span> <span class="number">0</span></div><div class="line"><span class="type">True</span></div><div class="line"><span class="title">ghci</span>&gt; yesno <span class="type">True</span></div><div class="line"><span class="type">True</span></div><div class="line"><span class="title">ghci</span>&gt; yesno []</div><div class="line"><span class="type">False</span></div><div class="line"><span class="title">ghci</span>&gt; yesno [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</div><div class="line"><span class="type">True</span></div><div class="line"><span class="title">ghci</span>&gt; :t yesno</div><div class="line"><span class="title">yesno</span> :: (<span class="type">YesNo</span> a) =&gt; a -&gt; <span class="type">Bool</span></div></pre></td></tr></table></figure>
<p>A <em>if statement</em> function<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="title">yesnoIf</span> :: (<span class="type">YesNo</span> y) =&gt; y -&gt; a -&gt; a -&gt; a</div><div class="line"><span class="title">yesnoIf</span> yesnoVal yesResult noResult =</div><div class="line">    <span class="keyword">if</span> yesno yesnoVal <span class="keyword">then</span> yesResult <span class="keyword">else</span> noResult</div><div class="line"></div><div class="line"><span class="title">ghci</span>&gt; yesnoIf [] <span class="string">"YEAH!"</span> <span class="string">"NO!"</span></div><div class="line"><span class="string">"NO!"</span></div><div class="line"><span class="title">ghci</span>&gt; yesnoIf [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] <span class="string">"YEAH!"</span> <span class="string">"NO!"</span></div><div class="line"><span class="string">"YEAH!"</span></div><div class="line"><span class="title">ghci</span>&gt; yesnoIf <span class="type">True</span> <span class="string">"YEAH!"</span> <span class="string">"NO!"</span></div><div class="line"><span class="string">"YEAH!"</span></div><div class="line"><span class="title">ghci</span>&gt; yesnoIf (<span class="type">Just</span> <span class="number">500</span>) <span class="string">"YEAH!"</span> <span class="string">"NO!"</span></div><div class="line"><span class="string">"YEAH!"</span></div><div class="line"><span class="title">ghci</span>&gt; yesnoIf <span class="type">Nothing</span> <span class="string">"YEAH!"</span> <span class="string">"NO!"</span></div><div class="line"><span class="string">"NO!"</span></div></pre></td></tr></table></figure></p>
<h1 id="Functor-Typeclass"><a href="#Functor-Typeclass" class="headerlink" title="Functor Typeclass"></a>Functor Typeclass</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f <span class="keyword">where</span></span></div><div class="line">    fmap :: (a -&gt; b) -&gt; f a -&gt; f b</div></pre></td></tr></table></figure>
<ul>
<li><em>f</em> needs a <em>Type Constructor</em></li>
<li><em>f</em> is not real type, such as Int Bool and Maybe Int</li>
<li><em>Maybe</em> is a <em>Type Constructor</em></li>
</ul>
<p><em>map</em> is a <em>fmap</em> that works only on Lists<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> [] <span class="keyword">where</span></span></div><div class="line">    fmap = map</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Warning: we cannot use [a] at here, Remember we need a Type Constructor</p>
</blockquote>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></div><div class="line">    fmap f (<span class="type">Just</span> x) = <span class="type">Just</span> (f x)</div><div class="line">    fmap f <span class="type">Nothing</span> = <span class="type">Nothing</span></div></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> (<span class="type">Either</span> <span class="title">a</span>) <span class="keyword">where</span></span></div><div class="line">    fmap f (<span class="type">Right</span> x) = <span class="type">Right</span> (f x)</div><div class="line">    fmap f (<span class="type">Left</span> x) = <span class="type">Left</span> x</div></pre></td></tr></table></figure>
<ul>
<li><em>Either a</em> an instance instead of just <em>Either</em></li>
<li><em>Either</em> takes two parameter</li>
</ul>
<h1 id="Kind"><a href="#Kind" class="headerlink" title="Kind"></a>Kind</h1><ul>
<li>:k return kind info</li>
<li>A * means that the type is a concrete type</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="title">ghci</span>&gt; :k <span class="type">Int</span></div><div class="line"><span class="type">Int</span> :: *</div><div class="line"></div><div class="line"><span class="title">ghci</span>&gt; :k <span class="type">Maybe</span></div><div class="line"><span class="type">Maybe</span> :: * -&gt; *</div><div class="line"></div><div class="line"><span class="title">ghci</span>&gt; :k <span class="type">Maybe</span> <span class="type">Int</span></div><div class="line"><span class="type">Maybe</span> <span class="type">Int</span> :: *</div><div class="line"></div><div class="line"><span class="title">ghci</span>&gt; :k <span class="type">Either</span></div><div class="line"><span class="type">Either</span> :: * -&gt; * -&gt; *</div><div class="line"></div><div class="line"><span class="title">ghci</span>&gt; :k <span class="type">Either</span> <span class="type">String</span></div><div class="line"><span class="type">Either</span> <span class="type">String</span> :: * -&gt; *</div><div class="line"></div><div class="line"><span class="title">ghci</span>&gt; :k <span class="type">Either</span> <span class="type">String</span> <span class="type">Int</span></div><div class="line"><span class="type">Either</span> <span class="type">String</span> <span class="type">Int</span> :: *</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> fp </tag>
            
            <tag> haskell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Haskell 6 Module]]></title>
      <url>http://hczhang.com/2017/10/28/Haskell-6/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Taking Notes from <a href="http://learnyouahaskell.com" target="_blank" rel="noopener">http://learnyouahaskell.com</a></p>
</blockquote>
<h1 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Data.List</div><div class="line"></div><div class="line"><span class="title">numUniques</span> :: (<span class="type">Eq</span> a) =&gt; [a] -&gt; <span class="type">Int</span></div><div class="line"><span class="title">numUniques</span> = length . nub</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ghci &gt; :m Data.List Data.Map Data.Set</div></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// <span class="type">Explicit</span> <span class="type">Include</span></div><div class="line"><span class="keyword">import</span> Data.List (<span class="title">nub</span>，<span class="title">sort</span>)</div><div class="line"></div><div class="line">// <span class="type">Exclude</span></div><div class="line"><span class="keyword">import</span> Data.List <span class="keyword">hiding</span> (<span class="title">nub</span>)</div><div class="line"></div><div class="line">// <span class="type">Qualified</span>: must be used <span class="keyword">as</span> <span class="type">Data</span>.<span class="type">Map</span>.filter</div><div class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.Map</div><div class="line"></div><div class="line">// <span class="type">Alias</span>: will be: <span class="type">M</span>.filter</div><div class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.Map <span class="keyword">as</span> M</div></pre></td></tr></table></figure>
<h1 id="Reference-Link"><a href="#Reference-Link" class="headerlink" title="Reference Link"></a>Reference Link</h1><p><a href="http://www.Haskell.org/hoogle/" target="_blank" rel="noopener">Hoogle</a></p>
<h1 id="Data-List"><a href="#Data-List" class="headerlink" title="Data.List"></a>Data.List</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># intersperse</span></div><div class="line">ghci&gt; intersperse <span class="string">'.'</span> <span class="string">"MONKEY"</span></div><div class="line"><span class="string">"M.O.N.K.E.Y"</span></div><div class="line"></div><div class="line"><span class="comment"># intercalate</span></div><div class="line">ghci&gt; intercalate <span class="string">" "</span> [<span class="string">"hey"</span>,<span class="string">"there"</span>,<span class="string">"guys"</span>]</div><div class="line"><span class="string">"hey there guys"</span></div><div class="line"></div><div class="line"><span class="comment"># transpose</span></div><div class="line">ghci&gt; transpose [[1,2,3],[4,5,6],[7,8,9]]</div><div class="line">[[1,4,7],[2,5,8],[3,6,9]]</div><div class="line"></div><div class="line"><span class="comment"># concat</span></div><div class="line">ghci&gt; concat [[3,4,5],[2,3,4],[2,1,1]]</div><div class="line">[3,4,5,2,3,4,2,1,1]</div><div class="line"></div><div class="line"><span class="comment"># concatMap</span></div><div class="line">ghci&gt; concatMap (replicate 4) [1..3]</div><div class="line">[1,1,1,1,2,2,2,2,3,3,3,3]</div><div class="line"></div><div class="line"><span class="comment"># and</span></div><div class="line">ghci&gt; and $ map (&gt;4) [5,6,7,8]</div><div class="line">True</div><div class="line"></div><div class="line"><span class="comment"># or</span></div><div class="line">ghci&gt; or $ map (==4) [2,3,4,5,6,1]</div><div class="line">True</div><div class="line"></div><div class="line"><span class="comment"># any and all</span></div><div class="line"></div><div class="line"><span class="comment"># iterate</span></div><div class="line">ghci&gt; take 10 $ iterate (*2) 1</div><div class="line">[1,2,4,8,16,32,64,128,256,512]</div><div class="line"></div><div class="line"><span class="comment"># splitAt</span></div><div class="line">ghci&gt; splitAt 3 <span class="string">"heyman"</span></div><div class="line">(<span class="string">"hey"</span>,<span class="string">"man"</span>)</div><div class="line"></div><div class="line"><span class="comment"># takeWhile</span></div><div class="line"></div><div class="line"><span class="comment"># dropWhile</span></div><div class="line"></div><div class="line"><span class="comment"># span</span></div><div class="line">ghci&gt; <span class="built_in">let</span> (fw，rest) = span (/=<span class="string">' '</span>) <span class="string">"This is a sentence"</span> <span class="keyword">in</span> <span class="string">"First word:"</span> ++ fw ++ <span class="string">"，the rest:"</span> ++ rest </div><div class="line"><span class="string">"First word: This，the rest: is a sentence"</span></div><div class="line"></div><div class="line"><span class="comment"># break</span></div><div class="line">ghci&gt; <span class="built_in">break</span> (==4) [1,2,3,4,5,6,7]</div><div class="line">([1,2,3],[4,5,6,7])</div><div class="line">ghci&gt; span (/=4) [1,2,3,4,5,6,7]</div><div class="line">([1,2,3],[4,5,6,7])</div><div class="line"></div><div class="line"><span class="comment"># sort</span></div><div class="line">ghci&gt; sort [8,5,3,2,1,6,4,2]  </div><div class="line">[1,2,2,3,4,5,6,8]  </div><div class="line"></div><div class="line"><span class="comment"># group</span></div><div class="line">ghci&gt; group [1,1,1,1,2,2,2,2,3,3,2,2,2,5,6,7]  </div><div class="line">[[1,1,1,1],[2,2,2,2],[3,3],[2,2,2],[5],[6],[7]]</div><div class="line"></div><div class="line"><span class="comment"># inits   inits</span></div><div class="line">ghci&gt; inits <span class="string">"w00t"</span></div><div class="line">[<span class="string">""</span>,<span class="string">"w"</span>,<span class="string">"w0"</span>,<span class="string">"w00"</span>,<span class="string">"w00t"</span>]</div><div class="line">ghci&gt; tails <span class="string">"w00t"</span></div><div class="line">[<span class="string">"w00t"</span>,<span class="string">"00t"</span>,<span class="string">"0t"</span>,<span class="string">"t"</span>,<span class="string">""</span>]</div><div class="line"></div><div class="line"><span class="comment"># isIndexOf isInfixOf isPrefixOf isSuffixOf</span></div><div class="line"></div><div class="line">partition</div><div class="line"></div><div class="line">elem</div><div class="line">notElem</div><div class="line">elemIndex</div><div class="line">elemIndices</div><div class="line"></div><div class="line">find</div><div class="line">findIndex</div><div class="line">findIndices</div><div class="line"></div><div class="line">lines</div><div class="line">unlines</div><div class="line"></div><div class="line">words</div><div class="line">unwords</div><div class="line"></div><div class="line">nub</div><div class="line"></div><div class="line">delete</div><div class="line"></div><div class="line">\\</div><div class="line">ghci&gt; [1..10] \\ [2,5,9]</div><div class="line">[1,3,4,6,7,8,10]</div><div class="line"></div><div class="line">union</div><div class="line">intersection</div><div class="line"></div><div class="line">insert</div><div class="line">ghci&gt; insert 4 [1,2,3,5,6,7]</div><div class="line">[1,2,3,4,5,6,7]</div><div class="line"></div><div class="line">ghci&gt; <span class="built_in">let</span> values = [-4.3，-2.4，-1.2，0.4，2.3，5.9，10.5，29.1，5.3，-2.4，-14.5，2.9，2.3]  </div><div class="line">ghci&gt; groupBy (\x y -&gt; (x &gt; 0) == (y &gt; 0)) values  </div><div class="line">[[-4.3,-2.4,-1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[-2.4,-14.5],[2.9,2.3]]</div><div class="line"></div><div class="line">on :: (b -&gt; b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; a -&gt; c  </div><div class="line">f `on` g = \x y -&gt; f (g x) (g y)</div><div class="line"></div><div class="line">ghci&gt; groupBy ((==) `on` (&gt; 0)) values  </div><div class="line">[[-4.3,-2.4,-1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[-2.4,-14.5],[2.9,2.3]]</div></pre></td></tr></table></figure>
<h1 id="Data-Char"><a href="#Data-Char" class="headerlink" title="Data.Char"></a>Data.Char</h1><p><strong>isControl</strong> checks whether a character is a control character.<br><strong>isSpace</strong> checks whether a character is a white-space characters. That includes spaces, tab characters, newlines, etc.<br><strong>isLower</strong> checks whether a character is lower-cased.<br><strong>isUpper</strong> checks whether a character is upper-cased.<br><strong>isAlpha</strong> checks whether a character is a letter.<br><strong>isAlphaNum</strong> checks whether a character is a letter or a number.<br><strong>isPrint</strong> checks whether a character is printable. Control characters, for instance, are not printable.<br><strong>isDigit</strong> checks whether a character is a digit.<br><strong>isOctDigit</strong> checks whether a character is an octal digit.<br><strong>isHexDigit</strong> checks whether a character is a hex digit.<br><strong>isLetter</strong> checks whether a character is a letter.<br><strong>isMark</strong> checks for Unicode mark characters. Those are characters that combine with preceding letters to form latters with accents. Use this if you are French.<br><strong>isNumber</strong> checks whether a character is numeric.<br><strong>isPunctuation</strong> checks whether a character is punctuation.<br><strong>isSymbol</strong> checks whether a character is a fancy mathematical or currency symbol.<br><strong>isSeparator</strong> checks for Unicode spaces and separators.<br><strong>isAscii</strong> checks whether a character falls into the first 128 characters of the Unicode character set.<br><strong>isLatin1</strong> checks whether a character falls into the first 256 characters of Unicode.<br><strong>isAsciiUpper</strong> checks whether a character is ASCII and upper-case.<br><strong>isAsciiLower</strong> checks whether a character is ASCII and lower-case.</p>
<h1 id="Data-Map"><a href="#Data-Map" class="headerlink" title="Data.Map"></a>Data.Map</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="title">phoneBook</span> = [(<span class="string">"betty"</span>,<span class="string">"555-2938"</span>) ,</div><div class="line">             (<span class="string">"bonnie"</span>,<span class="string">"452-2928"</span>) ,</div><div class="line">             (<span class="string">"patsy"</span>,<span class="string">"493-2928"</span>) ,</div><div class="line">             (<span class="string">"lucille"</span>,<span class="string">"205-2928"</span>) ,</div><div class="line">             (<span class="string">"wendy"</span>,<span class="string">"939-8282"</span>) ,</div><div class="line">             (<span class="string">"penny"</span>,<span class="string">"853-2492"</span>) ]</div></pre></td></tr></table></figure>
<h1 id="Data-Set"><a href="#Data-Set" class="headerlink" title="Data.Set"></a>Data.Set</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.Set <span class="keyword">as</span> Set</div><div class="line"></div><div class="line"><span class="title">ghci</span>&gt; <span class="keyword">let</span> set1 = <span class="type">Set</span>.fromList text1  </div><div class="line"><span class="title">ghci</span>&gt; <span class="keyword">let</span> set2 = <span class="type">Set</span>.fromList text2  </div><div class="line"><span class="title">ghci</span>&gt; set1  </div><div class="line"><span class="title">fromList</span> <span class="string">" .?AIRadefhijlmnorstuy"</span>  </div><div class="line"><span class="title">ghci</span>&gt; set2  </div><div class="line"><span class="title">fromList</span> <span class="string">" !Tabcdefghilmnorstuvwy"</span></div></pre></td></tr></table></figure>
<p>intersection<br>difference<br>null，size，member，empty，singleton，insert，delete</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="title">ghci</span>&gt; <span class="type">Set</span>.fromList [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] `<span class="type">Set</span>.isSubsetOf` <span class="type">Set</span>.fromList [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]  </div><div class="line"><span class="type">True</span>  </div><div class="line"><span class="title">ghci</span>&gt; <span class="type">Set</span>.fromList [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] `<span class="type">Set</span>.isSubsetOf` <span class="type">Set</span>.fromList [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]  </div><div class="line"><span class="type">True</span>  </div><div class="line"><span class="title">ghci</span>&gt; <span class="type">Set</span>.fromList [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] `<span class="type">Set</span>.isProperSubsetOf` <span class="type">Set</span>.fromList [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]  </div><div class="line"><span class="type">False</span>  </div><div class="line"><span class="title">ghci</span>&gt; <span class="type">Set</span>.fromList [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>] `<span class="type">Set</span>.isSubsetOf` <span class="type">Set</span>.fromList [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]  </div><div class="line"><span class="type">False</span></div></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="title">ghci</span>&gt; <span class="type">Set</span>.filter odd $ <span class="type">Set</span>.fromList [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  </div><div class="line"><span class="title">fromList</span> [<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>]  </div><div class="line"><span class="title">ghci</span>&gt; <span class="type">Set</span>.map (+<span class="number">1</span>) $ <span class="type">Set</span>.fromList [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  </div><div class="line"><span class="title">fromList</span> [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</div></pre></td></tr></table></figure>
<h1 id="Making-our-own-modules"><a href="#Making-our-own-modules" class="headerlink" title="Making our own modules"></a>Making our own modules</h1><p>Geometry<br>    |————  Sphere.hs<br>    |———— Cuboid.hs<br>    `———— Cube.hs</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># sphere.hs</span></div><div class="line"><span class="keyword">module</span> Geometry.Sphere  </div><div class="line">( <span class="title">volume</span>  </div><div class="line">，<span class="title">area</span>  </div><div class="line">) <span class="keyword">where</span>  </div><div class="line"></div><div class="line"><span class="title">volume</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span>  </div><div class="line"><span class="title">volume</span> radius = (<span class="number">4.0</span> / <span class="number">3.0</span>) * pi * (radius ^ <span class="number">3</span>)  </div><div class="line"></div><div class="line"><span class="title">area</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span>  </div><div class="line"><span class="title">area</span> radius = <span class="number">4</span> * pi * (radius ^ <span class="number">2</span>)</div></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># cuboid.hs</span></div><div class="line"><span class="keyword">module</span> Geometry.Cuboid  </div><div class="line">( <span class="title">volume</span>  </div><div class="line">，<span class="title">area</span>  </div><div class="line">) <span class="keyword">where</span>  </div><div class="line"></div><div class="line"><span class="title">volume</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span> -&gt; <span class="type">Float</span> -&gt; <span class="type">Float</span>  </div><div class="line"><span class="title">volume</span> a b c = rectangleArea a b * c  </div><div class="line"></div><div class="line"><span class="title">area</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span> -&gt; <span class="type">Float</span> -&gt; <span class="type">Float</span>  </div><div class="line"><span class="title">area</span> a b c = rectangleArea a b * <span class="number">2</span> + rectangleArea a c * <span class="number">2</span> + rectangleArea c b * <span class="number">2</span>  </div><div class="line"></div><div class="line"><span class="meta"># won't export this. internal use</span></div><div class="line"><span class="title">rectangleArea</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span> -&gt; <span class="type">Float</span>  </div><div class="line"><span class="title">rectangleArea</span> a b = a * b</div></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta"># cube.hs</span></div><div class="line"><span class="keyword">module</span> Geometry.Cube  </div><div class="line">( <span class="title">volume</span>  </div><div class="line">，<span class="title">area</span>  </div><div class="line">) <span class="keyword">where</span>  </div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Geometry.Cuboid <span class="keyword">as</span> Cuboid  </div><div class="line"></div><div class="line"><span class="title">volume</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span>  </div><div class="line"><span class="title">volume</span> side = <span class="type">Cuboid</span>.volume side side side  </div><div class="line"></div><div class="line"><span class="title">area</span> :: <span class="type">Float</span> -&gt; <span class="type">Float</span>  </div><div class="line"><span class="title">area</span> side = <span class="type">Cuboid</span>.area side side side</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> fp </tag>
            
            <tag> haskell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cloud]]></title>
      <url>http://hczhang.com/2017/10/26/cloud/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年10月26日</p>
</blockquote>
<p>阴天了，女儿给我解释道：<br>云彩的小宝宝还不来<br>云彩的小宝宝是小水滴<br>云彩的上面是医院吗？</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Haskell 5 HOF]]></title>
      <url>http://hczhang.com/2017/10/19/Haskell-5/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Taking Notes from <a href="http://learnyouahaskell.com" target="_blank" rel="noopener">http://learnyouahaskell.com</a></p>
</blockquote>
<h1 id="Curried-functions"><a href="#Curried-functions" class="headerlink" title="Curried functions"></a>Curried functions</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="title">compareWithHundred</span> :: (<span class="type">Num</span> a, <span class="type">Ord</span> a) =&gt; a -&gt; <span class="type">Ordering</span></div><div class="line"><span class="title">compareWithHundred</span> = compare <span class="number">100</span></div><div class="line"></div><div class="line"><span class="title">divideByTen</span> :: (<span class="type">Floating</span> a) =&gt; a -&gt; a</div><div class="line"><span class="title">divideByTen</span> = (/<span class="number">10</span>)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="High-order"><a href="#High-order" class="headerlink" title="High order"></a>High order</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="title">zipWith</span> :: (a -&gt; b -&gt; c) -&gt; [a] -&gt; [b] -&gt; [c]</div><div class="line"><span class="title">zipWith</span> _ [] _ = []</div><div class="line"><span class="title">zipWith</span> _ _ [] = []</div><div class="line"><span class="title">zipWith</span> f (x:xs) (y:ys) = f x y : zipWith f xs ys</div><div class="line"></div><div class="line"><span class="title">ghci</span>&gt; zipWith' (+) [<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>] [<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>]  </div><div class="line">[<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>]  </div><div class="line"><span class="title">ghci</span>&gt; zipWith' max [<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>] [<span class="number">7</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>]  </div><div class="line">[<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>]  </div><div class="line"><span class="title">ghci</span>&gt; zipWith' (++) [<span class="string">"foo "</span>，<span class="string">"bar "</span>，<span class="string">"baz "</span>] [<span class="string">"fighters"</span>，<span class="string">"hoppers"</span>，<span class="string">"aldrin"</span>]  </div><div class="line">[<span class="string">"foo fighters"</span>,<span class="string">"bar hoppers"</span>,<span class="string">"baz aldrin"</span>]  </div><div class="line"><span class="title">ghci</span>&gt; zipWith' (*) (replicate <span class="number">5</span> <span class="number">2</span>) [<span class="number">1.</span>.]  </div><div class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]  </div><div class="line"><span class="title">ghci</span>&gt; zipWith' (zipWith' (*)) [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]] [[<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>]]  </div><div class="line">[[<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>],[<span class="number">9</span>,<span class="number">20</span>,<span class="number">30</span>],[<span class="number">10</span>,<span class="number">12</span>,<span class="number">12</span>]]</div></pre></td></tr></table></figure>
<h1 id="map-amp-filter"><a href="#map-amp-filter" class="headerlink" title="map &amp; filter"></a>map &amp; filter</h1><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="title">map</span> :: (a -&gt; b) -&gt; [a] -&gt; [b]</div><div class="line"><span class="title">map</span> _ [] = []</div><div class="line"><span class="title">map</span> f (x:xs) = f x : map f xs</div><div class="line"></div><div class="line"><span class="title">ghci</span>&gt; map (+<span class="number">3</span>) [<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>]  </div><div class="line">[<span class="number">4</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>]  </div><div class="line"></div><div class="line">[x+<span class="number">3</span> | x &lt;- [<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>] ]</div></pre></td></tr></table></figure>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="title">filter</span> :: (a -&gt; <span class="type">Bool</span>) -&gt; [a] -&gt; [a]</div><div class="line"><span class="title">filter</span> _ [] = []</div><div class="line"><span class="title">filter</span> f (x:xs)</div><div class="line">    | f x       = x : filter f xs</div><div class="line">    | otherwise = filter f xs</div></pre></td></tr></table></figure>
<h1 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">numLongChains</span> :: <span class="type">Int</span></div><div class="line"><span class="title">numLongChains</span> = length (filter (\xs -&gt; length xs &gt; <span class="number">15</span>) (map chain [<span class="number">1.</span><span class="number">.100</span>]))</div></pre></td></tr></table></figure>
<blockquote>
<p>map (+3) [1,6,3,2]   <strong>VS</strong>   map (\x -&gt; x+3) [1,6,3,2]</p>
</blockquote>
<h1 id="fold"><a href="#fold" class="headerlink" title="fold"></a>fold</h1><h2 id="foldl-foldr-foldl1-foldr1"><a href="#foldl-foldr-foldl1-foldr1" class="headerlink" title="foldl foldr (foldl1 foldr1)"></a>foldl foldr (foldl1 foldr1)</h2><p>foldl1 与 foldr1 的行为与 foldl 和 foldr 相似，只是你无需明确提供初始值。他们假定 List 的首个(或末尾)元素作为起始值，并从旁边的元素开始折叠<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="title">sum'</span> :: (<span class="type">Num</span> a) =&gt; [a] -&gt; a</div><div class="line"><span class="title">sum'</span> xs = foldl (\acc x -&gt; acc + x) <span class="number">0</span> xs</div><div class="line"></div><div class="line"></div><div class="line"><span class="title">sum'</span> :: (<span class="type">Num</span> a) =&gt; [a] -&gt; a</div><div class="line"><span class="title">sum'</span> = foldl (+) <span class="number">0</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>有点消除同类项的感觉. I like it.</p>
</blockquote>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="title">maximum'</span> :: (<span class="type">Ord</span> a) =&gt; [a] -&gt; a  </div><div class="line"><span class="title">maximum'</span> = foldr1 (\x acc -&gt; <span class="keyword">if</span> x &gt; acc <span class="keyword">then</span> x <span class="keyword">else</span> acc)  </div><div class="line"></div><div class="line"><span class="title">reverse'</span> :: [a] -&gt; [a]  </div><div class="line"><span class="title">reverse'</span> = foldl (\acc x -&gt; x : acc) []  </div><div class="line"></div><div class="line"><span class="title">product'</span> :: (<span class="type">Num</span> a) =&gt; [a] -&gt; a  </div><div class="line"><span class="title">product'</span> = foldr1 (*)  </div><div class="line"></div><div class="line"><span class="title">filter'</span> :: (a -&gt; <span class="type">Bool</span>) -&gt; [a] -&gt; [a]  </div><div class="line"><span class="title">filter'</span> p = foldr (\x acc -&gt; <span class="keyword">if</span> p x <span class="keyword">then</span> x : acc <span class="keyword">else</span> acc) []  </div><div class="line"></div><div class="line"><span class="title">head'</span> :: [a] -&gt; a  </div><div class="line"><span class="title">head'</span> = foldr1 (\x _ -&gt; x)  </div><div class="line"></div><div class="line"><span class="title">last'</span> :: [a] -&gt; a  </div><div class="line"><span class="title">last'</span> = foldl1 (\_ x -&gt; x)</div></pre></td></tr></table></figure>
<h2 id="scanl-scanr-scanl1-scanr1"><a href="#scanl-scanr-scanl1-scanr1" class="headerlink" title="scanl scanr (scanl1 scanr1)"></a>scanl scanr (scanl1 scanr1)</h2><p>scanl 和 scanr 与 foldl 和 foldr 相似，只是它们会记录下累加值的所有状态到一个 List</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">ghci</span>&gt; scanl (+) <span class="number">0</span> [<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>]  </div><div class="line">[<span class="number">0</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">11</span>]</div></pre></td></tr></table></figure>
<h1 id="‘-’-function"><a href="#‘-’-function" class="headerlink" title="‘$’ function"></a>‘$’ function</h1><p>定义<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">($) :: (a -&gt; b) -&gt; a -&gt; b  </div><div class="line"><span class="title">f</span> $ x = f x</div></pre></td></tr></table></figure></p>
<p>$看作是在右面写一对括号的等价形式</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="title">sum</span> (map sqrt [<span class="number">1.</span><span class="number">.130</span>])</div><div class="line"><span class="title">sum</span> $ map sqrt [<span class="number">1.</span><span class="number">.130</span>]</div><div class="line"></div><div class="line"><span class="title">sqrt</span> (<span class="number">3</span>+<span class="number">4</span>+<span class="number">9</span>)</div><div class="line"><span class="title">sqrt</span> $ <span class="number">3</span>+<span class="number">4</span>+<span class="number">9</span></div><div class="line"></div><div class="line"><span class="title">f</span> (g (z x))</div><div class="line"><span class="title">f</span> $ g $ z x</div><div class="line"></div><div class="line"><span class="title">sum</span> (filter (&gt; <span class="number">10</span>) (map (*<span class="number">2</span>) [<span class="number">2.</span><span class="number">.10</span>])</div><div class="line"><span class="title">sum</span> $ filter (&gt; <span class="number">10</span>) $ map (*<span class="number">2</span>) [<span class="number">2.</span><span class="number">.10</span>]</div></pre></td></tr></table></figure>
<h1 id="Function-composition"><a href="#Function-composition" class="headerlink" title="Function composition"></a>Function composition</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(.) :: (b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; c  </div><div class="line"><span class="title">f</span> . g = \x -&gt; f (g x)</div></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="title">ghci</span>&gt; map (\x -&gt; negate (abs x)) [<span class="number">5</span>,<span class="number">-3</span>,<span class="number">-6</span>,<span class="number">7</span>,<span class="number">-3</span>,<span class="number">2</span>,<span class="number">-19</span>,<span class="number">24</span>]  </div><div class="line">[<span class="number">-5</span>,<span class="number">-3</span>,<span class="number">-6</span>,<span class="number">-7</span>,<span class="number">-3</span>,<span class="number">-2</span>,<span class="number">-19</span>,<span class="number">-24</span>]</div><div class="line"></div><div class="line"><span class="title">ghci</span>&gt; map (negate . abs) [<span class="number">5</span>,<span class="number">-3</span>,<span class="number">-6</span>,<span class="number">7</span>,<span class="number">-3</span>,<span class="number">2</span>,<span class="number">-19</span>,<span class="number">24</span>]  </div><div class="line">[<span class="number">-5</span>,<span class="number">-3</span>,<span class="number">-6</span>,<span class="number">-7</span>,<span class="number">-3</span>,<span class="number">-2</span>,<span class="number">-19</span>,<span class="number">-24</span>]</div></pre></td></tr></table></figure>
<h2 id="point-free-style"><a href="#point-free-style" class="headerlink" title="point free style"></a>point free style</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="title">sum</span> :: (<span class="type">Num</span> a) =&gt; [a] -&gt; a</div><div class="line"><span class="title">sum</span> xs = foldl (+) <span class="number">0</span> xs</div><div class="line"></div><div class="line">// change to</div><div class="line"><span class="title">sum</span> = foldl (+) <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="title">fn</span> x = ceiling (negate (tan (cos (max <span class="number">50</span> x))))</div><div class="line"><span class="title">fn</span> = ceiling . negate . tan . cos . max <span class="number">50</span></div></pre></td></tr></table></figure>
<p>函数若过于复杂，再使用 point free style 往往会适得其反，因此构造较长的函数组合链是不被鼓励的。更好的解决方法，就是使用 let 语句给中间的运算结果绑定一个名字，或者说把问题分解成几个小问题再组合到一起。这样一来我们代码的读者就可以轻松些，不必要纠结那巨长的函数组合链了</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="title">oddSquareSum</span> :: <span class="type">Integer</span>  </div><div class="line"><span class="title">oddSquareSum</span> = sum (takeWhile (&lt;<span class="number">10000</span>) (filter odd (map (^<span class="number">2</span>) [<span class="number">1.</span>.])))</div><div class="line"></div><div class="line"><span class="title">oddSquareSum</span> = sum . takeWhile (&lt;<span class="number">10000</span>) . filter odd . map (^<span class="number">2</span>) $ [<span class="number">1.</span>.]</div><div class="line"></div><div class="line"><span class="title">oddSquareSum</span> =   </div><div class="line">    <span class="keyword">let</span> oddSquares = filter odd $ map (^<span class="number">2</span>) [<span class="number">1.</span>.]  </div><div class="line">        belowLimit = takeWhile (&lt;<span class="number">10000</span>) oddSquares  </div><div class="line">    <span class="keyword">in</span>  sum belowLimit</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> fp </tag>
            
            <tag> haskell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Haskell 4 Recursive]]></title>
      <url>http://hczhang.com/2017/10/19/Haskell-4/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Taking Notes from <a href="http://learnyouahaskell.com" target="_blank" rel="noopener">http://learnyouahaskell.com</a></p>
</blockquote>
<h1 id="Recursive"><a href="#Recursive" class="headerlink" title="Recursive"></a>Recursive</h1><a id="more"></a>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="title">max</span> :: (<span class="type">Ord</span> a) =&gt; [a] -&gt; a</div><div class="line"><span class="title">max</span> [] = error <span class="string">"max of empty list"</span></div><div class="line"><span class="title">max</span> [x] = x</div><div class="line"><span class="title">max</span> (x:xs)</div><div class="line">  | x &gt; maxTail = x</div><div class="line">  | otherwise = maxTail</div><div class="line">  <span class="keyword">where</span> maxTail = max xs</div></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="title">deplicate</span> :: (<span class="type">Num</span> i, <span class="type">Ord</span> i) =&gt; i -&gt; a -&gt; [a]</div><div class="line"><span class="title">deplicate</span> n x</div><div class="line">  | n &lt;= <span class="number">0</span> = []</div><div class="line">  | otherwise = x:replicate (n - <span class="number">1</span>) x</div><div class="line"></div><div class="line"><span class="title">zip'</span> :: [a] -&gt; [b] -&gt; [(a,b)]  </div><div class="line"><span class="title">zip'</span> _ [] = []  </div><div class="line"><span class="title">zip'</span> [] _ = []  </div><div class="line"><span class="title">zip'</span> (x:xs) (y:ys) = (x,y):zip' xs ys</div></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="title">quicksort</span> :: (<span class="type">Ord</span> a) =&gt; [a] -&gt; [a]  </div><div class="line"><span class="title">quicksort</span> [] = []  </div><div class="line"><span class="title">quicksort</span> (x:xs) =  </div><div class="line">  <span class="keyword">let</span> smallerSorted = quicksort [a | a &lt;- xs, a &lt;= x] </div><div class="line">      biggerSorted = quicksort [a | a &lt;- xs, a &gt; x]  </div><div class="line">  <span class="keyword">in</span> smallerSorted ++ [x] ++ biggerSorted</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> fp </tag>
            
            <tag> haskell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[wishes]]></title>
      <url>http://hczhang.com/2017/10/19/wishes/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年7月15日</p>
</blockquote>
<p>女儿对着冰激凌许愿到：</p>
<blockquote>
<p>天天吃爆米花不生病<br>吃到好多美食</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Haskell 3 Function]]></title>
      <url>http://hczhang.com/2017/10/17/Haskell-3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Taking Notes from <a href="http://learnyouahaskell.com" target="_blank" rel="noopener">http://learnyouahaskell.com</a></p>
</blockquote>
<h1 id="Pattern-matching"><a href="#Pattern-matching" class="headerlink" title="Pattern matching"></a>Pattern matching</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="title">lucky</span> :: (<span class="type">Integral</span> a) =&gt; a -&gt; <span class="type">String</span></div><div class="line"><span class="title">lucky</span> <span class="number">7</span> = <span class="string">"LUCKY NUMBER SEVEN!"</span></div><div class="line"><span class="title">lucky</span> x = <span class="string">"Sorry, you're out of luck!"</span></div><div class="line"></div><div class="line"><span class="title">factorial</span> :: (<span class="type">Integral</span> a) =&gt; a -&gt; a</div><div class="line"><span class="title">factorial</span> <span class="number">0</span> = <span class="number">1</span></div><div class="line"><span class="title">factorial</span> n = n * factorial (n - <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="title">addVectors</span> :: (<span class="type">Num</span> a) =&gt; (a, a) -&gt; (b, b) -&gt; (a, a)</div><div class="line"><span class="title">addVectors</span> (x1, y1) (x2, y2) = (x1 + x2, y1 + y2)</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">head</span> :: [a] -&gt; a</div><div class="line"><span class="title">head</span> [] = error <span class="string">"Cannot call head on an empty list"</span></div><div class="line"><span class="title">head</span> (x:_) = x</div></pre></td></tr></table></figure>
<p>你若要绑定多个变量(用 _ 也是如此)，我们必须用括号将其括起<br>error 函数，它可以生成一个运行时错误</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">length</span> :: (<span class="type">Num</span> b) =&gt; [a] -&gt; b</div><div class="line"><span class="title">length</span> [] = <span class="number">0</span></div><div class="line"><span class="title">length</span> (_:xs) = <span class="number">1</span> + length xs</div></pre></td></tr></table></figure>
<h2 id="‘as’-model"><a href="#‘as’-model" class="headerlink" title="‘as’ model"></a>‘as’ model</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">capital</span> :: <span class="type">String</span> -&gt; <span class="type">String</span>  </div><div class="line"><span class="title">capital</span> <span class="string">""</span> = <span class="string">"Empty string, whoops!"</span>  </div><div class="line"><span class="title">capital</span> all@(x:xs) = <span class="string">"The first letter of "</span> ++ all ++ <span class="string">" is "</span> ++ [x]</div></pre></td></tr></table></figure>
<h1 id="Guards"><a href="#Guards" class="headerlink" title="Guards"></a>Guards</h1><p>类似if语句，更好的可读性<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="title">max'</span> :: (<span class="type">Ord</span> a) =&gt; a -&gt; a -&gt; a  </div><div class="line"><span class="title">max'</span> a b   </div><div class="line">    | a &gt; b     = a  </div><div class="line">    | otherwise = b</div></pre></td></tr></table></figure></p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="title">myCompare</span> :: (<span class="type">Ord</span> a) =&gt; a -&gt; a -&gt; <span class="type">Ordering</span>  </div><div class="line"><span class="title">a</span> `myCompare` b  </div><div class="line">    | a &gt; b     = <span class="type">GT</span>  </div><div class="line">    | a == b    = <span class="type">EQ</span>  </div><div class="line">    | otherwise = <span class="type">LT</span></div><div class="line"></div><div class="line"><span class="title">ghci</span>&gt; <span class="number">3</span> `myCompare` <span class="number">2</span>  </div><div class="line"><span class="type">GT</span></div></pre></td></tr></table></figure>
<blockquote>
<p>通过 `，我们不仅可以以中缀形式调用函数，也可以在定义函数的时候使用它</p>
</blockquote>
<h2 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="title">bmiTell</span> :: (<span class="type">RealFloat</span> a) =&gt; a -&gt; a -&gt; <span class="type">String</span>  </div><div class="line"><span class="title">bmiTell</span> weight height  </div><div class="line">    | bmi &lt;= skinny = <span class="string">"You're underweight, you emo, you!"</span>  </div><div class="line">    | bmi &lt;= normal = <span class="string">"You're supposedly normal. Pffft, I bet you're ugly!"</span>  </div><div class="line">    | bmi &lt;= fat    = <span class="string">"You're fat! Lose some weight, fatty!"</span>  </div><div class="line">    | otherwise     = <span class="string">"You're a whale, congratulations!"</span>  </div><div class="line">    <span class="keyword">where</span> bmi = weight / height ^ <span class="number">2</span>  </div><div class="line">          skinny = <span class="number">18.5</span>  </div><div class="line">          normal = <span class="number">25.0</span>  </div><div class="line">          fat = <span class="number">30.0</span></div></pre></td></tr></table></figure>
<p>pattern matching<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">where</span> bmi = weight / height ^ <span class="number">2</span>  </div><div class="line">      (skinny, normal, fat) = (<span class="number">18.5</span>, <span class="number">25.0</span>, <span class="number">30.0</span>)</div></pre></td></tr></table></figure></p>
<p>Another example<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="title">initials</span> :: <span class="type">String</span> -&gt; <span class="type">String</span> -&gt; <span class="type">String</span>  </div><div class="line"><span class="title">initials</span> firstname lastname = [f] ++ <span class="string">". "</span> ++ [l] ++ <span class="string">"."</span>  </div><div class="line">    <span class="keyword">where</span> (f:_) = firstname  </div><div class="line">          (l:_) = lastname</div></pre></td></tr></table></figure></p>
<h2 id="Where-binding-function"><a href="#Where-binding-function" class="headerlink" title="Where binding function"></a>Where binding function</h2><p>where 绑定可以定义名字，也可以定义函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">calcBmis :: (RealFloat a) =&gt; [(a, a)] -&gt; [a]  </div><div class="line">calcBmis xs = [bmi w h | (w, h) &lt;- xs] </div><div class="line">    where bmi weight height = weight / height ^ 2</div></pre></td></tr></table></figure></p>
<h1 id="let"><a href="#let" class="headerlink" title="let"></a>let</h1><p>where 绑定是在函数底部定义名字，对包括所有 guard 在内的整个函数可见。let 绑定则是个 <strong>表达式</strong>，允许你在任何位置定义局部变量，而对不同的 guard 不可见<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="title">cylinder</span> :: (<span class="type">RealFloat</span> a) =&gt; a -&gt; a -&gt; a</div><div class="line"><span class="title">cylinder</span> r h =</div><div class="line">    <span class="keyword">let</span> sideArea = <span class="number">2</span> * pi * r * h</div><div class="line">        topArea = pi * r ^ <span class="number">2</span></div><div class="line">    <span class="keyword">in</span> sideArea + <span class="number">2</span> * topArea</div></pre></td></tr></table></figure></p>
<p><strong>let [bindings] in [expressions]</strong><br>在 let 中绑定的名字仅对 in 部分可见</p>
<p>作为表达式<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="title">ghci</span>&gt; <span class="number">4</span> * (<span class="keyword">let</span> a = <span class="number">9</span> <span class="keyword">in</span> a + <span class="number">1</span>) + <span class="number">2</span></div><div class="line"><span class="number">42</span></div><div class="line"><span class="title">ghci</span>&gt; [<span class="keyword">let</span> square x = x * x <span class="keyword">in</span> (square <span class="number">5</span>, square <span class="number">3</span>, square <span class="number">2</span>)]</div><div class="line">[(<span class="number">25</span>, <span class="number">9</span>, <span class="number">4</span>)]</div></pre></td></tr></table></figure></p>
<p>list comprehension<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">calcBmis</span> :: (<span class="type">RealFloat</span> a) =&gt; [(a, a)] -&gt; [a]  </div><div class="line"><span class="title">calcBmis</span> xs = [bmi | (w, h) &lt;- xs, <span class="keyword">let</span> bmi = w / h ^ <span class="number">2</span>, bmi &gt;= <span class="number">25.0</span>]</div></pre></td></tr></table></figure></p>
<h1 id="Case-expressions"><a href="#Case-expressions" class="headerlink" title="Case expressions"></a>Case expressions</h1><p><code>pattern matching</code> is syntax suger of case expr</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">case expression of pattern -&gt; result  </div><div class="line">                   pattern -&gt; result  </div><div class="line">                   pattern -&gt; result  </div><div class="line">                   ...</div></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// pattern matching</div><div class="line"><span class="title">head'</span> :: [a] -&gt; a  </div><div class="line"><span class="title">head'</span> [] = error <span class="string">"No head for empty lists!"</span>  </div><div class="line"><span class="title">head'</span> (x:_) = x</div><div class="line"></div><div class="line"><span class="title">head'</span> :: [a] -&gt; a  </div><div class="line"><span class="title">head'</span> xs = <span class="keyword">case</span> xs <span class="keyword">of</span> [] -&gt; error <span class="string">"No head for empty lists!"</span></div><div class="line">                   (x:_) -&gt; x</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> fp </tag>
            
            <tag> haskell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Haskell 2 Type and Typeclass]]></title>
      <url>http://hczhang.com/2017/10/16/Haskell-2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Taking Notes from <a href="http://learnyouahaskell.com" target="_blank" rel="noopener">http://learnyouahaskell.com</a></p>
</blockquote>
<h1 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ghci&gt; :t <span class="string">'a'</span></div><div class="line"><span class="string">'a'</span> :: Char</div><div class="line">ghci&gt; :t (True, <span class="string">'a'</span>)  </div><div class="line">(True, <span class="string">'a'</span>) :: (Bool, Char)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Function-Type"><a href="#Function-Type" class="headerlink" title="Function Type"></a>Function Type</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">addThree</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Int</span>  </div><div class="line"><span class="title">addThree</span> x y z = x + y + z</div></pre></td></tr></table></figure>
<h2 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h2><p><code>Int</code> 有界的整数<br><code>Integer</code> 无界的<br><code>Float</code> 单精度的浮点数<br><code>Double</code> 双精度的浮点数<br><code>Bool</code> True False<br><code>Char</code><br><code>Tuple</code></p>
<h2 id="Type-Variables"><a href="#Type-Variables" class="headerlink" title="Type Variables"></a>Type Variables</h2><p>a 是类型变量, type variable<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ghci&gt; :t head</div><div class="line">head :: [a] -&gt; a</div><div class="line">ghci&gt; :t fst  </div><div class="line">fst :: (a, b) -&gt; a</div></pre></td></tr></table></figure></p>
<h1 id="Typeclasses"><a href="#Typeclasses" class="headerlink" title="Typeclasses"></a>Typeclasses</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ghci&gt; :t (==)</div><div class="line">(==) :: (Eq a) =&gt; a -&gt; a -&gt; Bool</div></pre></td></tr></table></figure>
<h2 id="Eq"><a href="#Eq" class="headerlink" title="Eq"></a>Eq</h2><p>判断相等性的接口<br><code>elem :: (Eq a) =&gt; a -&gt; [a] -&gt; Bool</code></p>
<h2 id="Ord"><a href="#Ord" class="headerlink" title="Ord"></a>Ord</h2><p>包含可比较大小的类型. Ord 包中包含了&lt;, &gt;, &lt;=, &gt;= 和 compare 函数.<br>Compare 返回 GT, LT, EQ</p>
<h2 id="Show"><a href="#Show" class="headerlink" title="Show"></a>Show</h2><p>Show 的成员为可用字符串表示的类型<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ghci&gt; show 5.334  </div><div class="line"><span class="string">"5.334"</span>  </div><div class="line">ghci&gt; show True  </div><div class="line"><span class="string">"True"</span></div></pre></td></tr></table></figure></p>
<h2 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h2><p>read 函数可以将一个字符串转为 Read 的某成员类型<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ghci&gt; <span class="built_in">read</span> <span class="string">"5"</span> - 2  </div><div class="line">3 </div><div class="line">ghci&gt; <span class="built_in">read</span> <span class="string">"4"</span>  </div><div class="line">&lt; interactive &gt;:1:0:  </div><div class="line">ghci&gt; <span class="built_in">read</span> <span class="string">"4"</span> :: Int  </div><div class="line">5</div></pre></td></tr></table></figure></p>
<h2 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h2><p>Enum的成员都是连续的类型 – 也就是可枚举<br>Enum 包含的类型有：(), Bool, Char, Ordering, Int, Integer, Float 和 Double<br>succ (successer)函数和 pred (predecesor)函数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ghci&gt; succ <span class="string">'B'</span>  </div><div class="line"><span class="string">'C'</span></div></pre></td></tr></table></figure></p>
<h2 id="Bounded"><a href="#Bounded" class="headerlink" title="Bounded"></a>Bounded</h2><p>成员都有一个上限和下限</p>
<h2 id="Num"><a href="#Num" class="headerlink" title="Num"></a>Num</h2><p>表示数字的 Typeclass. Num 包含所有的数字：实数和整数<br>类型只有亲近 Show 和 Eq，才可以加入 Num<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ghci&gt; :t (*)  </div><div class="line">(*) :: (Num a) =&gt; a -&gt; a -&gt; a</div></pre></td></tr></table></figure></p>
<h3 id="Integral"><a href="#Integral" class="headerlink" title="Integral"></a>Integral</h3><p>Integral 仅包含整数，其中的成员类型有 Int 和 Integer</p>
<h3 id="Floating"><a href="#Floating" class="headerlink" title="Floating"></a>Floating</h3><p>仅包含浮点类型：Float 和 Double</p>
<h3 id="fromIntegral"><a href="#fromIntegral" class="headerlink" title="fromIntegral"></a>fromIntegral</h3><p>它取一个整数做参数并回传一个更加通用的数字<br><code>fromIntegral :: (Num b, Integral a) =&gt; a -&gt; b</code><br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">fromIntegral</span> (length [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]) + <span class="number">3.2</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> fp </tag>
            
            <tag> haskell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Haskell 1 Basic and List]]></title>
      <url>http://hczhang.com/2017/10/15/Haskell-1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Taking Notes from <a href="http://learnyouahaskell.com" target="_blank" rel="noopener">http://learnyouahaskell.com</a></p>
</blockquote>
<h1 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h1><ul>
<li>infix (sanwich) : + - * /</li>
<li>prefix</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">doubleMe</span> x = x + x</div><div class="line"><span class="title">doubleUs</span> x y = doubleMe x + doubleMe y</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="If-Expression"><a href="#If-Expression" class="headerlink" title="If Expression"></a>If Expression</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">doubleSmallNumber</span> x = <span class="keyword">if</span> x &gt; <span class="number">100</span> <span class="keyword">then</span> x <span class="keyword">else</span> x * <span class="number">2</span></div></pre></td></tr></table></figure>
<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><p>“Hello” 只是 [‘h’,’e’,’l’,’l’,’o’] 的语法糖而已</p>
<h2 id="Operators-gt-gt"><a href="#Operators-gt-gt" class="headerlink" title="Operators ++ : !! &gt; &gt;="></a>Operators ++ : !! &gt; &gt;=</h2><ul>
<li><p>++ 会有遍历左边的List</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] ++ [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>: List 前端插入元素<br>[1,2,3]   ==  1:2:3:[]</p>
</li>
<li><p>!! 按照索引取得 List 中的元素, 0-based index</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="string">"Steven"</span> !! <span class="number">1</span></div><div class="line"><span class="title">t</span></div></pre></td></tr></table></figure>
</li>
<li><p>Compare Array &gt; &gt;=</p>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>] &gt; [<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>]  </div><div class="line"><span class="type">True</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p>head tail last init length null reverse take drop minimum maximum sum product elem<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="title">ghci</span>&gt; head [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>] </div><div class="line"><span class="number">5</span></div><div class="line"><span class="title">ghci</span>&gt; tail [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </div><div class="line">[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</div><div class="line"><span class="title">ghci</span>&gt; last [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </div><div class="line"><span class="number">1</span></div><div class="line"><span class="title">ghci</span>&gt; init [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</div><div class="line">[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>]</div><div class="line"><span class="title">ghci</span>&gt; length [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </div><div class="line"><span class="number">5</span></div><div class="line"><span class="title">ghci</span>&gt; null [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  </div><div class="line"><span class="type">False</span>  </div><div class="line"><span class="title">ghci</span>&gt; reverse [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="title">ghci</span>&gt; take <span class="number">3</span> [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </div><div class="line">[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>]  </div><div class="line"><span class="title">ghci</span>&gt; take <span class="number">5</span> [<span class="number">1</span>,<span class="number">2</span>]  </div><div class="line">[<span class="number">1</span>,<span class="number">2</span>]  </div><div class="line"><span class="title">ghci</span>&gt; drop <span class="number">3</span> [<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>]  </div><div class="line">[<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>]  </div><div class="line"><span class="title">ghci</span>&gt; minimum [<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>]  </div><div class="line"><span class="number">1</span>  </div><div class="line"><span class="title">ghci</span>&gt; maximum [<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  </div><div class="line"><span class="number">9</span></div><div class="line"><span class="title">ghci</span>&gt; sum [<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>]  </div><div class="line"><span class="number">31</span>  </div><div class="line"><span class="title">ghci</span>&gt; product [<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]  </div><div class="line"><span class="number">24</span>  </div><div class="line"><span class="title">ghci</span>&gt; <span class="number">4</span> `elem` [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]  </div><div class="line"><span class="type">True</span></div></pre></td></tr></table></figure></p>
<h1 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="title">ghci</span>&gt; [<span class="number">1.</span><span class="number">.20</span>]</div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>]</div><div class="line"><span class="title">ghci</span>&gt; ['a'..'z']</div><div class="line"><span class="string">"abcdefghijklmnopqrstuvwxyz"</span></div><div class="line"><span class="title">ghci</span>&gt; [<span class="number">20</span>,<span class="number">19.</span><span class="number">.1</span>]</div></pre></td></tr></table></figure>
<ul>
<li>cycle</li>
<li>repeat</li>
<li>replicate</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="title">ghci</span>&gt; take <span class="number">24</span> [<span class="number">13</span>,<span class="number">26.</span>.]</div><div class="line"><span class="title">ghci</span>&gt; take <span class="number">10</span> (cycle [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</div><div class="line"><span class="title">ghci</span>&gt; take <span class="number">10</span> (repeat <span class="number">5</span>)</div><div class="line">[<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>]</div><div class="line"><span class="title">ghci</span>&gt; replicate <span class="number">3</span> <span class="number">10</span></div><div class="line">[<span class="number">10</span>,<span class="number">10</span>,<span class="number">10</span>]</div></pre></td></tr></table></figure>
<h1 id="List-Comprehension-Filtering"><a href="#List-Comprehension-Filtering" class="headerlink" title="List Comprehension (Filtering)"></a>List Comprehension (Filtering)</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">ghci</span>&gt; [x*<span class="number">2</span> | x &lt;- [<span class="number">1.</span><span class="number">.10</span>], x*<span class="number">2</span> &gt;= <span class="number">12</span>]</div><div class="line">[<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">20</span>]</div></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">boomBangs</span> xs = [ <span class="keyword">if</span> x &lt; <span class="number">10</span> <span class="keyword">then</span> <span class="string">"BOOM!"</span> <span class="keyword">else</span> <span class="string">"BANG!"</span> | x &lt;- xs, odd x]</div><div class="line"><span class="title">ghci</span>&gt; boomBangs [<span class="number">7.</span><span class="number">.13</span>]</div><div class="line">[<span class="string">"BOOM!"</span>,<span class="string">"BOOM!"</span>,<span class="string">"BANG!"</span>,<span class="string">"BANG!"</span>]</div></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">length'</span> xs = sum [<span class="number">1</span> | _ &lt;- xs]</div></pre></td></tr></table></figure>
<h1 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h1><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="title">ghci</span>&gt; fst (<span class="number">8</span>,<span class="number">11</span>)</div><div class="line"><span class="number">8</span></div><div class="line"><span class="title">ghci</span>&gt; fst (<span class="string">"Wow"</span>, <span class="type">False</span>)</div><div class="line"><span class="string">"Wow"</span></div><div class="line"><span class="title">ghci</span>&gt; snd (<span class="number">8</span>,<span class="number">11</span>)</div><div class="line"><span class="number">11</span></div><div class="line"><span class="title">ghci</span>&gt; zip [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] [<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>]</div><div class="line">[(<span class="number">1</span>,<span class="number">5</span>),(<span class="number">2</span>,<span class="number">5</span>),(<span class="number">3</span>,<span class="number">5</span>),(<span class="number">4</span>,<span class="number">5</span>),(<span class="number">5</span>,<span class="number">5</span>)]</div><div class="line"><span class="title">ghci</span>&gt; zip [<span class="number">1</span> .. <span class="number">5</span>] [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>, <span class="string">"five"</span>]</div><div class="line">[(<span class="number">1</span>,<span class="string">"one"</span>),(<span class="number">2</span>,<span class="string">"two"</span>),(<span class="number">3</span>,<span class="string">"three"</span>),(<span class="number">4</span>,<span class="string">"four"</span>),(<span class="number">5</span>,<span class="string">"five"</span>)]</div></pre></td></tr></table></figure>
<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">ghci</span>&gt; <span class="keyword">let</span> rightTriangles = [ (a,b,c) | c &lt;- [<span class="number">1.</span><span class="number">.10</span>], b &lt;- [<span class="number">1.</span>.c], a &lt;- [<span class="number">1.</span>.b], a^<span class="number">2</span> + b^<span class="number">2</span> == c^<span class="number">2</span>, a+b+c == <span class="number">24</span>]</div><div class="line"><span class="title">ghci</span>&gt; rightTriangles</div><div class="line">[(<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>)]</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> fp </tag>
            
            <tag> haskell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[save money]]></title>
      <url>http://hczhang.com/2017/10/15/save-money/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年09月15日</p>
</blockquote>
<p>女儿睡前洗漱，自己玩出新的花样。<br>她用牙线当磨具，用洗手液当泡泡水，自己玩的不亦乐乎。<br>妈妈正巧走过来，开心的夸赞一番，女儿聪明啊，女儿有创造力啊<br>。<br>女儿却反问一句：<br>”妈妈你为什么这么开心，是应为以后不用买泡泡水，为你省钱了吗？“</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[grow up fast]]></title>
      <url>http://hczhang.com/2017/08/16/grow-up-fast/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年8月16</p>
</blockquote>
<p>和女儿手拉手去公园散步<br>“爸爸，你能不能慢点长啊”<br>“什么意思，我长得很快吗？”我好奇的问到<br>“是啊，妈妈生我时，你就长那么大了”</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[book]]></title>
      <url>http://hczhang.com/2017/07/16/book/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年7月15日</p>
</blockquote>
<p>女儿还在国内。<br>我们又一次异地。<br>她再一次生病。<br>每天同样与女儿聊着视频。<br>小家伙顶着39度的高烧，让着给我讲故事。</p>
<p>妈妈，第三个故事是什么来着？</p>
<p>妈妈： 看目录啊。<br>”沐浴露“是啥？</p>
<p>爸爸： 目录就是全书的大纲<br>啥，”浴缸“？</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gallery]]></title>
      <url>http://hczhang.com/2017/04/08/gallery/</url>
      <content type="html"><![CDATA[<p>发布小小罗画廊网站，希望可以记录她的点滴。</p>
<p><a href="http://g.hczhang.com" target="_blank" rel="noopener">Gallery g.hczhang.com</a></p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[时间]]></title>
      <url>http://hczhang.com/2017/04/08/time/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年4月8日</p>
</blockquote>
<p>最近在引导女儿认识时间，于是就有了下面的成果。<br>游戏中，小小罗突然很认真的说：“爸爸，今天，明天就变成了昨天，是吗”<br>我认真听了下，开心的马上回答，“对呀，对呀，还有呢”<br>“恩，明天，明天就变成了昨天”<br>“对的”， 我说<br>“昨天，明天就变成了前天”<br>“呵呵，不错，条理清晰，都对了” 我深感欣慰的说。</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[老公]]></title>
      <url>http://hczhang.com/2017/03/17/husband/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年3月17日</p>
</blockquote>
<p>饭前，老婆对我叫了声老公，可是引起了女儿的反对。</p>
<p>“她是我老公”<br>“不，她是我的老公，你是她女儿” 老婆蹦豆说道。<br>“那我跟谁结婚啊，她是我老公”，女儿反驳道。<br>“是我老公”，耐心再解释一遍。</p>
<p>这个时候，我正在窃喜啊，被两个美女争抢，挺美的。</p>
<p>“好吧，那你给我七块钱，我让给你一会”<br>这是我晕倒前听到的最后一句女儿的话。<br>我只能晕倒了。</p>
<p>。。。</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[广告]]></title>
      <url>http://hczhang.com/2017/03/14/ad/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年3月14日</p>
</blockquote>
<p>和女儿看 disney DVD，开头广告一个接着一个。我有些不耐烦。<br>“怎么这么多广告啊” 我说<br>女儿大脑袋转过来，看我一眼解释道：”广告赚钱么“</p>
<p>女儿今天3岁8个月大</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我帮你]]></title>
      <url>http://hczhang.com/2017/02/20/help-you/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年2月20日</p>
</blockquote>
<p>今天小小罗回美国，从机场回家的路上小小罗对爸爸说<br>“老爸，我想你，我帮你干活，你的饭我帮你吃”<br>真是爸爸好帮手！</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Grep Process Trick]]></title>
      <url>http://hczhang.com/2017/02/16/Grep-Process-Trick/</url>
      <content type="html"><![CDATA[<p>两个今天学到的 Shell tricks.</p>
<ul>
<li>grep process</li>
<li>!$</li>
</ul>
<a id="more"></a>
<h2 id="grep-process"><a href="#grep-process" class="headerlink" title="grep process"></a>grep process</h2><p>一个我们常用的命令</p>
<blockquote>
<p>$ ps -ef | grep “java”<br>  502 13749 12934   0 11:29PM ttys002    0:00.00 grep java</p>
</blockquote>
<p>这个命令本身没什么问题，主要是在输出上。<br>每次都会带上 grep 命令本身的进程。<br>直觉上我都会用一段代码去过滤这条，从而得到真正进程号。<br>今天看到一个简洁的写法</p>
<blockquote>
<p>$ ps -ef | grep “[j]ava”</p>
</blockquote>
<p>解释下 [j]ava, 很有意思的办法，说出来也很好理解。<br>[j]ava 对于 grep 命令来说是 regex ,也就是按照 [j]ava, 进行过滤。<br>符合条件的当然是”java”,这个最终的字符串。<br>但是 grep 命令在对应进程所展现出来的却是 grep “[j]ava”，却是不符合上面的正则</p>
<h2 id=""><a href="#" class="headerlink" title="!$"></a>!$</h2><p>我经常打错命令，但是后面的参数却没有问题。<br>例如</p>
<blockquote>
<p>$ cd /usr/local/app/conf/a.conf</p>
</blockquote>
<p>事实上我是想删除掉 a.conf 这个文件。以前的做法都是使用 iTerm 的快捷键快速移动光标到到行首病删除 cd。<br>这个我用的也很顺手，但是总有一些环境的 terminal 没有那么好用。<br>可以试试下面的命令</p>
<blockquote>
<p>$ cd !$</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> shell </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Scala FP Ch01]]></title>
      <url>http://hczhang.com/2017/02/15/Scala-FP-Ch01/</url>
      <content type="html"><![CDATA[<p>[ <em>Draft</em> ]</p>
<p>最近在写ratpack，突然funcitonal programming的许多想法又跳了出来。查找资料过程中，读了一章红宝书</p>
<blockquote>
<p>Functiona Programming in Scala</p>
</blockquote>
<p>发现有许多新的理解。一开心打算重新拜读一遍。在这也做个笔记，或思想的总结。给未来的自己看。</p>
<a id="more"></a>
<h1 id="Chapter-01"><a href="#Chapter-01" class="headerlink" title="Chapter 01"></a>Chapter 01</h1><h2 id="What’s-functional-programming"><a href="#What’s-functional-programming" class="headerlink" title="What’s functional programming"></a>What’s functional programming</h2><p>Side effect example:</p>
<ul>
<li>Modifying a variable</li>
<li>Modifying a data structure in place</li>
<li>Setting a field on an object</li>
<li>Throwing an exception or halting with an error</li>
<li>Printing to the console or reading user input</li>
<li>Reading from or writing to a file</li>
<li>Drawing on the screen</li>
</ul>
<p>Two import concets</p>
<ul>
<li><p><strong>referential transparency</strong></p>
<p>  An expression e is referentially transparent if, for all programs p, all occurrences of e in p can be replaced by the result of evaluating e without affecting the meaning of p. A function f is pure if the expression f(x) is referentially transparent for all referentially transparent x.</p>
</li>
<li><p><strong>substitution model</strong></p>
</li>
</ul>
<h2 id="Referential-Transparency-RT"><a href="#Referential-Transparency-RT" class="headerlink" title="Referential Transparency (RT)"></a>Referential Transparency (RT)</h2><p>In any program, the expression can be replaced by its result without changing the meaning of the program. And we say that a function is pure if calling it with RT arguments is also RT.<br>For example, 2 + 3 is an expression that applies the pure function + to the values 2 and 3 (which are also expressions). This has no side effect. The evaluation of this expression results in the same value 5 every time. In fact, if we saw 2 + 3 in a program we could simply replace it with the value 5 and it wouldn’t change a thing about the meaning of our program.</p>
<h2 id="Substitution-Model"><a href="#Substitution-Model" class="headerlink" title="Substitution Model"></a>Substitution Model</h2><p>Referential transparency forces the invariant that everything a function does is represented by the value that it returns, according to the result type of the function. This constraint enables a simple and natural mode of reasoning about program evaluation called the substitution model.</p>
<p>We simply look at the function’s definition and substitute the arguments into its body. Even if you haven’t used the name “substitution model,” you have certainly used this mode of reasoning when thinking about your code.</p>
]]></content>
      
        
        <tags>
            
            <tag> scala </tag>
            
            <tag> fp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[爷爷奶奶]]></title>
      <url>http://hczhang.com/2017/02/15/grandparents/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年2月15日 - 多云</p>
</blockquote>
<p>签证办完，小小罗要和妈妈要回美国了。今天爷爷奶奶来锦州再来看看孩子。<br>小小罗在晚上与我的Facetime上对我说：<br>”爸爸，你的爸爸和妈妈来看你来了“<br>小家伙的把关系捋的门清，呵呵。</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[不想长大]]></title>
      <url>http://hczhang.com/2017/02/03/don-t-grow-up/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年2月3日 - 雨</p>
</blockquote>
<p>“妈妈，我不想长大”<br>“为什么啊”<br>“我怕妈妈抱不动我”<br>宝宝贝儿，其实爸爸妈妈希望你慢点长大。</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小红花]]></title>
      <url>http://hczhang.com/2017/01/28/red-flower/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年1月28日 - 晴</p>
</blockquote>
<p>女儿：“我给你看我的小红花，3个小红花”<br>爸爸：“为什么得到呀？“<br>女儿：”我好好洗手，跳舞好看，完了，又跳一遍“</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[睡一会]]></title>
      <url>http://hczhang.com/2017/01/26/sleep/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年1月26日 - 多云</p>
</blockquote>
<h2 id="Scene-I"><a href="#Scene-I" class="headerlink" title="Scene I"></a>Scene I</h2><p>我睡觉那，爸爸别挂，我一会就醒</p>
<h2 id="Scene-II"><a href="#Scene-II" class="headerlink" title="Scene II"></a>Scene II</h2><p>姥姥给小小罗买了个跳舞用带花边的扇子，闺女说好幸福，到家后看到妈妈后，就跑过来。举起扇子就扇风。<br>“我也让你幸福幸福，你幸福不？”<br>女儿啊你知道什么是东北的冬天吗</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解]]></title>
      <url>http://hczhang.com/2017/01/25/consideration/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年1月25日 - 多云</p>
</blockquote>
<p>晚上下班，就和妈妈Facetime，其实可以和妈妈安静的说会话儿，总是可以让我很放松，当然好景不长，小小罗又一次乱入。<br>“我还没睡醒，就把被叠了”<br>看着女儿，因没睡醒儿晃荡的大头，像是在看Disney的卡通。其实卡通人物和小狗一样，都是头与身体的比例失衡才显得呆萌啊。<br>”宝宝贝儿，爸爸下个月就回去了“，计划说了好几次，害怕她不信，忙解释到<br>“爸爸没想到这次分离这么长时间，本来打算你先回去，我过几个星期就跟过去…”<br>“我知道，我知道，但是，我在中国等着你呢，阿，快回来吧” 女儿急忙说道</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[占有]]></title>
      <url>http://hczhang.com/2017/01/11/own/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017年1月11日 - 大雨</p>
</blockquote>
<p>小小罗来到奶奶家，欢喜中，小家伙看上了奶奶的背包，奶奶也随了她的心愿送给了她。晚上与爸爸Facetime视频中，小小罗无不尽显其喜爱。<br>爸爸问道：”宝宝贝儿， 背包好看啊，谁的啊“<br>妈妈伸过头答到：”奶奶的小花宝，送给小小罗了“<br>小小罗的声音忽然插进，”就是小小罗的，前面那句不用说了“</p>
]]></content>
      
        
        <tags>
            
            <tag> journal </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GORM Query]]></title>
      <url>http://hczhang.com/2017/01/10/gorm-query/</url>
      <content type="html"><![CDATA[<h2 id="Simple-Query"><a href="#Simple-Query" class="headerlink" title="Simple Query"></a>Simple Query</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> users = User.where &#123;</div><div class="line">  password == <span class="string">"testing"</span> || child.password == <span class="string">"fake"</span></div><div class="line">&#125;.list(<span class="string">sort:</span> <span class="string">"loginId"</span>, <span class="string">order:</span> <span class="string">"desc"</span>)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Operations-could-be-used-in-query"><a href="#Operations-could-be-used-in-query" class="headerlink" title="Operations could be used in query"></a>Operations could be used in query</h2><ul>
<li>!=, &lt;, &gt;, &lt;=, &gt;=</li>
<li>==~, =~ (case insensitive)</li>
<li>!, &amp;&amp;, ||</li>
</ul>
<h2 id="Seperate-lines-are-implicitly-And-together"><a href="#Seperate-lines-are-implicitly-And-together" class="headerlink" title="Seperate lines are implicitly And together"></a>Seperate lines are implicitly <strong>And</strong> together</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> users = User.where &#123;</div><div class="line">  loginId =~<span class="string">"%$&#123;loginIdPart&#125;%"</span></div><div class="line">  <span class="keyword">if</span> (fromDate) &#123;</div><div class="line">    dateCreated &gt;= fromDate</div><div class="line">    &#125;</div><div class="line">  &#125;.list()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="List-supports-Named-Arguments"><a href="#List-supports-Named-Arguments" class="headerlink" title="List() supports Named Arguments"></a>List() supports Named Arguments</h2><ul>
<li>max</li>
<li>offset</li>
<li>sort</li>
<li>order</li>
<li>ignoreCase</li>
<li>fetch</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> users = User.list(<span class="string">sort:</span> <span class="string">'loginId'</span>,</div><div class="line"><span class="symbol">            order:</span> <span class="string">'desc'</span>,</div><div class="line"><span class="symbol">            max:</span> <span class="number">5</span>,</div><div class="line"><span class="symbol">            offset:</span> <span class="number">10</span>,</div><div class="line"><span class="symbol">            fetch:</span> [<span class="string">posts:</span> <span class="string">'eager'</span>])</div></pre></td></tr></table></figure>
<h2 id="Magic-find-and-count"><a href="#Magic-find-and-count" class="headerlink" title="Magic find and count"></a>Magic find and count</h2><p>findBy() and findAllBy()<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> users = User.findAllByLoginIdIlike(<span class="string">"%$&#123;loginId&#125;%"</span>)</div></pre></td></tr></table></figure></p>
<p>count()<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> poorPasswordCount = User.countByPassword(<span class="string">"password"</span>)</div></pre></td></tr></table></figure></p>
<h2 id="Criteria-Query"><a href="#Criteria-Query" class="headerlink" title="Criteria Query"></a>Criteria Query</h2><h3 id="and-and-or"><a href="#and-and-or" class="headerlink" title="and() and or()"></a>and() and or()</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> fetchUsers(String loginIdPart, Date fromDate = <span class="literal">null</span>) &#123;</div><div class="line">  <span class="keyword">def</span> users = User.withCriteria &#123;</div><div class="line">    and &#123;</div><div class="line">      ilike <span class="string">'loginId'</span>, <span class="string">"%$&#123;loginIdPart&#125;%"</span></div><div class="line">      <span class="keyword">if</span> (fromDate) &#123;</div><div class="line">        ge <span class="string">"dateCreated"</span>, fromDate</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="TODO-insert-Query-criteria-mappings-table"><a href="#TODO-insert-Query-criteria-mappings-table" class="headerlink" title="TODO: insert Query criteria mappings table"></a>TODO: insert Query criteria mappings table</h3><h3 id="Dynamic-queries-with-criteria"><a href="#Dynamic-queries-with-criteria" class="headerlink" title="Dynamic queries with criteria"></a>Dynamic queries with criteria</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> advResults() &#123;</div><div class="line">  <span class="keyword">def</span> profileProps = Profile.metaClass.properties*.name</div><div class="line">  <span class="keyword">def</span> profiles = Profile.withCriteria &#123;</div><div class="line">    <span class="string">"$&#123;params.queryType&#125;"</span> &#123;</div><div class="line">      params.each &#123; field, value -&gt;</div><div class="line">        <span class="keyword">if</span> (profileProps.contains(field) &amp;&amp; value) &#123;</div><div class="line">          ilike field, <span class="string">"%$&#123;value&#125;%"</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> [<span class="string">profiles:</span> profiles]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Report-style-query-projections"><a href="#Report-style-query-projections" class="headerlink" title="Report-style query projections"></a>Report-style query projections</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> tagList = Post.withCriteria &#123;</div><div class="line">  createAlias <span class="string">"tags"</span>, <span class="string">"t"</span></div><div class="line">  user &#123; eq <span class="string">"loginId"</span>, <span class="string">"phil"</span> &#125;</div><div class="line">  </div><div class="line">  projections &#123;</div><div class="line">    groupProperty <span class="string">"t.name"</span></div><div class="line">    count <span class="string">"t.id"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Using-HQL-directly"><a href="#Using-HQL-directly" class="headerlink" title="Using HQL directly"></a>Using HQL directly</h2><ul>
<li>find()</li>
<li>findAll()</li>
<li>executeQuery()</li>
<li>executeUpdate()</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">User.findAll(<span class="string">"from User u where u.userId = ?"</span>, [<span class="string">"joe"</span>] )</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> grails </tag>
            
            <tag> groovy </tag>
            
            <tag> gorm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oracle Linux Docker User's Guide]]></title>
      <url>http://hczhang.com/2017/01/10/oracle-linux-docker-user-s-guide/</url>
      <content type="html"><![CDATA[<h1 id="Oracle-Linux-Docker-User’s-Guide"><a href="#Oracle-Linux-Docker-User’s-Guide" class="headerlink" title="Oracle Linux Docker User’s Guide"></a>Oracle Linux Docker User’s Guide</h1><p><a href="https://docs.oracle.com/cd/E52668_01/E75728/html/section_kfy_f2z_fp2.html" target="_blank" rel="noopener">Offical Reference Document</a></p>
<a id="more"></a>
<h1 id="Update-system-kernel"><a href="#Update-system-kernel" class="headerlink" title="Update system kernel"></a>Update system kernel</h1><p>The following commonds will run as root</p>
<blockquote>
<p>sudo su -</p>
</blockquote>
<p>Add proxy<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cat &gt; /etc/profile.d/proxy.sh &lt;&lt;- EOF</div><div class="line"><span class="built_in">export</span> http_proxy=PROXY_HOST</div><div class="line"><span class="built_in">export</span> https_proxy=PROXY_HOST</div><div class="line"><span class="built_in">export</span> no_proxy=localhost,127.0.0.1</div><div class="line">EOF</div></pre></td></tr></table></figure></p>
<p>Get the public-yum.ol7.repo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /etc/yum.repos.d</div><div class="line">curl -o public-yum-ol7.repo  http://public-yum.oracle.com/public-yum-ol7.repo</div></pre></td></tr></table></figure></p>
<p>Disable other repository source file<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mv EPEL-ol7.repo EPEL-ol7.repo.bak</div><div class="line">mv ULN-Base-ol7.repo ULN-Base-ol7.repo.bak</div></pre></td></tr></table></figure></p>
<p>Edit the public-yum-ol7.repo file and change (enabled=) for each block {0 to disable 1 to enable}</p>
<blockquote>
<p>vi public-yum-ol7.repo</p>
</blockquote>
<p>-disable everything<br>-enable ol7_UEKR4</p>
<p>Upgrade system kernel to <strong>Unbreakable Enterprise Kernel Release 4 (UEK R4)</strong></p>
<blockquote>
<p>yum upgrade kernel*</p>
</blockquote>
<p>Restart system using new kernel</p>
<blockquote>
<p>init 6</p>
</blockquote>
<p>Check System Kernel</p>
<blockquote>
<p>uname -a</p>
</blockquote>
<h1 id="Install-docker-engine"><a href="#Install-docker-engine" class="headerlink" title="Install docker engine"></a>Install docker engine</h1><blockquote>
<p>vi /etc/yum.repos.d/public-yum-ol7.repo</p>
</blockquote>
<ul>
<li>-enable ol7-latest</li>
<li>-enable ol7-addons</li>
<li>-disable everything else</li>
</ul>
<p>Install Docker</p>
<blockquote>
<p>yum install docker-engin</p>
</blockquote>
<h1 id="Docker-Configuration"><a href="#Docker-Configuration" class="headerlink" title="Docker Configuration"></a>Docker Configuration</h1><p>To config web proxy</p>
<blockquote>
<p>[Service]<br>Environment=”HTTP_PROXY=proxy_URL:port”<br>Environment=”HTTPS_PROXY=proxy_URL:port”</p>
</blockquote>
<p>Flush changes</p>
<blockquote>
<p>systemctl daemon-reload</p>
</blockquote>
<h1 id="Docker-Service"><a href="#Docker-Service" class="headerlink" title="Docker Service"></a>Docker Service</h1><p>Start Docker daemon</p>
<blockquote>
<p>systemctl start|restart docker</p>
</blockquote>
<p>Start Docker at boot</p>
<blockquote>
<p>systemctl enable docker</p>
</blockquote>
<h1 id="Non-root-users-to-run-docker-cmds"><a href="#Non-root-users-to-run-docker-cmds" class="headerlink" title="Non-root users to run docker cmds"></a>Non-root users to run docker cmds</h1><p>Create the docker group</p>
<blockquote>
<p>groupadd docker</p>
</blockquote>
<p>Restart docker service</p>
<blockquote>
<p>service docker restart</p>
</blockquote>
<p>Add the users</p>
<blockquote>
<p>usermod -a -G docker user1</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> docker </tag>
            
            <tag> oracle linux </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
